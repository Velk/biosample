<?php

/**
 * Implement hook_help()
 *
 * @param $path
 * @param $arg
 * @return string
 */
function bs_rsb_help($path, $arg) {
    switch ($path) {
        case 'admin/help#bs_rsb':
            return '<p>' . t('Module BioSample for the Ressources Biologiques project.') . '</p>';
    }
}

/**
 * Implement hook_menu()
 *
 * @return array
 */
function bs_rsb_menu(){
    $items = array();

    $items['admin/BioSample/rb-manager'] = array(
        'title' => t('BS - RB manager'),
        'description' => t('BS RB manager'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bs_rsb_admin_manager_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/BioSample/rb-manager/%user/edit'] = array(
        'title' => t('BS - Establishment datas manager'),
        'description' => t('BS Establishment datas manager page'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bs_rsb_admin_datas_establishment_form'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/BioSample/criteres-manager'] = array(
        'title' => t('BS - Filters manager'),
        'description' => t('BS Filters manager'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bs_rsb_admin_filters_manager_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['ressources-biologiques/home'] = array(
        'title' => t('Ressources biologiques - Cartographie'),
        'description' => t('Cartographie des ressources biologiques'),
        'page callback' => 'bs_rsb_block_view',
//        'page callback' => 'bs_rsb_init',
//        'page arguments' => array('bs_forms_admin_form'),
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );

    $items['utilisateur/ress_bio/organisme'] = array(
        'title' => t('Ressources biologiques - Mon organisme'),
        'description' => t('Page profil permettant de gérer un organisme spécialisé dans les ressources biologiques.'),
        'page callback' => 'bs_rsb_block_view',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_NORMAL_ITEM,
    );

    $items['ressources-biologiques/home/organisme/*'] = array(
        'title' => t('Ressources biologiques - Organisme'),
        'description' => t('Page affichant l\'organisme proposant la fiche.'),
        'page callback' => 'bs_rsb_block_view',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );

    $items['utilisateur/ress_bio/collections'] = array(
        'title' => t('Ressources biologiques - Collections Manager'),
        'description' => t('Manager des collections des ressources biologiques'),
        'page callback' => 'bs_rsb_block_view',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_NORMAL_ITEM,
    );

//    $items['utilisateur/ress_bio/favoris'] = array(
//        'title' => t('Ressources biologiques - Favoris manager'),
//        'description' => t('Manager des annonces favorites des ressources biologiques'),
//        'page callback' => 'bs_rsb_block_view',
//        'access callback' => 'user_is_logged_in',
//        'type' => MENU_NORMAL_ITEM,
//    );

    $items['ressources-biologiques/home/criteres'] = array(
        'title' => 'Ressources Biologiques - Critères',
        'page callback' => 'bs_rsb_criteres_request',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK
    );

    $items['ressources-biologiques/home/criteres/filters'] = array(
        'title' => 'Ressources Biologiques - Filtres',
        'page callback' => 'bs_rsb_filters_request',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK
    );

    $items['ressources-biologiques/home/criteres/special-filters'] = array(
        'title' => 'Ressources Biologiques - Critères spéciaux',
        'page callback' => 'bs_rsb_special_filters_request',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK
    );

    $items['ressources-biologiques/home/pins'] = array(
        'title' => 'Ressources Biologiques - Update pins on the map',
        'page callback' => 'bs_rsb_pins_request',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK
    );

    return $items;
}

/**
 * Page callback
 * Return json output for ajax request
 */
function bs_rsb_pins_request(){

    $tabDeptName = array(
        "01" => "Ain",
        "02" => "Aisne",
        "03" => "Allier",
        "04" => "Alpes-de-Haute-Provence",
        "05" => "Hautes-Alpes",
        "06" => "Alpes-Maritimes",
        "07" => "Ardèche",
        "08" => "Ardennes",
        "09" => "Ariège",
        "10" => "Aube",
        "11" => "Aude",
        "12" => "Aveyron",
        "13" => "Bouches-du-Rhône",
        "14" => "Calvados",
        "15" => "Cantal",
        "16" => "Charentes",
        "17" => "Charente-Maritime",
        "18" => "Cher",
        "19" => "Corrèze",
        "2A" => "Corse-du-Sud",
        "2B" => "Haute-Corse",
        "21" => "Côte-d'Or",
        "22" => "Côtes-d'Armor",
        "23" => "Creuse",
        "24" => "Dordogne",
        "25" => "Doubs",
        "26" => "Drôme",
        "27" => "Eure",
        "28" => "Eure-et-Loir",
        "29" => "Finistère",
        "30" => "Gard",
        "31" => "Haute-Garonne",
        "32" => "Gers",
        "33" => "Gironde",
        "34" => "Hérault",
        "35" => "Ille-et-Vilaine",
        "36" => "Indre",
        "37" => "Indre-et-Loire",
        "38" => "Isère",
        "39" => "Jura",
        "40" => "Landes",
        "41" => "Loir-et-Cher",
        "42" => "Loire",
        "43" => "Haute-Loire",
        "44" => "Loire-Atlantique",
        "45" => "Loiret",
        "46" => "Lot",
        "47" => "Lot-et-Garonne",
        "48" => "Lozère",
        "49" => "Maine-et-Loire",
        "50" => "Manche",
        "51" => "Marne",
        "52" => "Haute-Marne",
        "53" => "Mayenne",
        "54" => "Meurthe-et-Moselle",
        "55" => "Meuse",
        "56" => "Morbihan",
        "57" => "Moselle",
        "58" => "Nièvre",
        "59" => "Nord",
        "60" => "Oise",
        "61" => "Orne",
        "62" => "Pas-de-Calais",
        "63" => "Puy-de-Dôme",
        "64" => "Pyrénées-Atlantiques",
        "65" => "Hautes-Pyrénées",
        "66" => "Pyrénées-Orientales",
        "67" => "Bas-Rhin",
        "68" => "Haut-Rhin",
        "69" => "Rhône",
        "70" => "Haute-Saône",
        "71" => "Saône-et-Loire",
        "72" => "Sarthe",
        "73" => "Savoie",
        "74" => "Haute-Savoie",
        "75" => "Paris",
        "76" => "Seine-Maritime",
        "77" => "Seine-et-Marne",
        "78" => "Yvelines",
        "79" => "Deux-Sèvres",
        "80" => "Somme",
        "81" => "Tarn",
        "82" => "Tarn-et-Garonne",
        "83" => "Var",
        "84" => "Vaucluse",
        "85" => "Vendée",
        "86" => "Vienne",
        "87" => "Haute-Vienne",
        "88" => "Vosges",
        "89" => "Yonne",
        "90" => "Territoire de Belfort",
        "91" => "Essonne",
        "92" => "Hauts-de-Seine",
        "93" => "Seine-Saint-Denis",
        "94" => "Val-de-Marne",
        "95" => "Val-d'Oise",
    );

    $arrayPostalCode = [];
    $arrayResultsPostalCode = [];

    for($i = 0 ; $i < sizeof($_GET['node_ID']) ; $i++){

        $query = db_select('node', 'n');
        $query->join('establishment_sheet', 'es', 'n.uid=es.eid');
        $query->fields('es', array('postal_code'));
        $query->condition('n.nid', $_GET['node_ID'][$i], '=');
        $resultPostalCode = $query->execute()->fetchField(0);

        // Push results into array and increment its value at each iteration
        $arrayPostalCode[$resultPostalCode] += 1;
    }

    // Browse into array
    foreach ($arrayPostalCode as $key => $value) {

        // Push entity_id into an other array containing final result
        array_push($arrayResultsPostalCode, $key);
    }

    /* ------------------------------------------------------------------------------------------------------ */
    /* ------------------------- Datas for displaying when pins or land are hovered ------------------------- */
    /* ------------------------------------------------------------------------------------------------------ */

    // Array to stock datas
    $arrayDatas = [];
    // Array to stock postal code
    $arrayPostalCode = [];
    // Array to stock individus
    $arrayIndividus = [];
    // Array to stock sample
    $arraySample = [];
    // Array to stock EID
    $arrayEID = [];
    // Array to stock map datas
    $arrayMapDatas = [];

    for($i = 0 ; $i < sizeof($_GET['node_ID']) ; $i++){

        $queryDatas = db_select('node', 'n');
        $queryDatas->join('establishment_sheet', 'es', 'n.uid=es.eid');
        $queryDatas->join('field_data_field_nb_exact_echantillons', 'ee', 'n.nid=ee.entity_id');
        $queryDatas->join('field_data_field_nb_exact_individus', 'ei', 'n.nid=ei.entity_id');
        $queryDatas->fields('es', array('postal_code', 'eid'));
        $queryDatas->fields('ee', array('field_nb_exact_echantillons_value'));
        $queryDatas->fields('ei', array('field_nb_exact_individus_value'));
        $queryDatas->condition('n.nid', $_GET['node_ID'][$i], '=');
        $resultsDatas = $queryDatas->execute();

        foreach ($resultsDatas as $resultDatas){

            // Increment eid value
            $arrayEID[$resultDatas->eid] += 1;

            // Split postal code to retrieve the two first characters
            $postal_code = substr($resultDatas->postal_code, 0, 2);

            // If eid is already set, it means that postal code of organism is already set too
            if( $arrayEID[$resultDatas->eid] <= 1 ){

                // Increment postal code value
                $arrayPostalCode[$postal_code] += 1;

                // Set total biobank number
                $arrayMapDatas["nbBiobank"] += 1;
            }

            // Sum the exact number of individus depending on the postal code
            $arrayIndividus[$postal_code] = $arrayIndividus[$postal_code] + $resultDatas->field_nb_exact_individus_value;

            // Sum the exact number of echantillons depending on the postal code
            $arraySample[$postal_code] = $arraySample[$postal_code] + $resultDatas->field_nb_exact_echantillons_value;

            /* ------------------------------------------------- */
            /* ------------------- Map datas ------------------- */
            /* ------------------------------------------------- */

            // Set total sample number
            $arrayMapDatas["nbCollections"] += 1;
            // Set total individus number
            $arrayMapDatas["nbIndividus"] = $arrayMapDatas["nbIndividus"] + $resultDatas->field_nb_exact_individus_value;
            // Set total sample number
            $arrayMapDatas["nbSample"] = $arrayMapDatas["nbSample"] + $resultDatas->field_nb_exact_echantillons_value;

        }
    }

    // Browse throughout array containing postal code
    foreach ($arrayPostalCode as $key => $value) {

        // Insert into array Datas the number of biobanks
        $arrayDatas[$key]["nbBiobanks"] = $value;
    }

    // Browse throughout array containing EID
    foreach ($arrayEID as $key => $value) {

        // Query to retrieve the postal code of the organism EID set in the array
        $query = db_select('establishment_sheet', 'es');
        $query->fields('es', array('eid', 'postal_code'));
        $query->condition('es.eid', $key, '=');
        $resultsComparing = $query->execute();

        foreach ($resultsComparing as $resultComparing){

            // Split postal code to retrieve the two first characters
            $postalCodeToCompare = substr($resultComparing->postal_code, 0, 2);

            // As I've the postal code, I can set the number of collections depending on the postal code
            $arrayDatas[$postalCodeToCompare]["nbCollections"] = $value;
        }
    }

    // Browse throughout array containing samples number
    foreach ($arrayIndividus as $key => $value) {

        // Insert into array Datas the number of biobanks
        $arrayDatas[$key]["nbIndividus"] = $value;
    }

    // Browse throughout array containing samples number
    foreach ($arraySample as $key => $value) {

        // Insert into array Datas the number of biobanks
        $arrayDatas[$key]["nbSamples"] = $value;
    }

    // Set total departments number
    $arrayMapDatas["nbDepartments"] = count($arrayDatas);

//    drupal_set_message("<pre>" . print_r($arrayDatas, true) . "</pre>");
//    drupal_set_message("<pre>" . print_r($arrayMapDatas, true) . "</pre>");

    /* ------------------------------------------------ */
    /* ----------- Construct HTML structure ----------- */
    /* ------------------------------------------------ */

    // Init the structure
    $structure = '<div id="rsb-map-marker-datas">';

    // Browse into array Datas as key value
    foreach ($arrayDatas as $key => $value) {

        $conjugBiobank = (($arrayDatas[$key]["nbBiobanks"] == 1)) ? "Biobanque :" : "Biobanques :";
        $conjugCollection = (($arrayDatas[$key]["nbCollections"] == 1)) ? "Collection :" : "Collections :";
        $conjugSample = (($arrayDatas[$key]["nbSamples"] == 1)) ? "Echantillon :" : "Echantillons :";
        $conjugIndividu = (($arrayDatas[$key]["nbIndividus"] == 1)) ? "Individu :" : "Individus :";

        $structure = $structure .
            '<div id="dpt-' . $key . '" class="rsb-datas">' .
                '<p class="rsb-datas-location">' .
                    $key .
                    ' - ' .
                    $tabDeptName[$key] .
                '</p>' .
                '<p class="rsb-datas-name">' .
                    $conjugBiobank .
                '</p>' .
                '<p class="rsb-datas-value">' .
                    $arrayDatas[$key]["nbBiobanks"] .
                '</p>' .
                '<p class="rsb-datas-name">' .
                    $conjugCollection .
                '</p>' .
                '<p class="rsb-datas-value">' .
                    $arrayDatas[$key]["nbCollections"] .
                '</p>' .
                '<p class="rsb-datas-name">' .
                    $conjugIndividu .
                '</p>' .
                '<p class="rsb-datas-value">' .
                    $arrayDatas[$key]["nbIndividus"] .
                '</p>' .
                '<p class="rsb-datas-name">' .
                    $conjugSample .
                '</p>' .
                '<p class="rsb-datas-value">' .
                    $arrayDatas[$key]["nbSamples"] .
                '</p>' .
            '</div>';

    }

    $structure = $structure . '</div>';

    $result['arrayResultsPostalCode'] = $arrayResultsPostalCode;
    $result['structure'] = $structure;
    $result['arrayMapDatas'] = $arrayMapDatas;

    drupal_json_output($result);
}

/**
 * Page callback
 * Return json output for ajax request
 */
function bs_rsb_special_filters_request(){

    $arrayResults = [];
    $arrayFinalResults = [];
    $counter = 0;

    for($i = 0 ; $i < $_GET["arraySpecialFiltersLength"] ; $i++){

        // Increment counter
        $counter++;

        $query = db_select('field_data_field_' . $_GET["arraySpecialFilters"][$i][0], 'fdf');
        $query->fields('fdf', array('entity_id'));
        $query->condition('field_' . $_GET["arraySpecialFilters"][$i][0] . '_value', $_GET["arraySpecialFilters"][$i][1], '=');
        $resultsEntityID = $query->execute();
        $resultsRowCount = $query->execute()->rowCount();

        foreach ($resultsEntityID as $resultEntityID){

            // Push results into array and increment its value at each iteration
            $arrayResults[$resultEntityID->entity_id] += 1;
        }

    }

    // Browse into array
    foreach ($arrayResults as $key => $value) {

        // Check if the value equals counter
        if($counter == $value){

            // Push entity_id into an other array containing final result
            array_push($arrayFinalResults, $key);
        }
    }

//    drupal_set_message("<pre>" . print_r($arrayFinalResults, true) . "</pre>");

    // Return results throw ajax
    $result['arrayFinalResults'] = $arrayFinalResults;
    $result['arrayFinalResultsSize'] = sizeof($arrayFinalResults);

    drupal_json_output($result);
}

/**
 * Page callback
 * Return json output for ajax request
 */
function bs_rsb_filters_request() {

    // Array containing all of results
    $arrayAllCriteres = [];
    // Array intended to contain results
    $arrayCriteres = [];

    // Retrieve every table containing "field_data_field_critere..." as table name
    $queryTables = db_select('INFORMATION_SCHEMA.TABLES', 'db');
    $queryTables->fields('db', array('TABLE_NAME'));
    $queryTables->condition('TABLE_NAME', 'field_data_field_critere' . '%', 'LIKE');
    $resultsTables = $queryTables->execute();

    foreach ($resultsTables as $resultTable){

        // Retrieve every columns of table containing "field_critere..." as column name
        $queryColumns = db_select('INFORMATION_SCHEMA.COLUMNS', 'col');
        $queryColumns->fields('col', array('COLUMN_NAME'));
        $queryColumns->condition('TABLE_SCHEMA', 'biosample'. '%','LIKE');
        $queryColumns->condition('TABLE_NAME', $resultTable->TABLE_NAME,'=');
        $queryColumns->condition('COLUMN_NAME', 'field_critere'. '%','LIKE');
        $resultsColumns = $queryColumns->execute();


        foreach ($resultsColumns as $resultColumn){

            // Push results into array
            array_push($arrayCriteres, $resultTable->TABLE_NAME, "ct", $resultColumn->COLUMN_NAME);
        }

        // Retrieve the vid
        $toGetVID = explode("field_data_field_critere_", $resultTable->TABLE_NAME)[1];

        $queryVID = db_select('taxonomy_vocabulary', 'tv');
        $queryVID->fields('tv', array('vid'));
        $queryVID->condition('machine_name', 'rb_'.$toGetVID.'%', 'LIKE');
        $resultsVID = $queryVID->execute();

        foreach ($resultsVID as $resultVID){

            // Push VID result into array
            array_push($arrayCriteres, $resultVID->vid);
        }

        // Push array containing results into an other array containing all the results
        array_push($arrayAllCriteres, $arrayCriteres);

        // Empty the array
        $arrayCriteres = [];

    }

    /*
     * Pour chaque catégorie de critère rempli par l'utilisateur dans les collections,
     * je vais voir le TID (Identifiant du critère) associés à la collection en fonction
     * de la catégorie de critère.
     * Après je récupère le nom du critère relatif au TID.
     * Toujours pour une catégorie de critère donnée, je compare les critères "d'exigence"
     * que l'utilisateur a sélectionnés en session aux noms des critères d'une collection.
     * Si le critère d'exigence de l'utilisateur correspond à un critère d'une collection
     * alors je sauvegarde l'identifiant de la collection.
     * Je compare le nombre de redondance de la collection. Cette redondance doit être égale
     * au nombre de requête ajax. Si c'est le cas alors la collection vérifie ces critères.
     * C'est le même principe pour l'autre choix sauf que l'on ajoute les critères d'exigences
     * et de préférences.
     */

    /* ----------------------------------------------------------------------------------------*/
    /* ---------------------------- Request - Requirement filters -----------------------------*/
    /* ----------------------------------------------------------------------------------------*/

    $arrayResultsRequirement = array();

    $nbAjaxRequirement = 0;

    $resultsRequirement = [];

    for($i = 0 ; $i < sizeof($arrayAllCriteres) ; $i++){

        /* Retrieve tid of collections */
        $query = db_select('taxonomy_term_data', 'ttd');
        $query->join($arrayAllCriteres[$i][0], $arrayAllCriteres[$i][1],'ttd.tid='.$arrayAllCriteres[$i][1].'.'.$arrayAllCriteres[$i][2]);
        $query->fields($arrayAllCriteres[$i][1], array('entity_id'));

        /* OR condition - Filters */
        // Get every filters contained in a filter category
        $queryGetFilters = db_select('taxonomy_term_data', 'ttd');
        $queryGetFilters->fields('ttd', array('name'));
        $queryGetFilters->condition('ttd.vid', $arrayAllCriteres[$i][3], '=');
        $resultsGetFilters = $queryGetFilters->execute();

        /*
         * Browse into filters selected by user, and compare them to filters contained in
         * category filters. It allows to sort filters of a category.
        */
        $arrayRightFilters = [];

        foreach ($resultsGetFilters as $resultGetFilter){

            for($j = 0 ; $j < $_GET['requirement_filter_size'] ; $j++) {

                if ($resultGetFilter->name == $_GET['requirement_filter_names'][$j]){

                    array_push($arrayRightFilters, $_GET['requirement_filter_names'][$j]);
                }
            }
        }

        $orFilters = null;

        $orVID = null;

        if(!empty($arrayRightFilters)){

            // Initialize OR condition
            $orFilters = "(";

            // Loop into the array transmit by AJAX
            for($j = 0 ; $j < sizeof($arrayRightFilters) ; $j++){

                // Set OR condition
                $orFilters = $orFilters . "name='" . $arrayRightFilters[$j] . "' OR ";
            }
            $orFilters = substr($orFilters, 0, -3);

            // Add parenthesis
            if(strlen($orFilters) != 0){

                $orFilters = $orFilters . ")";
            }

            $orVID = "(vid=" . $arrayAllCriteres[$i][3] . ")";

        }

        // Set WHERE condition
        if(strlen($orFilters) != 0){

            $query->where($orFilters . " AND " . $orVID);

            $query->groupBy($arrayAllCriteres[$i][1].'.entity_id');

            $query->having('COUNT(entity_id) = :matches', array(':matches' => sizeof($arrayRightFilters)));

            $resultsRequiredFilters = $query->execute();

            foreach ($resultsRequiredFilters as $resultRequiredFilters){

                $arrayResultsRequirement[$resultRequiredFilters->entity_id] = $arrayResultsRequirement[$resultRequiredFilters->entity_id] + 1;
            }

            $nbAjaxRequirement++;
        }

    }

    foreach ($arrayResultsRequirement as $key => $value) {

        if($nbAjaxRequirement == $value){
            array_push($resultsRequirement, $key);
        }
    }

    $result['resultsFiltersRequirement'] = $resultsRequirement;
    $result['rowCountFiltersRequirement'] = sizeof($resultsRequirement);

    /* ----------------------------------------------------------------------------------------*/
    /* ---------------------- Request - Requirement & preference filters ----------------------*/
    /* ----------------------------------------------------------------------------------------*/

    $arrayResultsOthers = array();

    $nbAjaxOthers = 0;

    $resultsOthers = [];

    for($i = 0 ; $i < sizeof($arrayAllCriteres) ; $i++){

        /* Retrieve tid of collections */
        $query = db_select('taxonomy_term_data', 'ttd');
        $query->join($arrayAllCriteres[$i][0], $arrayAllCriteres[$i][1],'ttd.tid='.$arrayAllCriteres[$i][1].'.'.$arrayAllCriteres[$i][2]);
        $query->fields($arrayAllCriteres[$i][1], array('entity_id'));

        /* OR condition - Filters */
        // Get every filters contained in a filter category
        $queryGetFilters = db_select('taxonomy_term_data', 'ttd');
        $queryGetFilters->fields('ttd', array('name'));
        $queryGetFilters->condition('ttd.vid', $arrayAllCriteres[$i][3], '=');
        $resultsGetFilters = $queryGetFilters->execute();

        /*
         * Browse into filters selected by user, and compare them to filters contained in
         * category filters. It allows to sort filters of a category.
        */
        $arrayRightFilters = [];

        foreach ($resultsGetFilters as $resultGetFilter){

            for($j = 0 ; $j < $_GET['filter_size'] ; $j++) {

                if ($resultGetFilter->name == $_GET['filter_names'][$j]){

                    array_push($arrayRightFilters, $_GET['filter_names'][$j]);
                }
            }
        }

        $orFilters = null;

        $orVID = null;

        if(!empty($arrayRightFilters)){

            // Initialize OR condition
            $orFilters = "(";

            // Loop into the array transmit by AJAX
            for($j = 0 ; $j < sizeof($arrayRightFilters) ; $j++){

                // Set OR condition
                $orFilters = $orFilters . "name='" . $arrayRightFilters[$j] . "' OR ";
            }
            $orFilters = substr($orFilters, 0, -3);

            // Add parenthesis
            if(strlen($orFilters) != 0){

                $orFilters = $orFilters . ")";
            }

            $orVID = "(vid=" . $arrayAllCriteres[$i][3] . ")";

        }

        // Set WHERE condition
        if(strlen($orFilters) != 0){

            $query->where($orFilters . " AND " . $orVID);

            $query->groupBy($arrayAllCriteres[$i][1].'.entity_id');

            $query->having('COUNT(entity_id) = :matches', array(':matches' => sizeof($arrayRightFilters)));

            $resultsRequiredFilters = $query->execute();

            foreach ($resultsRequiredFilters as $resultRequiredFilters){

                $arrayResultsOthers[$resultRequiredFilters->entity_id] = $arrayResultsOthers[$resultRequiredFilters->entity_id] + 1;
            }

            $nbAjaxOthers++;
        }

    }

    foreach ($arrayResultsOthers as $key => $value) {

        if($nbAjaxOthers == $value){
            array_push($resultsOthers, $key);
        }
    }

    $result['resultsFilters'] = $resultsOthers;
    $result['rowCountFilters'] = sizeof($resultsOthers);

    drupal_json_output($result);

}


/**
 * Page callback
 * Return json output for ajax request
 */
function bs_rsb_criteres_request() {

    // Retrieve filters of a filter categories
    $query = db_select('taxonomy_term_data', 'ttd');
    $query->fields('ttd',array('name'));
    $query->condition('ttd.vid', $_GET['vid'],'=');
    $query->orderBy('ttd.weight','ASC');

    $resultsCriteres = $query->execute();

    $criteres = null;

    foreach ($resultsCriteres as $resultCriteres){

        $criteres =
            $criteres .
            '<div class="overlay-filter-container">' .
                '<p>' .
                    $resultCriteres->name .
                '</p>' .
                '<form class="ofc-form-choice">' .
                  '<input type="radio" name="filter_importance" value="requirement">' .
                  '<input type="radio" name="filter_importance" value="preference">' .
                  '<input type="radio" name="filter_importance" value="indifferent" checked="checked">' .
                '</form>' .
            '</div>';
    }

    $result['resultsCriteres'] = $criteres;

    drupal_json_output($result);

}


/**
 * Implement hook_init()
 */
function bs_rsb_init(){
    if (
        preg_match("/^\/node\/[0-9]{0,5}\/edit$/", $_SERVER["REQUEST_URI"]) ||
        preg_match("/^\/ressources-biologiques\/home\/.*$/", $_SERVER["REQUEST_URI"]) ||
        preg_match("/^\/node\/add\/rb-collections$/", $_SERVER["REQUEST_URI"]) ||
        preg_match("/^\/node\/[0-9]{0,5}\/delete$/", $_SERVER["REQUEST_URI"])
    ){
        drupal_add_css(drupal_get_path('module', 'bs_rsb') . '/css/bs-rsb-annonces-manager.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
        drupal_add_js(drupal_get_path('module', 'bs_rsb') . '/js/bs-rsb-annonces-manager.js', array('group' => JS_DEFAULT, 'every_page' => TRUE));
    }

    /* Load js file to hide page title */
    if (
        preg_match("/^\/utilisateur\/ress_bio\/organisme$/", $_SERVER["REQUEST_URI"]) ||
        preg_match("/^\/utilisateur\/ress_bio\/favoris$/", $_SERVER["REQUEST_URI"]) ||
        preg_match("/^\/node\/add\/rb-collections$/", $_SERVER["REQUEST_URI"])
    ){
        drupal_add_js(drupal_get_path('module', 'bs_rsb') . '/js/bs-rsb-annonces-manager.js', array('group' => JS_DEFAULT, 'every_page' => TRUE));
    }
}

/**
 * Implement hook_theme()
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function bs_rsb_theme($existing, $type, $theme, $path) {
    return array(
        'tpl_rsb_map' => array(
            'template' => 'template/bs-rsb-dynamic-map',
            'path' => drupal_get_path('module', 'bs_rsb'),
            'variables' => array('infos' => NULL),
        ),
        'tpl_rsb_collections' => array(
            'template' => 'template/bs-rsb-collections',
            'path' => drupal_get_path('module', 'bs_rsb'),
            'variables' => array('infos' => NULL),
        ),
        'tpl_rsb_filtres' => array(
            'template' => 'template/bs-rsb-filtres',
            'path' => drupal_get_path('module', 'bs_rsb'),
            'variables' => array('infos' => NULL),
        ),
        'tpl_rsb_annonces_manager' => array(
            'template' => 'template/bs-rsb-annonces-manager',
            'path' => drupal_get_path('module', 'bs_rsb'),
            'variables' => array('infos' => NULL),
        ),
        'tpl_establishment_sheet' => array(
            'template' => 'template/bs-rsb-establishment-sheet',
            'path' => drupal_get_path('module', 'bs_rsb'),
            'variables' => array('infos' => NULL),
        ),
        'tpl_rsb_establishments' => array(
            'template' => 'template/bs-rsb-establishments',
            'path' => drupal_get_path('module', 'bs_rsb'),
            'variables' => array('infos' => NULL),
        ),
        'tpl_rsb_collections_contact' => array(
            'template' => 'template/bs-rsb-collections-contact',
            'path' => drupal_get_path('module', 'bs_rsb'),
            'variables' => array('infos' => NULL),
        ),
    );
}

/**
 * Implement hook_block_info()
 *
 * @return array
 */
function bs_rsb_block_info() {
    $blocks = array();

    $blocks['ressources_bio_map'] = array(
        'info' => t('Ressources biologiques - Map'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => "ressources-biologiques/home",
        'weight' => 1,
    );

    $blocks['ressources_bio_collections'] = array(
        'info' => t('Ressources biologiques - Collections'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => "ressources-biologiques/home",
        'weight' => 2,
    );

    $blocks['ressources_bio_filtres'] = array(
        'info' => t('Ressources biologiques - Filtres'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => "ressources-biologiques/home",
        'weight' => 3,
    );

    $blocks['ressources_bio_annonces_manager'] = array(
        'info' => t('Ressources biologiques - Collections Manager'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => "utilisateur/ress_bio/collections",
        'weight' => 1,
    );

    $blocks['rb_establishment_sheet'] = array(
        'info' => t('Ressources biologiques - Fiche d\'organisme'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => "utilisateur/ress_bio/organisme",
        'weight' => 1,
    );

    $blocks['rb_establishments'] = array(
        'info' => t('Ressources biologiques - Organismes'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => "ressources-biologiques/home/organisme/*",
        'weight' => 1,
    );

    $blocks['rb_collections_contact'] = array(
        'info' => t('Ressources biologiques - Collections contact'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => "ressources-biologiques/home/*",
        'weight' => 1,
    );

    return $blocks;
}

/**
 * Implement hook_block_view()
 *
 * @see hook_block_info()
 */
function bs_rsb_block_view($delta = '') {
    $block = array();

    switch ($delta) {
        case 'ressources_bio_map':

            /* ---------------------------------------------------------------------------*/
            /* ---------------- Retrieve the total number of Biobanks --------------------*/
            /* ---------------------------------------------------------------------------*/
            $query = db_select('establishment_sheet', 'es');
            $query->fields('es', array('eid'));
            $data['totalBiobanks'] = $query->execute()->rowCount();

            /* ---------------------------------------------------------------------------*/
            /* --------------- Retrieve the total number of collections ------------------*/
            /* ---------------------------------------------------------------------------*/
            $query = db_select('node', 'n');
            $query->fields('n',array('nid'));
            $query->condition("type", "rb_collections", "=");
            $data['totalCollections'] = $query->execute()->rowCount();

            /* ---------------------------------------------------------------------------*/
            /* -------------- Retrieve the total number of individus ------------------*/
            /* ---------------------------------------------------------------------------*/
            $query = db_select('field_revision_field_nombre_individus', 'fni');
            $query->fields('fni',array('field_nombre_individus_value'));
            $query->condition("bundle", "rb_collections", "=");
            $resultsTotalIndividu = $query->execute();

            // Initialize de total number of individus
            $totalIndividus = null;

            foreach ($resultsTotalIndividu as $resultTotalIndividu) {
                // Foreach result, sum them
                $totalIndividus = $totalIndividus + $resultTotalIndividu->field_nombre_individus_value;
            }

            $data['totalIndividus'] = $totalIndividus;

            /* ---------------------------------------------------------------------------*/
            /* -------------- Retrieve the total number of echantillons ------------------*/
            /* ---------------------------------------------------------------------------*/
            $query = db_select('field_revision_field_nombre_echantillons', 'fne');
            $query->fields('fne',array('field_nombre_echantillons_value'));
            $query->condition("bundle", "rb_collections", "=");
            $resultsTotalEchantillon = $query->execute();

            // Initialize de total number of echantillons
            $totalEchantillons = null;

            foreach ($resultsTotalEchantillon as $resultTotalEchantillon) {
                // Foreach result, sum them
                $totalEchantillons = $totalEchantillons + $resultTotalEchantillon->field_nombre_echantillons_value;
            }

            $data['totalEchantillons'] = $totalEchantillons;

            /* ---------------------------------------------------------------------------*/
            /* ---------------------- Retrieve department number -------------------------*/
            /* ---------------------------------------------------------------------------*/
            $query = db_select("establishment_sheet", "es");
            $query->fields('es', array('postal_code'));
            $resultsPostalCode = $query->execute();

            /* An array containing department numbers */
            $tabDepartmentsDatas = array();

            foreach ($resultsPostalCode as $resultPostalCode) {

                // If there isn't datas in the array
                if(count($tabDepartmentsDatas) == 0){

                    // Split the postal code in order to retrieve the first two numbers
                    $resultPostalCode->postal_code = str_split($resultPostalCode->postal_code, 2)[0];

                    // Push the new department number in the array
                    $tabDepartmentsDatas[$resultPostalCode->postal_code] = array($resultPostalCode->postal_code);

                    // If there is already datas in the array
                }else if(count($tabDepartmentsDatas) > 0){

                    // Split the postal code in order to retrieve the first two numbers
                    $resultPostalCode->postal_code = str_split($resultPostalCode->postal_code, 2)[0];

                    for($i = 0 ; $i < count($tabDepartmentsDatas) ; $i++){

                        // Compare the first two numbers to the department numbers already stocked in the array
                        // If there are different, push the new department number in the array
                        if($resultPostalCode->postal_code != $tabDepartmentsDatas[$i]){

                            $tabDepartmentsDatas[$resultPostalCode->postal_code] = array($resultPostalCode->postal_code);
                        }
                    }
                }

            }

            /* ---------------------------------------------------------------------------*/
            /* ---------------------- Retrieve department datas --------------------------*/
            /* ---------------------------------------------------------------------------*/

            // Retrieve index names (that's to say postal_code)
            $keys = array_keys($tabDepartmentsDatas);

            for($c = 0 ; $c < count($tabDepartmentsDatas) ; $c++){

                // Query to retrieve the number of biobank in the corresponding department
                $query = db_select("establishment_sheet", "es");
                $query->fields('es',array('eid', 'name'));
                $query->condition("es.postal_code", db_like($tabDepartmentsDatas[$keys[$c]][0]) . '%',"LIKE");
                $resultNbBiobank = $query->execute()->rowCount();

                // Add the collection numbers to the corresponding department
                $tabDepartmentsDatas[$keys[$c]][] = $resultNbBiobank;

                // Initialize the number of samples
                $nbEchantillons = null;
                $nbEchantillonsPrefix = null;

                // Query to retrieve every samples number of a collection depending on the postal code
                $query = db_select("establishment_sheet", "es");
                $query->join("node","n","es.eid = n.uid");
                $query->join("field_revision_field_nombre_echantillons", "fne", "n.nid = fne.entity_id");
                $query->fields('fne',array('field_nombre_echantillons_value'));
                $query->condition("es.postal_code", db_like($tabDepartmentsDatas[$keys[$c]][0]) . '%',"LIKE");
                $resultsNbEchantillon = $query->execute();
                $resultNbCollection = $query->execute()->rowCount();

                // Foreach results
                foreach ($resultsNbEchantillon as $resultNbEchantillon) {

                    // Add echantillons number
                    // Add prefix echantillons number. If it's greater than, prefix still gt (>)
                    // But if it is lower than, keep lt (<)
                    switch($resultNbEchantillon->field_nombre_echantillons_value){
                        case 0 :
                            $nbEchantillons = $nbEchantillons + 1000;

                            if($nbEchantillonsPrefix != ">"){
                                $nbEchantillonsPrefix = "<";
                            }
                            break;
                        case 1 :
                            $nbEchantillons = $nbEchantillons + 10000;

                            if($nbEchantillonsPrefix != ">"){
                                $nbEchantillonsPrefix = "<";
                            }
                            break;
                        case 2 :
                            $nbEchantillons = $nbEchantillons + 100000;

                            if($nbEchantillonsPrefix != ">"){
                                $nbEchantillonsPrefix = "<";
                            }
                            break;
                        case 3 :
                            $nbEchantillons = $nbEchantillons + 100000;

                            $nbEchantillonsPrefix = ">";
                            break;
                    }
                    // Sum the number of samples find for each departments
//                    $nbEchantillons = $nbEchantillons + $resultNbEchantillon->field_nombre_echantillons_value;
                }

                // Formatting echantillons number and set space between each 3 characters
                $nbEchantillons = number_format($nbEchantillons, null, null, ' ');
                // Add prefix and echantillons number
                $nbEchantillonsTotal = $nbEchantillonsPrefix . " " . $nbEchantillons;

                // Add the collection numbers to the corresponding department
                $tabDepartmentsDatas[$keys[$c]][] = $resultNbCollection;

                // Add the sample numbers to the corresponding department
                $tabDepartmentsDatas[$keys[$c]][] = $nbEchantillonsTotal;
            }

            // Pass to data the array containing department datas
            $data['tabDepartmentsDatas'] = $tabDepartmentsDatas;
            // Pass to data the array containing index value of this array
            $data['keys'] = $keys;

            // Link the template for the rsb map
            $block['content']['#markup'] = theme('tpl_rsb_map', $data);

            // Link a css file for the rsb map
            $block['content']['#attached']['css'][] = array(
                'data' => drupal_get_path('module', 'bs_rsb') . '/css/bs-rsb-map.css',
                'type' => 'file'
            );

            // Link a js file for the rsb map
            $block['content']['#attached']['js'][] = array(
                'data' => drupal_get_path('module', 'bs_rsb') . '/js/bs-rsb-map.js',
                'type' => 'file'
            );

            break;

        case 'ressources_bio_collections':

            // Link the template for the rsb collections
            $block['content']['#markup'] = theme('tpl_rsb_collections');

            // Link a css file for the rsb collections
            $block['content']['#attached']['css'][] = array(
                'data' => drupal_get_path('module', 'bs_rsb') . '/css/bs-rsb-collections.css',
                'type' => 'file'
            );

            // Link a js file for the rsb collections
            $block['content']['#attached']['js'][] = array(
                'data' => drupal_get_path('module', 'bs_rsb') . '/js/bs-rsb-collections.js',
                'type' => 'file'
            );

            break;

        case 'ressources_bio_filtres':

//            // Retrieve the vid of the vocabulary for the machine_name "ressources_biologiques"
//            // ! Be careful, the machine_name must absolutely be 'ressources_biologiques'
//            $query = db_select('taxonomy_vocabulary', 'tv');
//            $query->fields('tv',array('vid'));
//            $query->condition('tv.machine_name', 'ressources_biologiques','=');
//            $resultVID = $query->execute()->fetchField(0);
//
//            // Retrieve filter categories
//            $query = db_select('taxonomy_term_data', 'ttd');
//            $query->join('taxonomy_term_hierarchy', 'tth', 'ttd.tid = tth.tid');
//            $query->fields('ttd',array('name', 'tid'));
//            $query->condition('ttd.vid', $resultVID,'=');
//            $query->condition('tth.parent', "0",'=');
//            $query->orderBy('ttd.weight','ASC');
//            $data['resultsFC'] = $query->execute();
//
////            foreach ($resultsFC as $resultFC) {
////                drupal_set_message($resultFC->name);
////            }
//
//            // Link the template for the rsb filtres
//            $block['content']['#markup'] = theme('tpl_rsb_filtres', $data);
//
//            // Link a css file for the rsb filtres
//            $block['content']['#attached']['css'][] = array(
//                'data' => drupal_get_path('module', 'bs_rsb') . '/css/bs-rsb-filtres.css',
//                'type' => 'file'
//            );
//
//            // Link a js file for the rsb filtres
//            $block['content']['#attached']['js'][] = array(
//                'data' => drupal_get_path('module', 'bs_rsb') . '/js/bs-rsb-filtres.js',
//                'type' => 'file'
//            );

            $query = db_select('taxonomy_vocabulary','tv');
            $query->fields('tv', array('name', 'vid'));
            $query->condition('name','RB - ' . '%', 'LIKE');
            $query->orderBy('weight','ASC');
            $data['resultsFC'] = $query->execute();

            $block['content']['#markup'] = theme('tpl_rsb_filtres', $data);

            // Link a css file for the rsb filtres
            $block['content']['#attached']['css'][] = array(
                'data' => drupal_get_path('module', 'bs_rsb') . '/css/bs-rsb-filtres.css',
                'type' => 'file'
            );

            // Link a js file for the rsb filtres
            $block['content']['#attached']['js'][] = array(
                'data' => drupal_get_path('module', 'bs_rsb') . '/js/bs-rsb-filters.js',
                'type' => 'file'
            );


            break;

        case 'ressources_bio_annonces_manager':

            // Check if user has created an establishment sheet
            $query = db_select('establishment_sheet', 'es');
            $query->fields('es', array('eid'));
            $query->condition('es.eid', $GLOBALS['user']->uid,'=');
            $result = $query->execute();

            if($result->rowCount() != 0){
                $data['created'] = TRUE;
            }else{
                $data['created'] = FALSE;
            }

            /* Start - Query to retrieve the node list of rb collections */
            $query = db_select('node', 'n');
            $query->join('node_revision', 'nr', 'nr.nid = n.nid');
            $query->join('field_revision_field_nom_collection', 'frfnc', 'frfnc.revision_id = n.nid');


            $query->condition('n.type', 'rb_collections');
            $query->condition('n.uid', $GLOBALS['user']->uid);

            $query->fields('n', array('nid'));
            $query->fields('nr', array('title'));
            $query->fields('frfnc', array('field_nom_collection_value'));

            $data['results_node_list'] = $query->execute();
            /* End - Query to retrieve the node list of rb collections */

            // Link the template for the rsb filtres
            $block['content']['#markup'] = theme('tpl_rsb_annonces_manager', $data);

            // Link a css file for the rsb filtres
            $block['content']['#attached']['css'][] = array(
                'data' => drupal_get_path('module', 'bs_rsb') . '/css/bs-rsb-annonces-manager.css',
                'type' => 'file'
            );

            // Link a js file for the rsb filtres
            $block['content']['#attached']['js'][] = array(
                'data' => drupal_get_path('module', 'bs_rsb') . '/js/bs-rsb-annonces-manager.js',
                'type' => 'file'
            );

            break;

        case 'rb_establishment_sheet':

            // Check if user has ever created an establishment sheet
            $query = db_select('establishment_sheet', 'es');
            $query->fields('es', array('eid'));
            $query->condition('es.eid', $GLOBALS['user']->uid, '=');
            $result = $query->execute();

            // If user has, load the template.
            // Else load the form for create an establishment form.
            if($result->rowCount() > 0){

                // Retrieve BioSample contact datas
                $query = db_select('establishment_sheet', 'es');
                $query->fields('es', array('bs_contact_civility', 'bs_contact_firstname', 'bs_contact_lastname', 'bs_contact_mail', 'bs_contact_phone'));
                $query->condition('es.eid', $GLOBALS['user']->uid, '=');
                $data['results_bs_contact'] = $query->execute();

                $data['update_establishment_sheet'] = drupal_render(drupal_get_form('bs_rsb_updating_establishment_form'));

                // Link the template for the rsb establishments sheet
                $block['content']['#markup'] = theme('tpl_establishment_sheet', $data);

                // Link a css file for the rsb establishments sheet
                $block['content']['#attached']['css'][] = array(
                    'data' => drupal_get_path('module', 'bs_rsb') . '/css/bs-rsb-establishment-update.css',
                    'type' => 'file'
                );

                // Link a js file for the rsb establishments sheet
                $block['content']['#attached']['js'][] = array(
                    'data' => drupal_get_path('module', 'bs_rsb') . '/js/bs-rsb-establishment-update.js',
                    'type' => 'file'
                );

            }else{

                $block['content'] = drupal_get_form('bs_rsb_creation_establishment_form');

                // Link a css file for the rsb establishments sheet
                $block['content']['#attached']['css'][] = array(
                    'data' => drupal_get_path('module', 'bs_rsb') . '/css/bs-rsb-establishment-create.css',
                    'type' => 'file'
                );
            }

            break;

        case 'rb_establishments':

            // Retrieve the uid to load establishment sheet datas
            $url = $_SERVER['REQUEST_URI'];
            $url_split = preg_split('/\//', $url);
            $url_uid = $url_split[4];

            // Load every establishment datas concerning the author of the collection sheet
            $query = db_select('establishment_sheet', 'es');
            $query->fields(
                'es',
                array(
                    'name',
                    'status',
                    'organism_theme',
                    'organism_activities_more',
                    'presentation'
                )
            );
            $query->condition('es.eid', $url_uid);
            $data['results'] = $query->execute();

            // Retrieve activities
            $query = db_select('establishment_sheet', 'es');
            $query->fields('es', array('organism_activities'));
            $query->condition('es.eid', $url_uid);
            $activitiesIndentifiers = $query->execute()->fetchField(0);

            // Split activities string depending on the separator
            $arrayActivities = explode("-", $activitiesIndentifiers);

            $arrayResultActivities = [];

            foreach ($arrayActivities as $activity){

                switch ($activity){
                    case 1 :
                        array_push($arrayResultActivities, 'Collecte');
                        break;
                    case 2 :
                        array_push($arrayResultActivities, 'Préparation');
                        break;
                    case 3 :
                        array_push($arrayResultActivities, 'Stockage');
                        break;
                    case 4 :
                        array_push($arrayResultActivities, 'Recueil de données biocliniques');
                        break;
                    case 5 :
                        array_push($arrayResultActivities, 'Recueil de données patients');
                        break;
                    case 6 :
                        array_push($arrayResultActivities, 'Recherche');
                        break;
                    case 7 :
                        array_push($arrayResultActivities, 'Enseignement');
                        break;
                    case 8 :
                        array_push($arrayResultActivities, 'Prestation de collecte');
                        break;
                    case 9 :
                        array_push($arrayResultActivities, 'Prestation de stockage');
                        break;
                    case 10 :
                        array_push($arrayResultActivities, 'Prestations d\'analyses');
                        break;
                }
            }

            $data['activities'] = $arrayResultActivities;

            // Retrieve country identifier then retrieve the name of the country
            $query = db_select('establishment_sheet', 'es');
            $query->fields('es', array('organism_country'));
            $query->condition('es.eid', $url_uid);
            $countryIdentifier = $query->execute();
            $countryIdentifier = $countryIdentifier->fetchField(0);

            $query = db_select('countries_list', 'cl');
            $query->fields('cl',array('cl_name'));
            $query->condition('cl.cl_id', $countryIdentifier);
            $resultCountry = $query->execute();
            $data['resultCountry'] = $resultCountry->fetchField(0);

            // Load every establishment datas concerning the author of the collection sheet
            $query = db_select('establishment_sheet', 'es');
            $query->fields('es', array('image'));
            $query->condition('es.eid', $url_uid);
            $result_image = $query->execute();
            $result_image = $result_image->fetchAssoc();

            // Split the path stocked in database to retrieve
            // a relative path necessary to load the image
            $split_result = preg_split('/public:\/\//', $result_image['image']);
            $data['image'] = $split_result[1];

            /* Retrieve every collections of the organism */
            $urlEstablishmentID = explode("/", $_SERVER["REQUEST_URI"])[4];

            $query = db_select('node','n');
            $query->join('field_data_field_nom_collection','fdfnc','n.nid = fdfnc.entity_id');
            $query->fields('n', array('title', 'uid'));
            $query->fields('fdfnc', array('field_nom_collection_value'));
            $query->condition('type','rb_collections','=');
            $query->condition('uid',$urlEstablishmentID,'=');
            $data['everyCollections'] = $query->execute();

            $block['content']['#markup'] = theme('tpl_rsb_establishments', $data);

            // Link a css file for the rsb establishments
            $block['content']['#attached']['css'][] = array(
                'data' => drupal_get_path('module', 'bs_rsb') . '/css/bs-rsb-establishments.css',
                'type' => 'file'
            );

            // Link a js file for the rsb establishments
            $block['content']['#attached']['js'][] = array(
                'data' => drupal_get_path('module', 'bs_rsb') . '/js/bs-rsb-establishments.js',
                'type' => 'file'
            );

            break;

        case 'rb_collections_contact':

            if(
                preg_match("/^\/ressources-biologiques\/home\/[A-z0-9_\-\.]*\/[0-9]*$/", $_SERVER["REQUEST_URI"]) &&
                !preg_match("/^\/ressources-biologiques\/home\/organisme\/[0-9]*$/", $_SERVER["REQUEST_URI"])
            ) {
                // Pass in variable the form
                $data['contact_form'] = drupal_render(drupal_get_form('bs_rsb_collections_contact_form'));

                $block['content']['#markup'] = theme('tpl_rsb_collections_contact', $data);

                // Link a css file for the rsb establishments
                $block['content']['#attached']['css'][] = array(
                    'data' => drupal_get_path('module', 'bs_rsb') . '/css/bs-rsb-collections-contact.css',
                    'type' => 'file'
                );

                // Link a js file for the rsb establishments
                $block['content']['#attached']['js'][] = array(
                    'data' => drupal_get_path('module', 'bs_rsb') . '/js/bs-rsb-collections-contact.js',
                    'type' => 'file'
                );
            }


            break;
    }

    return $block;
}

/**
 * Implement bs_rsb_establishment_form()
 *
 * @see bs_rsb_creation_establishment_submit()
 */
function bs_rsb_creation_establishment_form($form, &$form_state){

    $form['establishment_sheet']['head_title'] = array(
        '#markup' => '<h2>Votre organisme</h2>',
        '#weight' => 0,
    );

/* ---------------------------------------------------------------------------------------------- */

    // Fieldset : Establishment sheet - Establishment datas
    $form['establishment_sheet']['establishment_datas'] = array(
        '#type' => 'fieldset',
        '#title' => t('Organisme'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#weight' => 1,
    );

    // Establishment sheet : Name
    $form['establishment_sheet']['establishment_datas']['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Nom'),
        '#weight' => 1,
        '#required' => TRUE,
    );

    // Establishment sheet : Status
    $form['establishment_sheet']['establishment_datas']['status'] = array(
        '#type' => 'select',
        '#title' => t('Status'),
        '#options' => array(
            0 => t('Public'),
            1 => t('Privé'),
            2 => t('Mixte'),
        ),
        '#weight' => 2,
        '#required' => TRUE,
    );

//    // Establishment sheet : Organism type
//    $form['establishment_sheet']['establishment_datas']['type'] = array(
//        '#type' => 'textfield',
//        '#title' => t('Type'),
//        '#weight' => 3,
//        '#required' => FALSE,
//    );

    // Establishment sheet : Organism theme
    $form['establishment_sheet']['establishment_datas']['theme'] = array(
        '#type' => 'textfield',
        '#title' => t('Thematique(s)'),
        '#weight' => 4,
        '#required' => FALSE,
    );

    // Establishment sheet : Organism activities
    $form['establishment_sheet']['establishment_datas']['activities'] = array(
        '#type' => 'checkboxes',
        '#options' => array(
            1 => 'Collecte',
            2 => 'Préparation',
            3 => 'Stockage',
            4 => 'Recueil de données biocliniques',
            5 => 'Recueil de données patients',
            6 => 'Recherche',
            7 => 'Enseignement',
            8 => 'Prestation de collecte',
            9 => 'Prestation de stockage',
            10 => 'Prestations d\'analyses'
        ),
        '#title' => t('Activités'),
        '#weight' => 5,
        '#required' => TRUE,
    );

    // Establishment sheet : Complementary activities
    $form['establishment_sheet']['establishment_datas']['complementary_activities'] = array(
        '#type' => 'textarea',
        '#title' => t('Activités complémentaires'),
        '#weight' => 6,
        '#required' => FALSE,
    );

    // Establishment sheet : Website
    $form['establishment_sheet']['establishment_datas']['website'] = array(
        '#type' => 'textfield',
        '#title' => t('Site internet'),
        '#weight' => 7,
        '#required' => FALSE,
    );

    // Establishment sheet : Countries
    $query = db_select('countries_list', 'cl');
    $query->fields('cl', array('cl_id', 'cl_name'));
    $resultsCountries = $query->execute();

    $countryList = array();

    foreach ($resultsCountries as $resultCountry) {

        $countryList[$resultCountry->cl_id] = $resultCountry->cl_name;
    }

    $form['establishment_sheet']['establishment_datas']['countries'] = array(
        '#type' => 'select',
        '#title' => t('Pays'),
        '#options' => $countryList,
        '#weight' => 8,
        '#required' => TRUE,
    );

    // Establishment sheet : Postal code
    $form['establishment_sheet']['establishment_datas']['postal_code'] = array(
        '#type' => 'textfield',
        '#title' => t('Code postal'),
        '#weight' => 9,
        '#required' => TRUE,
    );

    // Establishment sheet : City
    $form['establishment_sheet']['establishment_datas']['city'] = array(
        '#type' => 'textfield',
        '#title' => t('Ville'),
        '#weight' => 10,
        '#required' => TRUE,
    );

    // Establishment sheet : Address
    $form['establishment_sheet']['establishment_datas']['address'] = array(
        '#type' => 'textfield',
        '#title' => t('Adresse'),
        '#weight' => 11,
        '#required' => TRUE,
    );

    // Establishment sheet : Phone
    $form['establishment_sheet']['establishment_datas']['phone'] = array(
        '#type' => 'textfield',
        '#title' => t('Téléphone'),
        '#weight' => 12,
        '#required' => TRUE,
    );

    // Establishment sheet : Fax
    $form['establishment_sheet']['establishment_datas']['fax'] = array(
        '#type' => 'textfield',
        '#title' => t('Fax'),
        '#weight' => 13,
        '#required' => FALSE,
    );

    // Establishment sheet : Email
    $form['establishment_sheet']['establishment_datas']['email'] = array(
        '#type' => 'textfield',
        '#title' => t('Adresse e-mail'),
        '#weight' => 14,
        '#required' => TRUE,
    );

    // Establishment sheet : SIRET
    $form['establishment_sheet']['establishment_datas']['siret'] = array(
        '#type' => 'textfield',
        '#title' => t('SIRET'),
        '#weight' => 15,
        '#required' => FALSE,
    );

    // Establishment sheet : APE code
    $form['establishment_sheet']['establishment_datas']['APE_code'] = array(
        '#type' => 'textfield',
        '#title' => t('Code APE'),
        '#weight' => 16,
        '#required' => FALSE,
    );

    // Establishment sheet : Presentation
    $form['establishment_sheet']['establishment_datas']['presentation'] = array(
        '#type' => 'text_format',
        '#title' => t('Présentation'),
        '#format' => 'wysiwyg',
        '#weight' => 17,
        '#required' => FALSE,
    );

    // Establishment sheet : Image
    $form['establishment_sheet']['establishment_datas']['image'] = array(
        '#type' => 'file',
        '#title' => t('Image'),
        '#description' => t('Cette image sera utilisé dans la présentation de votre organisme.
        Vous pouvez par exemple choisir votre logo ou une photographie de votre organisme.'),
        '#weight' => 18,
    );

/* ---------------------------------------------------------------------------------------------- */

    // Fieldset : Establishment sheet - Establishment coordinator
    $form['establishment_sheet']['establishment_coordinator'] = array(
        '#type' => 'fieldset',
        '#title' => t('Coordinateur'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#weight' => 2,
    );

    // Establishment sheet : Contact civility
    $form['establishment_sheet']['establishment_coordinator']['contact_civility'] = array(
        '#type' => 'select',
        '#title' => t('Civilité'),
        '#options' => array(
            0 => t('Madame'),
            1 => t('Monsieur')
        ),
        '#weight' => 0,
        '#required' => TRUE,
    );

    // Establishment sheet : Contact firstname
    $form['establishment_sheet']['establishment_coordinator']['contact_firstname'] = array(
        '#type' => 'textfield',
        '#title' => t('Prénom'),
        '#weight' => 1,
        '#required' => TRUE,
    );

    // Establishment sheet : Contact lastname
    $form['establishment_sheet']['establishment_coordinator']['contact_lastname'] = array(
        '#type' => 'textfield',
        '#title' => t('Nom'),
        '#weight' => 2,
        '#required' => TRUE,
    );

    // Establishment sheet : Contact poste
    $form['establishment_sheet']['establishment_coordinator']['contact_poste'] = array(
        '#type' => 'textfield',
        '#title' => t('Poste'),
        '#weight' => 3,
        '#required' => TRUE,
    );

    // Establishment sheet : Contact phone
    $form['establishment_sheet']['establishment_coordinator']['contact_phone'] = array(
        '#type' => 'textfield',
        '#title' => t('Téléphone'),
        '#weight' => 4,
        '#required' => TRUE,
    );

    // Establishment sheet : Contact email
    $form['establishment_sheet']['establishment_coordinator']['contact_email'] = array(
        '#type' => 'textfield',
        '#title' => t('Adresse e-mail'),
        '#weight' => 5,
        '#required' => TRUE,
    );

/* ---------------------------------------------------------------------------------------------- */

    // Establishment sheet : Submit button
    $form['establishment_sheet']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Valider'),
        '#weight' => 3,
    );

    $form['establishment_sheet']['submit']['#validate'][] = 'bs_rsb_creation_establishment_validate';
    $form['establishment_sheet']['submit']['#submit'][] = 'bs_rsb_creation_establishment_submit';

    return $form;
}

/**
 * Implement bs_rsb_creation_establishment_validate()
 *
 * @param $form
 * @param $form_state
 */
function bs_rsb_creation_establishment_validate($form, $form_state){

    $isError = false;

    // Email verification
    if($error = (!preg_match("/^[A-z0-9_\-\.]+@[A-z-]+\.[A-z]*$/", $form_state['values']['email']))){
        // Check if the mail value match with the Regular Expression above
        // Display an error in the mail field
        form_set_error('email', $error);
        $isError = true;
    }else if($error = (preg_match("/^[A-z0-9_\-\.]+@yopmail+\.[A-z]*$/", $form_state['values']['email']))) {
        // Check if the mail value match with the Regular Expression  above
        // Display an error in the mail field
        form_set_error('email', $error);
        $isError = true;
    }

    // Code postal verification
    if($error = (!preg_match("/^[0-9 \-\.]*$/", $form_state['values']['postal_code']))){
        // Check if the code postal value match with the Regular Expression above
        // Allow digits, spaces, dashes and dots
        // Display an error in the code postal field
        form_set_error('postal_code', $error);
        $isError = true;
    }

    // Phone number verification
    if($error = (!preg_match("/^[0-9 \(\)\+\-\.]*$/", $form_state['values']['phone']))){
        // Check if the phone value match with the Regular Expression above
        // Allow digits, space, parenthesis, plus symbol, hyphen, dot
        // Display an error in the phone field
        form_set_error('phone', $error);
        $isError = true;
    }

    // Contact email verification
    if($error = (!preg_match("/^[A-z0-9_\-\.]+@[A-z-]+\.[A-z]*$/", $form_state['values']['contact_email']))){
        // Check if the mail value match with the Regular Expression above
        // Display an error in the mail field
        form_set_error('contact_email', $error);
        $isError = true;
    }else if($error = (preg_match("/^[A-z0-9_\-\.]+@yopmail+\.[A-z]*$/", $form_state['values']['contact_email']))) {
        // Check if the mail value match with the Regular Expression  above
        // Display an error in the mail field
        form_set_error('contact_email', $error);
        $isError = true;
    }

    // Contact phone number verification
    if($error = (!preg_match("/^[0-9 \(\)\+\-\.]*$/", $form_state['values']['contact_phone']))){
        // Check if the phone value match with the Regular Expression above
        // Allow digits, space, parenthesis, plus symbol, hyphen, dot
        // Display an error in the phone field
        form_set_error('contact_phone', $error);
        $isError = true;
    }

    if($isError){
        drupal_set_message("Il y a une ou plusieurs erreurs dans le formulaire.");
    }
}

/**
 * Implement bs_rsb_creation_establishment_submit()
 *
 * @see bs_rsb_establishment_form()
 */
function bs_rsb_creation_establishment_submit($form, &$form_state){

    $query = db_select('establishment_sheet', 'es');
    $query->fields('es', array('eid'));
    $query->condition('es.eid', $GLOBALS['user']->uid, '=');
    $result = $query->execute();

    // Check if an establishment sheet has ever been created
    if($result->rowCount() > 0){

        // If it is, display an error message
        drupal_set_message("Vous possédez déjà une fiche d'organisme.");
    }else{

        /* ------------------------------------------------------------------------------ */
        /* ----------------------- Change the select value stocked ---------------------- */
        /* ------------------------------------------------------------------------------ */

        // Change the value stocked for the selected status
        switch($form_state['values']['status']){
            case '0' :
                $form_state['values']['status'] = 'Public';
                break;
            case '1' :
                $form_state['values']['status'] = 'Privé';
                break;
            case '2' :
                $form_state['values']['status'] = 'Mixte';
                break;
        }

        // Change the value stocked for the selected contact civility
        switch($form_state['values']['contact_civility']){
            case '0' :
                $form_state['values']['contact_civility'] = 'Madame';
                break;
            case '1' :
                $form_state['values']['contact_civility'] = 'Monsieur';
                break;
        }

        /* ------------------------------------------------------------------------------ */
        /* ----------------------- Add the image to the file system --------------------- */
        /* ------------------------------------------------------------------------------ */

        /*
         * Allow .jpg .png extension
         * Create a path as uploading jpg/png file
         */
        $validators = [
            'file_validate_extensions' => ['jpg png'],
        ];
        if ($file = file_save_upload('image', $validators, file_default_scheme() . '://')) {
            // The file was saved using file_save_upload() and was added to
            // the files table as a temporary file. We'll make a copy and let
            // the garbage collector delete the original upload.
            $path = 'public://img_organismes/' . $GLOBALS['user']->uid;
            //we check if the we can create the directory
            if (file_prepare_directory($path, FILE_CREATE_DIRECTORY)) {
                $destination = $path . '/' . $file->filename;
                if ($file = file_copy($file, $destination, FILE_EXISTS_REPLACE)) {
                    $file->status = FILE_STATUS_PERMANENT;
                    file_save($file);
                    $form_state['values']['image'] = $destination;
                }
                else {
                    form_set_error('image', t('Unable to copy upload file to !dest', ['!dest' => $destination]));
                }
            }
        }

        /* ------------------------------------------------------------------------------ */
        /* ---------- Parse activities to retrieve only checkboxes identifier ----------- */
        /* ------------------------------------------------------------------------------ */

        // Initialize string container
        $selectedActivities = "";

        // Foreach on the array
        foreach($form_state['values']['activities'] as $identifier) {
            // If the value is different of 0, the checkbox is checked
            if($identifier != 0)
            {
                // Add to the string container the identifier of the checkbox checked
                // Also add a separator
                $selectedActivities = $selectedActivities . "-" . $identifier;
            }
        }

        /* ------------------------------------------------------------------------------ */
        /* -------------------------- Insert datas in database -------------------------- */
        /* ------------------------------------------------------------------------------ */

        // If it isn't, insert datas in Database
        db_insert('establishment_sheet')
            ->fields(array(
                'eid' => $GLOBALS['user']->uid,
                'name' => $form_state['values']['name'],
                'address' => $form_state['values']['address'],
                'city' => $form_state['values']['city'],
                'postal_code' => $form_state['values']['postal_code'],
                'status' => $form_state['values']['status'],
                'presentation' => $form_state['values']['presentation']['value'],
                'image' => $form_state['values']['image'],
//                'organism_type' => $form_state['values']['type'],
                'organism_theme' => $form_state['values']['theme'],
                'organism_activities' => $selectedActivities,
                'organism_activities_more' => $form_state['values']['complementary_activities'],
                'organism_website' => $form_state['values']['website'],
                'organism_country' => $form_state['values']['countries'],
                'organism_phone' => $form_state['values']['phone'],
                'organism_fax' => $form_state['values']['fax'],
                'organism_mail' => $form_state['values']['email'],
                'organism_siret' => $form_state['values']['siret'],
                'organism_ape_code' => $form_state['values']['APE_code'],
                'organism_contact_civility' => $form_state['values']['contact_civility'],
                'organism_contact_firstname' => $form_state['values']['contact_firstname'],
                'organism_contact_lastname' => $form_state['values']['contact_lastname'],
                'organism_contact_poste' => $form_state['values']['contact_poste'],
                'organism_contact_email' => $form_state['values']['contact_email'],
                'organism_contact_phone' => $form_state['values']['contact_phone'],
            ))
            ->execute();

        drupal_set_message("La fiche d'organisme a été créée.");

//        $tabInsert = ["Afrique du Sud", "Afghanistan", "Albanie", "Algérie" ,"Allemagne","Andorre","Angola","Antigua-et-Barbuda","Arabie Saoudite","Argentine","Arménie","Australie","Autriche","Azerbaïdjan","Bahamas","Bahreïn","Bangladesh","Barbade","Belgique","Belize","Bénin","Bhoutan","Biélorussie","Birmanie","Bolivie","Bosnie-Herzégovine","Botswana","Brésil","Brunei","Bulgarie","Burkina Faso","Burundi","Cambodge","Cameroun","Canada","Cap-Vert","Chili","Chine","Chypre","Colombie","Comores","Corée du Nord","Corée du Sud","Costa Rica","Côte d’Ivoire", "Croatie","Cuba","Danemark","Djibouti","Dominique","Égypte","Émirats arabes unis","Équateur","Érythrée","Espagne","Estonie","États-Unis","Éthiopie","Fidji","Finlande","France","Gabon","Gambie","Géorgie","Ghana","Grèce","Grenade","Guatemala","Guinée","Guinée équatoriale","Guinée-Bissau","Guyana","Haïti","Honduras","Hongrie","Îles Cook","Îles Marshall","Inde","Indonésie","Irak","Iran","Irlande","Islande","Israël","Italie","Jamaïque","Japon","Jordanie","Kazakhstan","Kenya","Kirghizistan","Kiribati","Koweït","Laos","Lesotho","Lettonie","Liban","Liberia","Libye","Liechtenstein","Lituanie","Luxembourg","Macédoine","Madagascar","Malaisie","Malawi","Maldives","Mali","Malte","Maroc","Maurice","Mauritanie","Mexique","Micronésie","Moldavie","Monaco","Mongolie","Monténégro","Mozambique","Namibie","Nauru","Népal","Nicaragua","Niger","Nigeria","Niue","Norvège","Nouvelle-Zélande","Oman","Ouganda","Ouzbékistan","Pakistan","Palaos","Palestine","Panama","Papouasie-Nouvelle-Guinée","Paraguay","Pays-Bas","Pérou","Philippines","Pologne","Portugal","Qatar","République centrafricaine","République démocratique du Congo","République Dominicaine","République du Congo","République tchèque","Roumanie","Royaume-Uni","Russie","Rwanda","Saint-Kitts-et-Nevis","Saint-Vincent-et-les-Grenadines","Sainte-Lucie","Saint-Marin","Salomon","Salvador","Samoa","São Tomé-et-Principe","Sénégal","Serbie","Seychelles","Sierra Leone","Singapour","Slovaquie","Slovénie","Somalie","Soudan","Soudan du Sud","Sri Lanka","Suède","Suisse","Suriname","Swaziland","Syrie","Tadjikistan","Tanzanie","Tchad","Thaïlande","Timor oriental","Togo","Tonga","Trinité-et-Tobago","Tunisie","Turkménistan","Turquie","Tuvalu","Ukraine","Uruguay","Vanuatu","Vatican","Venezuela","Viêt Nam","Yémen","Zambie", "Zimbabwe"];

    }
}

/**
 * Implement bs_rsb_updating_establishment_form()
 *
 * @see bs_rsb_updating_establishment_submit()
 */
function bs_rsb_updating_establishment_form($form, &$form_state){

    // Retrieve every datas stocked in database that user can change
    $query = db_select('establishment_sheet', 'es');
    $query->fields(
        'es',
        array(
            'eid',
            'name',
            'address',
            'city',
            'postal_code',
            'status',
            'presentation',
            'image',
//            'organism_type',
            'organism_theme',
            'organism_activities',
            'organism_activities_more',
            'organism_website',
            'organism_country',
            'organism_phone',
            'organism_fax',
            'organism_mail',
            'organism_siret',
            'organism_ape_code',
            'organism_contact_civility',
            'organism_contact_firstname',
            'organism_contact_lastname',
            'organism_contact_poste',
            'organism_contact_email',
            'organism_contact_phone'
        )
    );
    $query->condition('es.eid', $GLOBALS['user']->uid);
    $results = $query->execute();
    $result = $results->fetchAssoc();

/* ---------------------------------------------------------------------------------------------- */

    // Fieldset : Establishment sheet - Establishment datas
    $form['update_establishment']['establishment_datas'] = array(
        '#type' => 'fieldset',
        '#title' => t('Organisme'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#weight' => 1,
    );

    // Establishment sheet : Name
    $form['update_establishment']['establishment_datas']['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Nom'),
        '#default_value' => $result['name'],
        '#weight' => 1,
        '#required' => TRUE,
    );

    // Establishment sheet : Status

    // Translate the status value stocked in database to make
    // the correspondence with the key of the select field
    switch($result['status']){
        case 'Public' :
            $result['status'] = 0;
            break;
        case 'Privé' :
            $result['status'] = 1;
            break;
        case 'Mixte' :
            $result['status'] = 2;
            break;
    }

    $form['update_establishment']['establishment_datas']['status'] = array(
        '#type' => 'select',
        '#default_value' => $result['status'],
        '#title' => t('Status'),
        '#options' => array(
            0 => t('Public'),
            1 => t('Privé'),
            2 => t('Mixte'),
        ),
        '#weight' => 2,
        '#required' => TRUE,
    );

    // Establishment sheet : Organism type
//    $form['update_establishment']['establishment_datas']['type'] = array(
//        '#type' => 'textfield',
//        '#title' => t('Type'),
//        '#default_value' => $result['organism_type'],
//        '#weight' => 3,
//        '#required' => FALSE,
//    );

    // Establishment sheet : Organism theme
    $form['update_establishment']['establishment_datas']['theme'] = array(
        '#type' => 'textfield',
        '#title' => t('Thematique(s)'),
        '#default_value' => $result['organism_theme'],
        '#weight' => 4,
        '#required' => FALSE,
    );

    // Establishment sheet : Organism activities

    // Parse activities depending on the separator
    $arrayActivities = explode("-", $result['organism_activities']);

    $form['update_establishment']['establishment_datas']['activities'] = array(
        '#type' => 'checkboxes',
        '#options' => array(
            1 => 'Collecte',
            2 => 'Préparation',
            3 => 'Stockage',
            4 => 'Recueil de données biocliniques',
            5 => 'Recueil de données patients',
            6 => 'Recherche',
            7 => 'Enseignement',
            8 => 'Prestation de collecte',
            9 => 'Prestation de stockage',
            10 => 'Prestations d\'analyses'
        ),
        '#default_value' => $arrayActivities,
        '#title' => t('Activités'),
        '#weight' => 5,
        '#required' => TRUE,
    );


    // Establishment sheet : Complementary activities
    $form['update_establishment']['establishment_datas']['complementary_activities'] = array(
        '#type' => 'textarea',
        '#title' => t('Activités complémentaires'),
        '#default_value' => $result['organism_activities_more'],
        '#weight' => 6,
        '#required' => FALSE,
    );

    // Establishment sheet : Website
    $form['update_establishment']['establishment_datas']['website'] = array(
        '#type' => 'textfield',
        '#title' => t('Site internet'),
        '#default_value' => $result['organism_website'],
        '#weight' => 7,
        '#required' => FALSE,
    );

    // Establishment sheet : Countries
    $query = db_select('countries_list', 'cl');
    $query->fields('cl', array('cl_id', 'cl_name'));
    $resultsCountries = $query->execute();

    $countryList = array();

    foreach ($resultsCountries as $resultCountry) {

        $countryList[$resultCountry->cl_id] = $resultCountry->cl_name;
    }

    $form['update_establishment']['establishment_datas']['countries'] = array(
        '#type' => 'select',
        '#title' => t('Pays'),
        '#options' => $countryList,
        '#default_value' => $result['organism_country'],
        '#weight' => 8,
        '#required' => TRUE,
    );

    // Establishment sheet : Postal code
    $form['update_establishment']['establishment_datas']['postal_code'] = array(
        '#type' => 'textfield',
        '#title' => t('Code postal'),
        '#default_value' => $result['postal_code'],
        '#weight' => 9,
        '#required' => TRUE,
    );

    // Establishment sheet : City
    $form['update_establishment']['establishment_datas']['city'] = array(
        '#type' => 'textfield',
        '#title' => t('Ville'),
        '#default_value' => $result['city'],
        '#weight' => 10,
        '#required' => TRUE,
    );

    // Establishment sheet : Address
    $form['update_establishment']['establishment_datas']['address'] = array(
        '#type' => 'textfield',
        '#title' => t('Adresse'),
        '#default_value' => $result['address'],
        '#weight' => 11,
        '#required' => TRUE,
    );

    // Establishment sheet : Phone
    $form['update_establishment']['establishment_datas']['phone'] = array(
        '#type' => 'textfield',
        '#title' => t('Téléphone'),
        '#default_value' => $result['organism_phone'],
        '#weight' => 12,
        '#required' => TRUE,
    );

    // Establishment sheet : Fax
    $form['update_establishment']['establishment_datas']['fax'] = array(
        '#type' => 'textfield',
        '#title' => t('Fax'),
        '#default_value' => $result['organism_fax'],
        '#weight' => 13,
        '#required' => FALSE,
    );

    // Establishment sheet : Email
    $form['update_establishment']['establishment_datas']['email'] = array(
        '#type' => 'textfield',
        '#title' => t('Adresse e-mail'),
        '#default_value' => $result['organism_mail'],
        '#weight' => 14,
        '#required' => TRUE,
    );

    // Establishment sheet : SIRET
    $form['update_establishment']['establishment_datas']['siret'] = array(
        '#type' => 'textfield',
        '#title' => t('SIRET'),
        '#default_value' => $result['organism_siret'],
        '#weight' => 15,
        '#required' => FALSE,
    );

    // Establishment sheet : APE code
    $form['update_establishment']['establishment_datas']['APE_code'] = array(
        '#type' => 'textfield',
        '#title' => t('Code APE'),
        '#default_value' => $result['organism_ape_code'],
        '#weight' => 16,
        '#required' => FALSE,
    );

    // Establishment sheet : Presentation
    $form['update_establishment']['establishment_datas']['presentation'] = array(
        '#type' => 'text_format',
        '#title' => t('Présentation'),
        '#format' => 'wysiwyg',
        '#default_value' => $result['presentation'],
        '#weight' => 17,
        '#required' => FALSE,
    );

    // Establishment sheet : Image

    // Split the path stocked in database to retrieve
    // a relative path necessary to load the previewed image
    $split_result = preg_split('/public:\/\//', $result['image']);
    $result['image'] = $split_result[1];

    $form['update_establishment']['establishment_datas']['image'] = array(
        '#type' => 'file',
        '#title' => t('Image'),
        '#description' => t('Cette image sera utilisé dans la présentation de votre organisme.
        Vous pouvez par exemple choisir votre logo ou une photographie de votre organisme.'),
        '#weight' => 18,
    );

    // Check if there is path of an image stocked in database
    if(!empty($result['image'])){

        // Establishment sheet : Image preview
        $form['update_establishment']['establishment_datas']['imagePreview'] = array(
            '#markup' =>
                '<div id="bs-rsb-preview-img">' .
                    '<p>Image actuelle : </p><span>VOIR</span>' .
                    '<img src="/sites/default/files/' . $result['image'] . '" width="500px" height="auto" alt="Image de l\'organisme">' .
                 '</div>',
            '#weight' => 19,
        );
    }

/* ---------------------------------------------------------------------------------------------- */

    // Fieldset : Establishment sheet - Establishment coordinator
    $form['update_establishment']['establishment_coordinator'] = array(
        '#type' => 'fieldset',
        '#title' => t('Coordinateur'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#weight' => 2,
    );

    // Establishment sheet : Contact civility
    switch($result['organism_contact_civility']){
        case "Madame" :
            $result['organism_contact_civility'] = 0;
            break;
        case "Monsieur" :
            $result['organism_contact_civility'] = 1;
            break;
    }

    $form['update_establishment']['establishment_coordinator']['contact_civility'] = array(
        '#type' => 'select',
        '#title' => t('Civilité'),
        '#options' => array(
            0 => t('Madame'),
            1 => t('Monsieur')
        ),
        '#default_value' => $result['organism_contact_civility'],
        '#weight' => 0,
        '#required' => TRUE,
    );

    // Establishment sheet : Contact firstname
    $form['update_establishment']['establishment_coordinator']['contact_firstname'] = array(
        '#type' => 'textfield',
        '#title' => t('Prénom'),
        '#default_value' => $result['organism_contact_firstname'],
        '#weight' => 1,
        '#required' => TRUE,
    );

    // Establishment sheet : Contact lastname
    $form['update_establishment']['establishment_coordinator']['contact_lastname'] = array(
        '#type' => 'textfield',
        '#title' => t('Nom'),
        '#default_value' => $result['organism_contact_lastname'],
        '#weight' => 2,
        '#required' => TRUE,
    );

    // Establishment sheet : Contact poste
    $form['update_establishment']['establishment_coordinator']['contact_poste'] = array(
        '#type' => 'textfield',
        '#title' => t('Poste'),
        '#default_value' => $result['organism_contact_poste'],
        '#weight' => 3,
        '#required' => TRUE,
    );

    // Establishment sheet : Contact phone
    $form['update_establishment']['establishment_coordinator']['contact_phone'] = array(
        '#type' => 'textfield',
        '#title' => t('Téléphone'),
        '#default_value' => $result['organism_contact_phone'],
        '#weight' => 4,
        '#required' => TRUE,
    );

    // Establishment sheet : Contact email
    $form['update_establishment']['establishment_coordinator']['contact_email'] = array(
        '#type' => 'textfield',
        '#title' => t('Adresse e-mail'),
        '#default_value' => $result['organism_contact_email'],
        '#weight' => 5,
        '#required' => TRUE,
    );

/* ---------------------------------------------------------------------------------------------- */

    // Establishment sheet : Submit button
    $form['update_establishment']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Modifier'),
        '#weight' => 10,
    );

    $form['update_establishment']['submit']['#validate'][] = 'bs_rsb_updating_establishment_validate';
    $form['update_establishment']['submit']['#submit'][] = 'bs_rsb_updating_establishment_submit';

    return $form;

}

/**
 * Implement bs_rsb_updating_establishment_validate()
 *
 * @param $form
 * @param $form_state
 */
function bs_rsb_updating_establishment_validate($form, $form_state){

    $isError = false;

    // Email verification
    if($error = (!preg_match("/^[A-z0-9_\-\.]+@[A-z-]+\.[A-z]*$/", $form_state['values']['email']))){
        // Check if the mail value match with the Regular Expression above
        // Display an error in the mail field
        form_set_error('email', $error);
        $isError = true;
    }else if($error = (preg_match("/^[A-z0-9_\-\.]+@yopmail+\.[A-z]*$/", $form_state['values']['email']))) {
        // Check if the mail value match with the Regular Expression  above
        // Display an error in the mail field
        form_set_error('email', $error);
        $isError = true;
    }

    // Code postal verification
    if($error = (!preg_match("/^[0-9 \-\.]*$/", $form_state['values']['postal_code']))){
        // Check if the code postal value match with the Regular Expression above
        // Allow digits, spaces, dashes and dots
        // Display an error in the code postal field
        form_set_error('postal_code', $error);
        $isError = true;
    }

    // Phone number verification
    if($error = (!preg_match("/^[0-9 \(\)\+\-\.]*$/", $form_state['values']['phone']))){
        // Check if the phone value match with the Regular Expression above
        // Allow digits, space, parenthesis, plus symbol, hyphen, dot
        // Display an error in the phone field
        form_set_error('phone', $error);
        $isError = true;
    }

    // Contact email verification
    if($error = (!preg_match("/^[A-z0-9_\-\.]+@[A-z-]+\.[A-z]*$/", $form_state['values']['contact_email']))){
        // Check if the mail value match with the Regular Expression above
        // Display an error in the mail field
        form_set_error('contact_email', $error);
        $isError = true;
    }else if($error = (preg_match("/^[A-z0-9_\-\.]+@yopmail+\.[A-z]*$/", $form_state['values']['contact_email']))) {
        // Check if the mail value match with the Regular Expression  above
        // Display an error in the mail field
        form_set_error('contact_email', $error);
        $isError = true;
    }

    // Contact phone number verification
    if($error = (!preg_match("/^[0-9 \(\)\+\-\.]*$/", $form_state['values']['contact_phone']))){
        // Check if the phone value match with the Regular Expression above
        // Allow digits, space, parenthesis, plus symbol, hyphen, dot
        // Display an error in the phone field
        form_set_error('contact_phone', $error);
        $isError = true;
    }

    if($isError){
        drupal_set_message("Il y a une ou plusieurs erreurs dans le formulaire.");
    }
}

/**
 * Implement bs_rsb_updating_establishment_submit()
 *
 * @see bs_rsb_updating_establishment_form()
 */
function bs_rsb_updating_establishment_submit($form, &$form_state){

    /* ------------------------------------------------------------------------------ */
    /* ----------------------- Change the select value stocked ---------------------- */
    /* ------------------------------------------------------------------------------ */

    // Change the value stocked for the selected status
    switch($form_state['values']['status']){
        case '0' :
            $form_state['values']['status'] = 'Public';
            break;
        case '1' :
            $form_state['values']['status'] = 'Privé';
            break;
        case '2' :
            $form_state['values']['status'] = 'Mixte';
            break;
    }

    // Change the value stocked for the selected contact civility
    switch($form_state['values']['contact_civility']){
        case '0' :
            $form_state['values']['contact_civility'] = 'Madame';
            break;
        case '1' :
            $form_state['values']['contact_civility'] = 'Monsieur';
            break;
    }

    /* ------------------------------------------------------------------------------ */
    /* ----------------------- Add the image to the file system --------------------- */
    /* ------------------------------------------------------------------------------ */

    /*
     * Allow .jpg .png extension
     * Create a path as uploading jpg/png file
     */
    $validators = [
        'file_validate_extensions' => ['jpg png'],
    ];
    if ($file = file_save_upload('image', $validators, file_default_scheme() . '://')) {
        // The file was saved using file_save_upload() and was added to
        // the files table as a temporary file. We'll make a copy and let
        // the garbage collector delete the original upload.
        $path = 'public://img_organismes/' . $GLOBALS['user']->uid;
        //we check if the we can create the directory
        if (file_prepare_directory($path, FILE_CREATE_DIRECTORY)) {
            $destination = $path . '/' . $file->filename;
            if ($file = file_copy($file, $destination, FILE_EXISTS_REPLACE)) {
                $file->status = FILE_STATUS_PERMANENT;
                file_save($file);
                $form_state['values']['image'] = $destination;
            }
            else {
                form_set_error('image', t('Unable to copy upload file to !dest', ['!dest' => $destination]));
            }
        }
    }

    /* ------------------------------------------------------------------------------ */
    /* ---------- Parse activities to retrieve only checkboxes identifier ----------- */
    /* ------------------------------------------------------------------------------ */

    // Initialize string container
    $selectedActivities = "";

    // Foreach on the array
    foreach($form_state['values']['activities'] as $identifier) {
        // If the value is different of 0, the checkbox is checked
        if($identifier != 0)
        {
            // Add to the string container the identifier of the checkbox checked
            // Also add a separator
            $selectedActivities = $selectedActivities . "-" . $identifier;
        }
    }

    /* ------------------------------------------------------------------------------ */
    /* -------------------------- Update datas in database -------------------------- */
    /* ------------------------------------------------------------------------------ */

    // Update establishment sheet datas with the new values.
    db_update('establishment_sheet')
        ->condition('eid', $GLOBALS['user']->uid, '=')
        ->fields(array(
            'name' => $form_state['values']['name'],
            'address' => $form_state['values']['address'],
            'city' => $form_state['values']['city'],
            'postal_code' => $form_state['values']['postal_code'],
            'status' => $form_state['values']['status'],
            'presentation' => $form_state['values']['presentation']['value'],
//            'organism_type' => $form_state['values']['type'],
            'organism_theme' => $form_state['values']['theme'],
            'organism_activities' => $selectedActivities,
            'organism_activities_more' => $form_state['values']['complementary_activities'],
            'organism_website' => $form_state['values']['website'],
            'organism_country' => $form_state['values']['countries'],
            'organism_phone' => $form_state['values']['phone'],
            'organism_fax' => $form_state['values']['fax'],
            'organism_mail' => $form_state['values']['email'],
            'organism_siret' => $form_state['values']['siret'],
            'organism_ape_code' => $form_state['values']['APE_code'],
            'organism_contact_civility' => $form_state['values']['contact_civility'],
            'organism_contact_firstname' => $form_state['values']['contact_firstname'],
            'organism_contact_lastname' => $form_state['values']['contact_lastname'],
            'organism_contact_poste' => $form_state['values']['contact_poste'],
            'organism_contact_email' => $form_state['values']['contact_email'],
            'organism_contact_phone' => $form_state['values']['contact_phone'],
        ))
        ->execute();

    // Important : Check if user would change his image
    if(!empty($form_state['values']['image'])){

        // Retrieve the path of the image already stocked in database
        $query = db_select('establishment_sheet', 'es');
        $query->fields('es', array('image'));
        $query->condition('es.eid', $GLOBALS['user']->uid);
        $results = $query->execute();
        $result = $results->fetchAssoc();

        // Delete de image stocked
        file_unmanaged_delete($result['image']);

        // Insert the path of the new image in database
        db_update('establishment_sheet')
            ->condition('eid', $GLOBALS['user']->uid, '=')
            ->fields(array(
                'image' => $form_state['values']['image'],
            ))
            ->execute();
    }

    drupal_set_message("Les changements ont bien été pris en compte.");

}

/**
 * Implement bs_rsb_admin_manager_form()
 *
 * @see ()
 */
function bs_rsb_admin_manager_form($form, &$form_state){

    $header = array(
        'uid' => array('data' => t('uid'), 'field' => 'es.eid'),
        'affiliation_societe' => array('data' => t('Affiliation / Société'), 'field' => 'uef.affiliation_societe'),
        'user_mail' => array('data' => t('Mail de l\'utilisateur contact'), 'field' => 'uef.mail_contact'),
        'establishment_name' => array('data' => t('Nom de l\'organisme'), 'field' => 'es.name'),
        'bs_contact' => array('data' => t('Contact BioSample'), 'field' => 'es.bs_contact_lastname'),
        'operations' => array('data' => t('Operations')),
    );

    $query = db_select('establishment_sheet', 'es');
    $query->join('users', 'u', 'u.uid = es.eid');
    $query->join('users_extra_fields', 'uef', 'uef.username = u.name');
//    $query->condition('es.eid', 0, '>');
    user_build_filter_query($query);

    $count_query = clone $query;
    $count_query->addExpression('COUNT(es.eid)');

    $query = $query->extend('PagerDefault')->extend('TableSort');
    $query
        ->fields('es', array('eid', 'name', 'address', 'bs_contact_firstname', 'bs_contact_lastname'))
        ->fields('uef', array('affiliation_societe', 'mail_contact'))
        ->limit(50)
        ->orderByHeader($header)
        ->setCountQuery($count_query);
    $result = $query->execute();

    $destination = drupal_get_destination();

    foreach ($result as $establishment) {

        $options[$establishment->eid] = array(
            'uid' => $establishment->eid,
            'affiliation_societe' => $establishment->affiliation_societe,
            'user_mail' => $establishment->mail_contact,
            'establishment_name' => $establishment->name,
            'bs_contact' => $establishment->bs_contact_firstname . " " . $establishment->bs_contact_lastname,
            'operations' => array('data' => array('#type' => 'link', '#title' => t('edit'), '#href' => "admin/BioSample/rb-manager/$establishment->eid/edit", '#options' => array('query' => $destination))),
        );
    }

    $form['accounts'] = array(
        '#type' => 'tableselect',
        '#header' => $header,
        '#options' => $options,
        '#empty' => t('No people available.'),
    );

    return $form;
}

/**
 * Implement bs_rsb_admin_datas_establishment_form()
 *
 * @see bs_rsb_admin_datas_establishment_form_submit()
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function bs_rsb_admin_datas_establishment_form($form, $form_state){

    // Add js file to prevent establishment deleting
    drupal_add_js(drupal_get_path('module', 'bs_rsb') .'/js/bs-rsb-admin-manager.js', 'file');
    // Add css file to custom the prevent establishment deleting
    drupal_add_css(drupal_get_path('module', 'bs_rsb') .'/css/bs-rsb-admin-manager.css', 'file');

    // Split the URI to retrieve user id : UID
    $splitted_uri = preg_split("/\//",$_SERVER['REQUEST_URI']);
    // Retrieve the UID
    $url_uid = $splitted_uri[4];

    $query = db_select("establishment_sheet", "es");
    $query->fields(
        "es",
        array(
            "name",
            "address",
            "city",
            "postal_code",
            "status",
            "presentation",
            "image",
            "bs_contact_civility",
            "bs_contact_firstname",
            "bs_contact_lastname",
            "bs_contact_mail",
            "bs_contact_phone",
//            'organism_type',
            'organism_theme',
            'organism_activities',
            'organism_activities_more',
            'organism_website',
            'organism_country',
            'organism_phone',
            'organism_fax',
            'organism_mail',
            'organism_siret',
            'organism_ape_code',
            'organism_contact_civility',
            'organism_contact_firstname',
            'organism_contact_lastname',
            'organism_contact_poste',
            'organism_contact_email',
            'organism_contact_phone'
        )
    );
    $query->condition("es.eid", $url_uid,"=");
    $results = $query->execute();

    foreach($results as $result){

    /* Establishment - Datas */

        // Fieldset : Establishment sheet - Establishment datas
        $form['establishment']['establishment_datas'] = array(
            '#type' => 'fieldset',
            '#title' => t('Organisme'),
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            '#weight' => 1,
        );

        // Establishment name
        $form['establishment']['establishment_datas']['name'] = array(
            '#type' => 'textfield',
            '#title' => t('Nom'),
            '#default_value' => $result->name,
            '#weight' => 1,
        );

        // Establishment status
        switch($result->status){
            case "Public" :
                $result->status = 0;
                break;
            case "Privé" :
                $result->status = 1;
                break;
            case "Mixte" :
                $result->status = 2;
                break;
        }

        $form['establishment']['establishment_datas']['status'] = array(
            '#type' => 'select',
            '#title' => t('Status de l\'organisme'),
            '#options' => array(
                0 => t('Public'),
                1 => t('Privé'),
                2 => t('Mixte'),
            ),
            '#default_value' => $result->status,
            '#weight' => 2,
        );

//        // Establishment sheet : Organism type
//        $form['establishment']['establishment_datas']['type'] = array(
//            '#type' => 'textfield',
//            '#title' => t('Type'),
//            '#default_value' => $result->organism_type,
//            '#weight' => 3,
//        );

        // Establishment sheet : Organism theme
        $form['establishment']['establishment_datas']['theme'] = array(
            '#type' => 'textfield',
            '#title' => t('Thematique(s)'),
            '#default_value' => $result->organism_theme,
            '#weight' => 4,
        );

        // Establishment sheet : Organism activities

        // Parse activities depending on the separator
        $arrayActivities = explode("-", $result->organism_activities);

        $form['establishment']['establishment_datas']['activities'] = array(
            '#type' => 'checkboxes',
            '#options' => array(
                1 => 'Collecte',
                2 => 'Préparation',
                3 => 'Stockage',
                4 => 'Recueil de données biocliniques',
                5 => 'Recueil de données patients',
                6 => 'Recherche',
                7 => 'Enseignement',
                8 => 'Prestation de collecte',
                9 => 'Prestation de stockage',
                10 => 'Prestations d\'analyses'
            ),
            '#default_value' => $arrayActivities,
            '#title' => t('Activités'),
            '#weight' => 5,
        );


        // Establishment sheet : Complementary activities
        $form['establishment']['establishment_datas']['complementary_activities'] = array(
            '#type' => 'textarea',
            '#title' => t('Activités complémentaires'),
            '#default_value' => $result->organism_activities_more,
            '#weight' => 6,
        );

        // Establishment sheet : Website
        $form['establishment']['establishment_datas']['website'] = array(
            '#type' => 'textfield',
            '#title' => t('Site internet'),
            '#default_value' => $result->organism_website,
            '#weight' => 7,
        );

        // Establishment sheet : Countries
        $query = db_select('countries_list', 'cl');
        $query->fields('cl', array('cl_id', 'cl_name'));
        $resultsCountries = $query->execute();

        $countryList = array();

        foreach ($resultsCountries as $resultCountry) {

            $countryList[$resultCountry->cl_id] = $resultCountry->cl_name;
        }

        $form['establishment']['establishment_datas']['countries'] = array(
            '#type' => 'select',
            '#title' => t('Pays'),
            '#options' => $countryList,
            '#default_value' => $result->organism_country,
            '#weight' => 8,
        );

        // Establishment sheet : Postal code
        $form['establishment']['establishment_datas']['postal_code'] = array(
            '#type' => 'textfield',
            '#title' => t('Code postal'),
            '#default_value' => $result->postal_code,
            '#weight' => 9,
        );

        // Establishment sheet : City
        $form['establishment']['establishment_datas']['city'] = array(
            '#type' => 'textfield',
            '#title' => t('Ville'),
            '#default_value' => $result->city,
            '#weight' => 10,
        );

        // Establishment sheet : Address
        $form['establishment']['establishment_datas']['address'] = array(
            '#type' => 'textfield',
            '#title' => t('Adresse'),
            '#default_value' => $result->address,
            '#weight' => 11,
        );

        // Establishment sheet : Phone
        $form['establishment']['establishment_datas']['phone'] = array(
            '#type' => 'textfield',
            '#title' => t('Téléphone'),
            '#default_value' => $result->organism_phone,
            '#weight' => 12,
        );

        // Establishment sheet : Fax
        $form['establishment']['establishment_datas']['fax'] = array(
            '#type' => 'textfield',
            '#title' => t('Fax'),
            '#default_value' => $result->organism_fax,
            '#weight' => 13,
        );

        // Establishment sheet : Email
        $form['establishment']['establishment_datas']['email'] = array(
            '#type' => 'textfield',
            '#title' => t('Adresse e-mail'),
            '#default_value' => $result->organism_mail,
            '#weight' => 14,
        );

        // Establishment sheet : SIRET
        $form['establishment']['establishment_datas']['siret'] = array(
            '#type' => 'textfield',
            '#title' => t('SIRET'),
            '#default_value' => $result->organism_siret,
            '#weight' => 15,
        );

        // Establishment sheet : APE code
        $form['establishment']['establishment_datas']['APE_code'] = array(
            '#type' => 'textfield',
            '#title' => t('Code APE'),
            '#default_value' => $result->organism_ape_code,
            '#weight' => 16,
        );

        // Establishment sheet : Presentation
        $form['establishment']['establishment_datas']['presentation'] = array(
            '#type' => 'text_format',
            '#title' => t('Présentation de l\'entreprise'),
            '#format' => 'wysiwyg',
            '#default_value' => $result->presentation,
            '#weight' => 17,
        );

        // Establishment image
        $form['establishment']['establishment_datas']['image'] = array(
            '#type' => 'file',
            '#title' => t('Image de l\'organisme'),
            '#weight' => 18,
        );

        // Establishment image preview
            // Fieldset : Image preview
            $form['establishment']['establishment_datas']['image_preview'] = array(
                '#type' => 'fieldset',
                '#title' => t('Preview de l\'image actuelle de l\'organisme'),
                '#collapsible' => TRUE,
                '#collapsed' => TRUE,
                '#weight' => 19,
            );

            // Check if there is path of an image stocked in database
            if(!empty($result->image)){

                // Split the url stock in db
                $image_uri = preg_split("/public:\/\//",$result->image)[1];

                // Establishment sheet : Image preview
                $form['establishment']['establishment_datas']['image_preview']['image'] = array(
                    '#markup' => '<img src="/sites/default/files/' . $image_uri . '" width="500px" height="auto" alt="Image de l\'organisme">',
                    '#weight' => 1,
                );
            }

    /* ---------------------------------------------------------------------------------------------- */

        // Fieldset : Establishment sheet - Establishment coordinator
        $form['establishment']['establishment_coordinator'] = array(
            '#type' => 'fieldset',
            '#title' => t('Coordinateur'),
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            '#weight' => 2,
        );

        // Establishment sheet : Contact civility
        switch($result->organism_contact_civility){
            case "Madame" :
                $result->organism_contact_civility = 0;
                break;
            case "Monsieur" :
                $result->organism_contact_civility = 1;
                break;
        }

        $form['establishment']['establishment_coordinator']['contact_civility'] = array(
            '#type' => 'select',
            '#title' => t('Civilité'),
            '#options' => array(
                0 => t('Madame'),
                1 => t('Monsieur')
            ),
            '#default_value' => $result->organism_contact_civility,
            '#weight' => 0,
        );

        // Establishment sheet : Contact firstname
        $form['establishment']['establishment_coordinator']['contact_firstname'] = array(
            '#type' => 'textfield',
            '#title' => t('Prénom'),
            '#default_value' => $result->organism_contact_firstname,
            '#weight' => 1,
        );

        // Establishment sheet : Contact lastname
        $form['establishment']['establishment_coordinator']['contact_lastname'] = array(
            '#type' => 'textfield',
            '#title' => t('Nom'),
            '#default_value' => $result->organism_contact_lastname,
            '#weight' => 2,
        );

        // Establishment sheet : Contact poste
        $form['establishment']['establishment_coordinator']['contact_poste'] = array(
            '#type' => 'textfield',
            '#title' => t('Poste'),
            '#default_value' => $result->organism_contact_poste,
            '#weight' => 3,
        );

        // Establishment sheet : Contact phone
        $form['establishment']['establishment_coordinator']['contact_phone'] = array(
            '#type' => 'textfield',
            '#title' => t('Téléphone'),
            '#default_value' => $result->organism_contact_phone,
            '#weight' => 4,
        );

        // Establishment sheet : Contact email
        $form['establishment']['establishment_coordinator']['contact_email'] = array(
            '#type' => 'textfield',
            '#title' => t('Adresse e-mail'),
            '#default_value' => $result->organism_contact_email,
            '#weight' => 5,
        );

    /* ---------------------------------------------------------------------------------------------- */

    /* Establishment - Contact datas */

        // Fieldset : BioSample Contact
        $form['establishment']['bs_contact'] = array(
            '#type' => 'fieldset',
            '#title' => 'Contact BioSample',
            '#collapsible' => TRUE,
            '#collapsed' => FALSE,
            '#weight' => 10,
        );

        // BioSample contact civility's
        switch($result->bs_contact_civility){
            case "" :
                $result->bs_contact_civility = 0;
                break;
            case "Madame" :
                $result->bs_contact_civility = 1;
                break;
            case "Monsieur" :
                $result->bs_contact_civility = 2;
                break;
        }

        $form['establishment']['bs_contact']['bs_contact_civility'] = array(
            '#type' => 'select',
            '#title' => t('Civilité du contact BioSample'),
            '#options' => array(
                0 => t('N/A'),
                1 => t('Madame'),
                2 => t('Monsieur'),
            ),
            '#default_value' => $result->bs_contact_civility,
            '#weight' => 11,
        );

        // BioSample contact firstname's
        $form['establishment']['bs_contact']['bs_contact_firstname'] = array(
            '#type' => 'textfield',
            '#title' => t('Prénom du contact BioSample'),
            '#default_value' => $result->bs_contact_firstname,
            '#weight' => 12,
        );

        // BioSample contact lastname's
        $form['establishment']['bs_contact']['bs_contact_lastname'] = array(
            '#type' => 'textfield',
            '#title' => t('Nom du contact BioSample'),
            '#default_value' => $result->bs_contact_lastname,
            '#weight' => 13,
        );

        // BioSample contact e-mail's
        $form['establishment']['bs_contact']['bs_contact_mail'] = array(
            '#type' => 'textfield',
            '#title' => t('Adresse e-mail du contact BioSample'),
            '#default_value' => $result->bs_contact_mail,
            '#weight' => 14,
        );

        // BioSample contact phone number's
        $form['establishment']['bs_contact']['bs_contact_phone'] = array(
            '#type' => 'textfield',
            '#title' => t('Téléphone du contact BioSample'),
            '#default_value' => $result->bs_contact_phone,
            '#weight' => 15,
        );

    }

    // Submit button
    $form['establishment']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Modifier'),
        '#weight' => 20,
    );

    $form['establishment']['submit']['#submit'][] = 'bs_rsb_admin_datas_establishment_form_submit';

    // Delete button
    $form['establishment']['delete'] = array(
        '#type' => 'submit',
        '#value' => t('Delete'),
        '#weight' => 21,
        '#id' => 'bs-cc-admin-delete-establishment',
    );

    $form['establishment']['delete']['#submit'][] = 'bs_rsb_admin_datas_establishment_form_delete';

    return $form;
}

/**
 * Implements bs_rsb_admin_datas_establishment_form_submit()
 *
 * @param $form
 * @param $form_state
 */
function bs_rsb_admin_datas_establishment_form_submit($form, &$form_state){

    // Split the URI to retrieve user id : UID
    $splitted_uri = preg_split("/\//",$_SERVER['REQUEST_URI']);
    // Retrieve the UID
    $url_uid = $splitted_uri[4];

    /* ------------------------------------------------------------------- */
    /* ------------------------------ STATUS ----------------------------- */
    /* ------------------------------------------------------------------- */

    // Change the value stocked for the selected status
    switch($form_state['values']['status']){
        case '0' :
            $form_state['values']['status'] = 'Public';
            break;
        case '1' :
            $form_state['values']['status'] = 'Privé';
            break;
        case '2' :
            $form_state['values']['status'] = 'Mixte';
            break;
    }

    // Change the value stocked for the selected contact civility
    switch($form_state['values']['contact_civility']){
        case '0' :
            $form_state['values']['contact_civility'] = 'Madame';
            break;
        case '1' :
            $form_state['values']['contact_civility'] = 'Monsieur';
            break;
    }

    /* ------------------------------------------------------------------- */
    /* ------------------------ BS Contact Civility ---------------------- */
    /* ------------------------------------------------------------------- */

    // Change the value stocked for the selected bs contact civility
    switch($form_state['values']['bs_contact_civility']){
        case '0' :
            $form_state['values']['bs_contact_civility'] = '';
            break;
        case '1' :
            $form_state['values']['bs_contact_civility'] = 'Madame';
            break;
        case '2' :
            $form_state['values']['bs_contact_civility'] = 'Monsieur';
            break;
    }


    /* ------------------------------------------------------------------------------ */
    /* ---------- Parse activities to retrieve only checkboxes identifier ----------- */
    /* ------------------------------------------------------------------------------ */

    // Initialize string container
    $selectedActivities = "";

    // Foreach on the array
    foreach($form_state['values']['activities'] as $identifier) {
        // If the value is different of 0, the checkbox is checked
        if($identifier != 0)
        {
            // Add to the string container the identifier of the checkbox checked
            // Also add a separator
            $selectedActivities = $selectedActivities . "-" . $identifier;
        }
    }

    /* ------------------------------------------------------------------------------ */
    /* -------------------------- Update datas in database -------------------------- */
    /* ------------------------------------------------------------------------------ */

    // Update establishment sheet datas with the new values.
    db_update('establishment_sheet')
        ->condition('eid', $url_uid, '=')
        ->fields(array(
            'name' => $form_state['values']['name'],
            'address' => $form_state['values']['address'],
            'city' => $form_state['values']['city'],
            'postal_code' => $form_state['values']['postal_code'],
            'status' => $form_state['values']['status'],
            'presentation' => $form_state['values']['presentation']['value'],
            'bs_contact_civility' => $form_state['values']['bs_contact_civility'],
            'bs_contact_firstname' => $form_state['values']['bs_contact_firstname'],
            'bs_contact_lastname' => $form_state['values']['bs_contact_lastname'],
            'bs_contact_mail' => $form_state['values']['bs_contact_mail'],
            'bs_contact_phone' => $form_state['values']['bs_contact_phone'],
//            'organism_type' => $form_state['values']['type'],
            'organism_theme' => $form_state['values']['theme'],
            'organism_activities' => $selectedActivities,
            'organism_activities_more' => $form_state['values']['complementary_activities'],
            'organism_website' => $form_state['values']['website'],
            'organism_country' => $form_state['values']['countries'],
            'organism_phone' => $form_state['values']['phone'],
            'organism_fax' => $form_state['values']['fax'],
            'organism_mail' => $form_state['values']['email'],
            'organism_siret' => $form_state['values']['siret'],
            'organism_ape_code' => $form_state['values']['APE_code'],
            'organism_contact_civility' => $form_state['values']['contact_civility'],
            'organism_contact_firstname' => $form_state['values']['contact_firstname'],
            'organism_contact_lastname' => $form_state['values']['contact_lastname'],
            'organism_contact_poste' => $form_state['values']['contact_poste'],
            'organism_contact_email' => $form_state['values']['contact_email'],
            'organism_contact_phone' => $form_state['values']['contact_phone'],
        ))
        ->execute();

    /* ------------------------------------------------------------------- */
    /* ------------------------------ IMAGE ------------------------------ */
    /* ------------------------------------------------------------------- */

    /*
     * Allow .jpg .png extension
     * Create a path as uploading jpg/png file
     */
    $validators = [
        'file_validate_extensions' => ['jpg png'],
    ];
    if ($file = file_save_upload('image', $validators, file_default_scheme() . '://')) {
        // The file was saved using file_save_upload() and was added to
        // the files table as a temporary file. We'll make a copy and let
        // the garbage collector delete the original upload.
        $path = 'public://img_organismes/' . $url_uid;
        //we check if the we can create the directory
        if (file_prepare_directory($path, FILE_CREATE_DIRECTORY)) {
            $destination = $path . '/' . $file->filename;
            if ($file = file_copy($file, $destination, FILE_EXISTS_REPLACE)) {
                $file->status = FILE_STATUS_PERMANENT;
                file_save($file);
                $form_state['values']['image'] = $destination;
            }
            else {
                form_set_error('image', t('Unable to copy upload file to !dest', ['!dest' => $destination]));
            }
        }
    }

    // If a new image is intended to be set
    if(!empty($form_state['values']['image'])){

        // Retrieve the path of the image stocked in db
        $query = db_select('establishment_sheet', 'es');
        $query->fields('es', array('image'));
        $query->condition('es.eid', $url_uid);
        $result = $query->execute()->fetchAssoc();

        // Delete the path of the image stock in db
        file_unmanaged_delete($result['image']);

        // Insert in db the path of the new image
        db_update('establishment_sheet')
            ->condition('eid', $url_uid, '=')
            ->fields(array(
                'image' => $form_state['values']['image'],
            ))
            ->execute();
    }

}

/**
 * Implements bs_rsb_admin_datas_establishment_form_delete()
 *
 * @param $form
 * @param $form_state
 */
function bs_rsb_admin_datas_establishment_form_delete($form, &$form_state){

    // Split the URI to retrieve user id : UID
    $splitted_uri = preg_split("/\//",$_SERVER['REQUEST_URI']);
    // Retrieve the UID
    $url_uid = $splitted_uri[4];

    db_delete('establishment_sheet')
        ->condition('eid', $url_uid, '=')
        ->execute();
}

/**
 * Implements hook_form()
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function bs_rsb_collections_contact_form($form, $form_state){

    $form['contact']['civility'] = array(
        '#type' => 'select',
        '#empty_option' => t('* Civilité'),
        '#options' => array(
            0 => t('Madame'),
            1 => t('Monsieur'),
        ),
        '#weight' => 1,
        '#required' => TRUE,
    );

    $form['contact']['name'] = array(
        '#type' => 'textfield',
        '#attributes' => array( 'placeholder' => "* Prénom / Nom" ),
        '#weight' => 2,
        '#required' => TRUE,
    );

    $form['contact']['email'] = array(
        '#type' => 'textfield',
        '#attributes' => array( 'placeholder' => "* Adresse email" ),
        '#weight' => 3,
        '#required' => TRUE,
    );

    $form['contact']['poste_service'] = array(
        '#type' => 'textfield',
        '#attributes' => array( 'placeholder' => "Poste / Service" ),
        '#weight' => 4,
    );

    $form['contact']['affiliation_societe'] = array(
        '#type' => 'textfield',
        '#attributes' => array( 'placeholder' => "Affiliation / Société" ),
        '#weight' => 5,
    );

    $form['contact']['siren'] = array(
        '#type' => 'textfield',
        '#attributes' => array( 'placeholder' => "N° SIREN" ),
        '#weight' => 6,
    );

    $form['contact']['postal_code'] = array(
        '#type' => 'textfield',
        '#attributes' => array( 'placeholder' => "Code postal" ),
        '#weight' => 7,
    );

    $form['contact']['phone'] = array(
        '#type' => 'textfield',
        '#attributes' => array( 'placeholder' => "Téléphone" ),
        '#weight' => 8,
    );

    $form['contact']['fax'] = array(
        '#type' => 'textfield',
        '#attributes' => array( 'placeholder' => "Fax" ),
        '#weight' => 9,
    );

    $form['contact']['subject'] = array(
        '#type' => 'textfield',
        '#attributes' => array( 'placeholder' => "Objet" ),
        '#weight' => 10,
    );

    $form['contact']['message'] = array(
        '#type' => 'textarea',
        '#attributes' => array( 'placeholder' => "* Message" ),
        '#weight' => 11,
        '#required' => TRUE,
    );

    $form['contact']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Contacter'),
        '#id' => 'bs-rsb-contact-submit',
        '#weight' => 20,
    );

    $form['contact']['submit']['#validate'][] = 'bs_rsb_collections_contact_form_validate';
    $form['contact']['submit']['#submit'][] = 'bs_rsb_collections_contact_form_submit';

    return $form;
}

/**
 * Implements bs_rsb_collections_contact_form_validate()
 *
 * @param $form
 * @param $form_state
 */
function bs_rsb_collections_contact_form_validate($form, &$form_state){

    if(
        $error = empty($form_state["values"]["civility"]) ||
        $error = empty($form_state["values"]["name"]) ||
        $error = empty($form_state["values"]["email"]) ||
        $error = empty($form_state["values"]["message"])
    ){
        drupal_set_message("Erreur. Au moins un champs à caractère obligatoire n'est pas rempli.");
    }

    if($error = empty($form_state["values"]["name"])){
        form_set_error('name', $error);
    }
    if($error = empty($form_state["values"]["email"])){
        form_set_error('email', $error);
    }
    if($error = empty($form_state["values"]["message"])){
        form_set_error('message', $error);
    }

}

/**
 * Implements bs_rsb_collections_contact_form_submit()
 *
 * @param $form
 * @param $form_state
 */
function bs_rsb_collections_contact_form_submit($form, &$form_state){

    /* ---------------------------------------------------------------------------------- */
    /* ------------------------------ Mail to BioSample --------------------------------- */
    /* ---------------------------------------------------------------------------------- */

    $url = $_SERVER["REQUEST_URI"];
    $urlSplitted = explode("/", $url);

    // Formatting collection name
    $collectionName = $urlSplitted[3];
    $collectionName = str_replace("-", " ", $collectionName);
    $collectionName = ucfirst($collectionName);

    // Retrieve establishment ID
    $establishmentID = $urlSplitted[4];

    // Formatting civility
    switch($form_state['values']['civility']){
        case 0 :
            $form_state['values']['civility'] = "Madame";
            break;
        case 1 :
            $form_state['values']['civility'] = "Monsieur";
            break;
    }

    /* Start - E-mail body */
    $body = "Informations sur la collection : " . "\n" .
        "URL : " . $_SERVER['HTTP_HOST'] . $_SERVER["REQUEST_URI"] . "\n" .
        "Nom de la collection : " . $collectionName . "\n" .
        "Identifiant de l'établissement hébergeant la collection : " . $establishmentID . "\n\n" .
        "----------------------------------------------------------------------------" . "\n\n" .
        "Informations du demandeur : " . "\n" .
        $form_state['values']['civility'] . " " . $form_state['values']['name'] . "\n" .
        "E-mail : " . $form_state['values']['email'] . "\n";

    // Check if poste_service is filled
    if( !empty($form_state['values']['poste_service']) ){
        $body = $body . "Poste / Service : " . $form_state['values']['poste_service'] . "\n";
    }

    // Check if affiliation_societe is filled
    if( !empty($form_state['values']['affiliation_societe']) ){
        $body = $body . "Affiliation / Société : " . $form_state['values']['affiliation_societe'] . "\n";
    }

    // Check if siren is filled
    if( !empty($form_state['values']['siren']) ){
        $body = $body . "N° SIREN : " . $form_state['values']['siren'] . "\n";
    }

    // Check if postal_code is filled
    if( !empty($form_state['values']['postal_code']) ){
        $body = $body . "Code postal : " . $form_state['values']['postal_code'] . "\n";
    }

    // Check if phone is filled
    if( !empty($form_state['values']['phone']) ){
        $body = $body . "Téléphone : " . $form_state['values']['phone'] . "\n";
    }

    // Check if fax is filled
    if( !empty($form_state['values']['fax']) ){
        $body = $body . "Fax : " . $form_state['values']['fax'] . "\n\n";
    }

    // Check if subject is filled
    if( !empty($form_state['values']['subject']) ){
        $body = $body . "Objet : " . $form_state['values']['subject'];
    }

    $body = $body . "\n\n" . "Message : " . $form_state['values']['message'];
    /* End - E-mail body */

    // Mail's parameters
//    $to = "developer.biosample@gmail.com";
//    $from = "developer.biosample@gmail.com";
    $to = "contact@biosample.fr";
    $from = "contact@biosample.fr";

    // Subject of the mail
    $subject = "Demande de contact pour une collection des Ressources Biologiques";

    // Call mail function
    $params = array(
        'subject' => $subject,
        'body' => $body,
    );

    if(drupal_mail('bs_rsb', '10', $to, "fr", $params, $from)){
        drupal_set_message("Votre demande de contact a bien été envoyée.");
    } else {
        drupal_set_message("Erreur, la demande de contact n'a pas abouti.");
    }

    /* ---------------------------------------------------------------------------------- */
    /* -------------------------------- Mail to user ------------------------------------ */
    /* ---------------------------------------------------------------------------------- */

    /* Start - E-mail body */
    $body = "Informations sur la collection : " . "\n" .
        "URL : " . $_SERVER['HTTP_HOST'] . $_SERVER["REQUEST_URI"] . "\n" .
        "Nom de la collection : " . $collectionName . "\n" .
        "----------------------------------------------------------------------------" . "\n\n" .
        "Vos informations : " . "\n" .
        $form_state['values']['civility'] . " " . $form_state['values']['name'] . "\n";

    // Check if poste_service is filled
    if( !empty($form_state['values']['poste_service']) ){
        $body = $body . "Poste / Service : " . $form_state['values']['poste_service'] . "\n";
    }

    // Check if affiliation_societe is filled
    if( !empty($form_state['values']['affiliation_societe']) ){
        $body = $body . "Affiliation / Société : " . $form_state['values']['affiliation_societe'] . "\n";
    }

    // Check if siren is filled
    if( !empty($form_state['values']['siren']) ){
        $body = $body . "N° SIREN : " . $form_state['values']['siren'] . "\n";
    }

    // Check if postal_code is filled
    if( !empty($form_state['values']['postal_code']) ){
        $body = $body . "Code postal : " . $form_state['values']['postal_code'] . "\n";
    }

    // Check if phone is filled
    if( !empty($form_state['values']['phone']) ){
        $body = $body . "Téléphone : " . $form_state['values']['phone'] . "\n";
    }

    // Check if fax is filled
    if( !empty($form_state['values']['fax']) ){
        $body = $body . "Fax : " . $form_state['values']['fax'] . "\n\n";
    }

    // Check if subject is filled
    if( !empty($form_state['values']['subject']) ){
        $body = $body . "Objet : " . $form_state['values']['subject'];
    }

    $body = $body . "\n\n" . "Message : " . $form_state['values']['message'];

    // Mail's parameters
    $to = $form_state['values']['email'];
    $from = $form_state['values']['email'];

    // Subject of the mail
    $subject = "BioSample | Récapitulatif - Demande de contact pour une collection des Ressources Biologiques";

    // Call mail function
    $params = array(
        'subject' => $subject,
        'body' => $body,
    );

    if(drupal_mail('bs_rsb', '20', $to, "fr", $params, $from)){
        drupal_set_message("Un récapitulatif de votre demande a été envoyé sur l'adresse e-mail renseignée.");
    } else {
        drupal_set_message("Erreur, impossible d'envoyer un message à destination de votre adresse e-mail.");
    }

    drupal_goto($_SERVER["REQUEST_URI"]);
}

/**
 * Implementation of hook_mail().
 *
 * A very simple hook_mail() implementation, for module "bsconnexion".
 * This implementation expects to receive a $body, $subject, and $headers
 * inside the $params sent from drupal_mail(), rather than construct
 * those here in the hook.
 * @see drupal_mail()
 */
function bs_rsb_mail($key, &$message, $params) {
    switch ($key) {
        case '10':
            $message['subject'] = $params['subject'];
            $message['body'][] = $params['body'];
            break;
        case '20':
            $message['subject'] = $params['subject'];
            $message['body'][] = $params['body'];
            break;
    }
}

/**
 * Implements hook_form()
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function bs_rsb_admin_filters_manager_form($form, $form_state){

    $form['filters_manager']['info'] = array(
        '#markup' =>
            'Le gestionnaire de filtres ou filters manager permet de vérifier '.
            'si un critère n\'est pas utilisé.<br>'.
            'Si c\'est le cas, alors il est supprimé du vocabulaire auquel il appartient.<br><br>',
        '#weight' => 1,
    );

    $form['filters_manager']['checkbox'] = array(
        '#type' => 'checkbox',
        '#weight' => 2,
        '#title' => 'Suppression des critères non utilisés',
        '#description' => 'Cocher la case si vous souhaitez supprimer les critères inutilisés.'
    );

    $form['filters_manager']['see'] = array(
        '#type' => 'submit',
        '#value' => t('Voir les critères non utilisés'),
        '#weight' => 10,
    );

    $form['filters_manager']['see']['#submit'][] = 'bs_rsb_admin_filters_manager_see_form_submit';

    $form['filters_manager']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Valider'),
        '#weight' => 11,
    );

    $form['filters_manager']['submit']['#submit'][] = 'bs_rsb_admin_filters_manager_form_submit';

    return $form;
}

function bs_rsb_admin_filters_manager_see_form_submit($form, &$form_state){

    $arrayTID = [];
    $arrayToGetUnusedTID = [];

    // Retrieve every table containing "field_data_field_critere..." as table name
    $queryTables = db_select('INFORMATION_SCHEMA.TABLES', 'db');
    $queryTables->fields('db', array('TABLE_NAME'));
    $queryTables->condition('TABLE_NAME', 'field_data_field_critere' . '%', 'LIKE');
    $resultsTables = $queryTables->execute();

    foreach ($resultsTables as $resultTable) {

        // Retrieve every columns of table containing "field_critere..." as column name
        $queryColumns = db_select('INFORMATION_SCHEMA.COLUMNS', 'col');
        $queryColumns->fields('col', array('COLUMN_NAME'));
        $queryColumns->condition('TABLE_SCHEMA', 'biosample' . '%', 'LIKE');
        $queryColumns->condition('TABLE_NAME', $resultTable->TABLE_NAME, '=');
        $queryColumns->condition('COLUMN_NAME', 'field_critere' . '%', 'LIKE');
        $resultsColumns = $queryColumns->execute();

        foreach ($resultsColumns as $resultColumn) {

            // Retrieve the vid
            $toGetVID = explode("field_data_field_critere_", $resultTable->TABLE_NAME)[1];

            $queryVID = db_select('taxonomy_vocabulary', 'tv');
            $queryVID->fields('tv', array('vid'));
            $queryVID->condition('machine_name', 'rb_' . $toGetVID . '%', 'LIKE');
            $resultsVID = $queryVID->execute();

            foreach ($resultsVID as $resultVID) {

                // Retrieve every TID
                $queryAllTID = db_select('taxonomy_term_data', 'ttd');
                $queryAllTID->fields('ttd', array('tid'));
                $queryAllTID->condition('ttd.vid', $resultVID->vid, '=');
                $resultsAllTID = $queryAllTID->execute();

                foreach ($resultsAllTID as $resultAllTID) {

                    // Push every TID into an array
                    $arrayTID[$resultAllTID->tid] = 0;

                    // Retrieve every TID used
                    $columnName = $resultColumn->COLUMN_NAME;

                    $queryTID = db_select($resultTable->TABLE_NAME, 'tb');
                    $queryTID->distinct();
                    $queryTID->fields('tb', array($columnName));
                    $resultsTID = $queryTID->execute();

                    foreach ($resultsTID as $resultTID) {

                        // Check if TID is used
                        if ($resultAllTID->tid == $resultTID->$columnName) {

                            // If it's used : Change value of the TID in the array
                            $arrayTID[$resultAllTID->tid] = 1;
                        }
                    }


                    // Check unused TID that's to say those who have as value 0
                    if ($arrayTID[$resultAllTID->tid] == 0) {

                        // Push unused TID into array
                        array_push($arrayToGetUnusedTID, $resultAllTID->tid);

                    }

                }

            }

        }

    }

    if(empty($arrayToGetUnusedTID)){

        // If there isn't unused TID
        drupal_set_message("Il n'y a aucun critère inutilisé.");

    }else {

        // If there is unused TID
        drupal_set_message("Les critères inutilisés :");

        for ($i = 0; $i < sizeof($arrayToGetUnusedTID); $i++) {

            // Retrieve the name of each criteria depending on its tid
            $queryGetName = db_select('taxonomy_term_data', 'ttd');
            $queryGetName->fields('ttd', array('name'));
            $queryGetName->condition('tid', $arrayToGetUnusedTID[$i], '=');
            $resultsGetName = $queryGetName->execute();

            foreach ($resultsGetName as $resultGetName) {
                drupal_set_message("Critère n° " . $arrayToGetUnusedTID[$i] . " - Nom : " . $resultGetName->name);
            }

        }

    }

}

/**
 * Implements bs_rsb_admin_filters_manager_form_submit()
 *
 * @param $form
 * @param $form_state
 */
function bs_rsb_admin_filters_manager_form_submit($form, &$form_state){

    if($form_state['values']['checkbox'] == 0){
        drupal_set_message("Aucune action n'a été effectuée.");
    }else if($form_state['values']['checkbox'] == 1){

        $arrayTID = [];
        $arrayToDelete = [];

        // Retrieve every table containing "field_data_field_critere..." as table name
        $queryTables = db_select('INFORMATION_SCHEMA.TABLES', 'db');
        $queryTables->fields('db', array('TABLE_NAME'));
        $queryTables->condition('TABLE_NAME', 'field_data_field_critere' . '%', 'LIKE');
        $resultsTables = $queryTables->execute();

        foreach ($resultsTables as $resultTable) {

            // Retrieve every columns of table containing "field_critere..." as column name
            $queryColumns = db_select('INFORMATION_SCHEMA.COLUMNS', 'col');
            $queryColumns->fields('col', array('COLUMN_NAME'));
            $queryColumns->condition('TABLE_SCHEMA', 'biosample' . '%', 'LIKE');
            $queryColumns->condition('TABLE_NAME', $resultTable->TABLE_NAME, '=');
            $queryColumns->condition('COLUMN_NAME', 'field_critere' . '%', 'LIKE');
            $resultsColumns = $queryColumns->execute();

            foreach ($resultsColumns as $resultColumn){

                // Retrieve the vid
                $toGetVID = explode("field_data_field_critere_", $resultTable->TABLE_NAME)[1];

                $queryVID = db_select('taxonomy_vocabulary', 'tv');
                $queryVID->fields('tv', array('vid'));
                $queryVID->condition('machine_name', 'rb_'.$toGetVID.'%', 'LIKE');
                $resultsVID = $queryVID->execute();

                foreach ($resultsVID as $resultVID){

                    // Retrieve every TID
                    $queryAllTID = db_select('taxonomy_term_data', 'ttd');
                    $queryAllTID->fields('ttd', array('tid'));
                    $queryAllTID->condition('ttd.vid', $resultVID->vid, '=');
                    $resultsAllTID = $queryAllTID->execute();

                    foreach ($resultsAllTID as $resultAllTID){

                        // Push every TID into an array
                        $arrayTID[$resultAllTID->tid] = 0;

                        // Retrieve every TID used
                        $columnName = $resultColumn->COLUMN_NAME;

                        $queryTID = db_select($resultTable->TABLE_NAME, 'tb');
                        $queryTID->distinct();
                        $queryTID->fields('tb', array($columnName));
                        $resultsTID = $queryTID->execute();

                        foreach ($resultsTID as $resultTID){

                            // Check if TID is used
                            if($resultAllTID->tid == $resultTID->$columnName){

                                // If it's used : Change value of the TID in the array
                                $arrayTID[$resultAllTID->tid] = 1;
                            }
                        }


                        // Check unused TID that's to say those who have as value 0
                        if($arrayTID[$resultAllTID->tid] == 0){

                            // Push unused TID into array
                            array_push($arrayToDelete, $resultAllTID->tid);

                        }

                    }

                }

            }

        }

        if(empty($arrayToDelete)){

            // If there isn't unused TID to delete
            drupal_set_message("Il n'y a aucun critère inutilisé.");

        }else{

            // If there is unused TID to delete
            for($i = 0 ; $i < sizeof($arrayToDelete) ; $i++){

                db_delete('taxonomy_term_data')
                    ->condition('tid', $arrayToDelete[$i], '=')
                    ->execute();
            }

            drupal_set_message("La suppression des critères inutilisés a bien été pris en compte.");

        }
    }
}

/**
 * Implements hook_form_alter()
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function bs_rsb_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
    // Increase the max cardinality to 10
    $range = drupal_map_assoc(range(1, 10));

    // Add 256 choices
    $new_options = array(FIELD_CARDINALITY_UNLIMITED => t('Unlimited'), 256 => '256') + $range;

    // Change the options
    $form['field']['cardinality']['#options'] = $new_options;
}

/**
 * Implements hook_form_alter()
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function bs_rsb_form_rb_collections_node_form_alter(&$form, &$form_state, $form_id) {

    if(
        user_has_role(2) &&
        !(user_has_role(3) || user_has_role(4) || user_has_role(5))
    ){

        $query = db_select('establishment_sheet', 'es');
        $query->fields('es', array('name', 'status'));
        $query->condition('es.eid', $GLOBALS['user']->uid, '=');
        $resultsUserDatas = $query->execute();

        $organismName = null;
        $organismStatus = null;

        foreach ($resultsUserDatas as $resultUserDatas){

            $organismName = $resultUserDatas->name;
            $organismStatus = $resultUserDatas->status;

        }

        // Formatting organism status
        switch($organismStatus){
            case "Public" :
                $organismStatus = 0;
                break;
            case "Privé" :
                $organismStatus = 1;
                break;
            case "Mixte" :
                $organismStatus = 2;
                break;
        }

        // Set placeholder
        $form['field_critere_nature_des_echanti']['und']['#attributes']['placeholder'] = t('Exemple : Donnée1, Donnée2');

        // Set the establishment status
        $form['field_nom_organisme']['und'][0]['value']['#default_value'] = $organismName;

        // Set the establishment status
        $form['field_statut_organisme']['und']['#default_value'] = $organismStatus;

        // Limit criterias categories to 100 chars
//        $form['field_critere_normes']['und']['#maxlength'] = 100;
    }

}