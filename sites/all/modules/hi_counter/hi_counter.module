<?php

//TODO : [NPE] Clean the code
//TODO : [NPE] Add JS to update the status of pannel

/**
 * @file
 * TODO: Enter file description here.
 */

/**
 * Implements hook_block_info().
 */
function hi_counter_block_info() {
  // This example comes from node.module.
  $blocks['counter'] = array(
    'info' => t('Counter'),
    //'cache' => DRUPAL_CACHE_PER_PAGE
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 */
function hi_counter_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case 'counter':
      $data = hi_counter_get_counter_data();
      if ($data['activate'] == TRUE) {
        $image_file = file_load($data['image']);
        $image_path = '';

        if (isset($image_file->uri)) {
          $image_path = $image_file->uri;
        }
        if ($image_file->uri !== null) {
          $image = theme_image(
            array(
              'path' => $image_path,
              'alt' => t('Counter Image'),
              'attributes' => array('class' => 'hi-counter-image'),
            )
          );
        } else {
          $image = theme_image(
            array(
              'path' => $image_path,
              'alt' => t(''),
              'attributes' => array('class' => 'hi-counter-image'),
            )
          );
        }

        $infos['target'] = number_format($data['target'], 0, null, ' ');
        $infos['image'] = array(
          '#prefix' => '',
          '#type' => 'markup',
          '#markup' => $image,
        );

        $block['content']['#markup'] = theme('hi_counter', $infos);

        $block['content']['#attached']['library'][] = array('system', 'ui.progressbar');
        $block['content']['#attached']['js'][] = array(
          'type' => 'setting',
          'data' => array(
            'target' => $data['target'],
            'master' => variable_get('master', null),
            'reference' => $data['reference']
          )
        );
        $block['content']['#attached']['js'][] = array(
          'data' => drupal_get_path('module', 'hi_counter').'/js/counter.js',
          'type' => 'file'
        );
      }
      break;
  }
  return $block['content'];
}

/**
 * Implements hook_theme().
 */
function hi_counter_theme($existing, $type, $theme, $path) {
  return array(
    'hi_counter' => array(
      'template' => 'theme/hi-counter',
      'path' => drupal_get_path('module', 'hi_counter'),
      'variables' => array('infos' => NULL),
    ),
  );
}

/**
 * Implements hook_form_alter().
 *
 * @todo Remove this when https://www.drupal.org/node/1284642 is fixed in core.
 */
function hi_counter_form_alter(&$form, $form_state, $form_id) {
  if($form_id == 'webform_node_form') {
    hi_counter_infos_form($form);
  }
}

/**
 * Build a FAPI array for editing counter infos.
 *
 * @param array $form
 *   The current FAPI array.
 * @param string $instance
 *   The configuration instance key of the metatags to use, e.g. "node:article".
 * @param array $metatags
 *   An array of metatag data.
 * @param array $options
 *   (optional) An array of options including the following keys and values:
 *   - token types: An array of token types to be passed to theme_token_tree().
 */
function hi_counter_infos_form(array &$form) {
  // Work out the language code to use, default to NONE.
  $langcode = LANGUAGE_NONE;
  if (!empty($form['#entity_type'])) {
    if (!empty($form['#entity'])) {
      $langcode = hi_counter_entity_get_language($form['#entity_type'], $form['#entity']);
    }
    else {
      $entity_info = entity_get_info($form['#entity_type']);
      if (!empty($entity_info['token type'])) {
        $entity_key = '#' . $entity_info['token type'];
        if (!empty($form[$entity_key])) {
          $langcode = hi_counter_entity_get_language($form['#entity_type'], $form[$entity_key]);
        }
      }
    }
  }

  $data = hi_counter_get_counter_data();

  $form['counter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Counter'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#multilingual' => TRUE,
    '#tree' => TRUE,
//    '#access' => user_access('edit meta tags') || user_access('administer meta tags'), TODO: [NPE] Define #access
    '#weight' => 40,
//    '#language' => $langcode,TODO : [NPE] Remove if unnecessary
    '#group' => 'additional_settings',
  );

//  $form['counter'][$langcode]['activate'] = array( TODO : [NPE] Remove if unnecessary
  $form['counter']['activate'] = array(
    '#type' => 'checkbox',
    '#default_value' => isset($data['activate']) ? $data['activate'] : FALSE,
    '#title' => t('Activate'),
  );

  $form['counter']['message'] = array(
    '#markup' => '<br/><p>' . t('The counter will sum up the number of submissions on the checked sites below :') . '</p>',
  );

  $form['counter']['reference'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($data['reference']) ? $data['reference'] : "",
    '#title' => t('Reference'),
    '#description' => t('Set the same reference to all the webforms to sum up on every website (e.g. webform-20170315)'),
  );

  $form['counter']['offline'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($data['offline']) ? $data['offline'] : 0,
    '#title' => t('Offline submissions for this webform'),
    '#description' => t('On each website, you can add manually a number of submissions for offline submissions if they exist'),
  );

  $form['counter']['target'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($data['target']) ? $data['target'] : 1000000,
    '#title' => t('Submissions number target'),
    '#description' => t('Used for the progress bar'),
  );

  $form['counter']['image'] = array(
    '#name' => 'image',
    '#title' => t('Choose an image'),
    '#type' => 'managed_file',
    '#description' => t('The uploaded image will be displayed on this block using the hi_counter image style'),
    '#default_value' => isset($data['image']) ? $data['image'] : 0,
    '#upload_location' => 'public://'
  );
}
//
//function hi_counter_form_submit($form, &$form_state) {
//
//}

//function hi_counter_block_save($delta = '', $edit = array()) {
//  switch($delta) {
//    case 'hi_counter' :
//
//      // Saving the file, setting it to a permanent state, setting a FID variable
//      $file = file_load($edit['file']);
//      $file->status = FILE_STATUS_PERMANENT;
//      file_save($file);
//      $block = block_load('hi_counter', $delta);
//      file_usage_add($file, 'hi_counter', 'block', $block->bid);
//      variable_set('hi_counter_image_fid', $file->fid);
//      break;
//  }
//}

function hi_counter_entity_get_language($entity_type, $entity) {
  // Determine the entity's language, af
  $langcode = entity_language($entity_type, (object) $entity);

  // If no matching language was found, which will happen for e.g. terms and
  // users, it is normally recommended to use the system default language.
  // However, as the system default language can change, this could potentially
  // cause data loss / confusion problems; as a result use the system "no
  // language" value to avoid any potential problems.
  if (empty($langcode)) {
    $langcode = LANGUAGE_NONE;
  }

  return $langcode;
}
function hi_counter_get_counter_data() {
  $node = menu_get_object();
  $data = array();
  if($node &&  $node->type == 'webform') {
    $query = db_select('hi_counter', 'hic')
    ->fields('hic', array('data'))
    ->condition('entity_id', $node->nid)
    ->execute();
    $record = $query->fetchObject();
    $result = unserialize($record->data);

    $data['activate'] = $result['activate'];
    $data['reference'] = $result['reference'];
    $data['offline'] = $result['offline'];
    $data['target'] = $result['target'];
    $data['image'] = $result['image'];
  }
  return $data;
}

/**
 * Implements hook_entity_insert().
 */
function hi_counter_entity_insert($entity, $entity_type) {
  if (isset($entity->counter)) {
    hi_counter_infos_save($entity, $entity_type);
  }
}

/**
 * Implements hook_entity_update().
 */
function hi_counter_entity_update($entity, $entity_type) {
  if (isset($entity->counter)) {
    hi_counter_infos_save($entity, $entity_type);
  }
}

function hi_counter_infos_save($entity, $entity_type) {
  list($entity_id, $revision_id, $bundle) = entity_extract_ids($entity_type, $entity);

  // Determine the entity's language.
  $langcode = entity_language($entity_type, $entity);

  // Unfortunately due to how core works, the normal entity_language()
  // function returns 'und' instead of the node's language during node
  // creation.
  if ((empty($langcode) || $langcode == LANGUAGE_NONE) && !empty($entity->language)) {
    $langcode = $entity->language;
  }

  // If no language was still found, use the 'no language' value.
  if (empty($langcode)) {
    $langcode = LANGUAGE_NONE;
  }

  // Work-around for initial entity creation where a language was selection
  // but where it's different to the form's value.
  if (!isset($entity->counter[$langcode]) && isset($entity->counter[LANGUAGE_NONE])) {
    $entity->counter[$langcode] = $entity->counter[LANGUAGE_NONE];
    unset($entity->counter[LANGUAGE_NONE]);
  }

  $counter = $entity->counter;

  // Add File as permanent and add usage for this node id
  if(isset($counter['image'])) {
    $file = file_load($counter['image']);
    if ($file) {
      $file->status = FILE_STATUS_PERMANENT;
      file_save($file);
      file_usage_add($file, 'hi_counter', $entity_type, $entity_id);
    }
  }

  if (empty($counter)) {
    db_delete('hi_counter')
      ->condition('entity_type', $entity_type)
      ->condition('entity_id', $entity_id)
      ->condition('revision_id', $revision_id)
      ->condition('language', $langcode)
      ->execute();
  } else {
    db_merge('hi_counter')
      ->key(array(
        'entity_type' => $entity_type,
        'entity_id' => $entity_id,
        'language' => $langcode,
        'revision_id' => $revision_id,
      ))
      ->fields(array(
        'data' => serialize($counter),
      ))
      ->execute();
  }
}
