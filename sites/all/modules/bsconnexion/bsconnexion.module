<?php

/**
 * Implement hook_help()
 *
 * @param $path
 * @param $arg
 * @return string
 */
function bsconnexion_help($path, $arg) {
    switch ($path) {
        case 'admin/help#bsconnexion':
            return '<p>' . t('Module for BIOSAMPLE connexion.') . '</p>';
    }
}

/**
 * Implementation of hook_menu()
 *
 * @return array
 */
function bsconnexion_menu(){
    $items = array();

    // When user is connected in URL if you write :
    // user/registrationpassword/user_uid/user_uid/user_uid
    // you've a sentence : You are currently authenticated as user Gael. Change your password
    $items['user/registrationpassword/%/%/%'] = array(
        'title' => 'Confirm account',
        'page callback' => 'drupal_get_form',
        'page arguments' =>
            array('bsconnexion_confirm_account', 2, 3, 4),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'bsconnexion.pages.inc',
    );

    $items['admin/config/system/bsconnexion'] = array(
        'title' => t('BS Connexion Settings'),
        'description' => t('BS Connexion configuration page'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bsconnexion_admin_settings'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/BioSample/user-manager'] = array(
        'title' => t('BS - User manager'),
        'description' => t('BS User manager'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bsconnexion_admin_userlist_form'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/BioSample/cataloguep-manager'] = array(
        'title' => t('BS - Catalogue personnalisé'),
        'description' => t('BS Catalogue personnalisé'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bsconnexion_admin_cataloguep_form'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/BioSample/user-manager/utilisateur/%user/edit'] = array(
        'title' => t('BS - User datas manager'),
        'description' => t('BS User datas manager page'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bsconnexion_admin_datas_user_form'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM,
    );

    // Formulaire d'enregistrement
    $items['signup'] = array(
        'title' => 'S\'ENREGISTRER',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('user_register_form'),
        'access callback' => TRUE
    );

    // Client Account - Profil page
    $items['utilisateur/profil'] = array(
        'page callback' => 'bsconnexion_profil_page_init',
        'access callback' => 'user_is_logged_in',
    );

    // Client Account - Catalogue general page
    $items['utilisateur/catalogueg'] = array(
        'page callback' => 'bsconnexion_profil_page_init',
        'access callback' => 'user_is_logged_in',
    );


    // Client Account - Catalogue personnalise page
    $items['utilisateur/cataloguep'] = array(
        'page callback' => 'bsconnexion_profil_page_init',
        'access callback' => 'user_is_logged_in',
    );

    // Client Account - Factures page
    $items['utilisateur/historique'] = array(
        'page callback' => 'bsconnexion_profil_page_init',
        'access callback' => 'user_is_logged_in',
    );

    // Client Account - Devis page
    $items['utilisateur/devis'] = array(
        'page callback' => 'bsconnexion_profil_page_init',
        'access callback' => 'user_is_logged_in',
    );

    // Client Account - Abonnements page
    $items['utilisateur/abonnements'] = array(
        'page callback' => 'bsconnexion_profil_page_init',
        'access callback' => 'user_is_logged_in',
    );

    return $items;
}

/**
 * bsconnexion_profil_page_init()
 *
 * @see bsconnexion_menu()
 *
 * Function used to allow the creation of utilisateur/ pages
 * and display the name of the page
 */
function bsconnexion_profil_page_init(){
    switch ($_SERVER['REQUEST_URI']) {
        case "/utilisateur/profil":
            $title = "Profil";
            break;
        case "/utilisateur/catalogueg":
            $title = "Catalogue général";
            break;
        case "/utilisateur/cataloguep":
            $title = "Catalogue personnalisé";
            break;
        case "/utilisateur/historique":
            $title = "Historique";
            break;
        case "utiliateur/devis":
            $title = "Devis";
            break;
        case "/utilisateur/abonnements":
            $title = "Abonnements";
            break;
    }

    return "<p hidden class='bs-cc-title-page'>" . $title . "</p>";
}

/**
 * Implement hook_init()
 */
function bsconnexion_init() {
    /**
     * If the page is ...
     * Link css file : bs-cc-devis.css
     * Link js file : bs-cc-devis.js
     */
    if (
        preg_match("/^\/node\/[0-9]{0,5}\/submission\/[0-9]{0,10}$/", $_SERVER["REQUEST_URI"]) ||
        preg_match("/^\/node\/[0-9]{0,5}\/submission\/[0-9]{0,10}\/edit$/", $_SERVER["REQUEST_URI"]) ||
        preg_match("/^\/node\/[0-9]{0,5}\/submission\/[0-9]{0,10}\/delete$/", $_SERVER["REQUEST_URI"])
    ){
        drupal_add_css(drupal_get_path('module', 'bsconnexion') . '/css/bs-cc-devis.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
        drupal_add_js(drupal_get_path('module', 'bsconnexion') . '/js/bs-cc-devis.js');
    }

    /**
     * Check if the user has the role 'authenticated user'
     * and if he hasn't the role 'administrator', 'backoffice' or 'Devops'
     */
    if(
        user_has_role(2) &&
        !(user_has_role(3) || user_has_role(4) || user_has_role(5))
    ){
        /**
         * If the page is /node/nid/submissions
         * or the page is /node/nid/webform-results (when he deletes a submission)
         * Redirect user to /utilisateur/devis
         */
        if(preg_match("/^\/node\/[0-9]{0,5}\/webform-results$/", $_SERVER["REQUEST_URI"])){
            drupal_goto("/utilisateur/devis");
        }

        if(preg_match("/^\/node\/[0-9]{0,5}\/submissions$/", $_SERVER["REQUEST_URI"])){
            drupal_goto("/utilisateur/devis");
        }
    }

    /**
     * If the page is /utilisateur or /utilisateur/
     * Redirect to the page /utilisateur/profil
     */
    if (
        preg_match("/^\/utilisateur$/", $_SERVER["REQUEST_URI"]) ||
        preg_match("/^\/utilisateur\/$/", $_SERVER["REQUEST_URI"])
    ){
        drupal_goto("/utilisateur/profil");
    }

    /**
     * If the page is /utilisateur or /utilisateur/
     * Redirect to the page /utilisateur/profil
     */
    if (
        preg_match("/^\/utilisateur\/signup$/", $_SERVER["REQUEST_URI"]) ||
        preg_match("/^\/user\/signup$/", $_SERVER["REQUEST_URI"])
    ){
        drupal_goto("/signup");
    }
}

/**
 * Implement bsconnexion_admin_userlist_form()
 *
 * @see bsconnexion_admin_datas_user_form()
 */
function bsconnexion_admin_userlist_form($form, &$form_state){

    $header = array(
        'uid' => array('data' => t('uid'), 'field' => 'uef.username'),
        'username' => array('data' => t('Username'), 'field' => 'uef.username'),
        'societe' => array('data' => t('Societe'), 'field' => 'uef.affiliation_societe'),
        'biosample_contact' => array('data' => t('Contact Biosample'), 'field' => 'uef.bscontact_nom'),
        'client_code' => array('data' => t('Code client'), 'field' => 'uef.client_code'),
        'operations' => array('data' => t('Operations')),
    );

    $query = db_select('users_extra_fields', 'uef');
    $query->join('users', 'u', 'u.name = uef.username');
    $query->condition('uef.username', "", '<>');
    user_build_filter_query($query);

    $count_query = clone $query;
    $count_query->addExpression('COUNT(uef.username)');

    $query = $query->extend('PagerDefault')->extend('TableSort');
    $query
        ->fields('uef', array('username', 'affiliation_societe', 'bscontact_nom', 'client_code'))
        ->fields('u', array('uid', 'name'))
        ->limit(50)
        ->orderByHeader($header)
        ->setCountQuery($count_query);
    $result = $query->execute();

    $destination = drupal_get_destination();

    foreach ($result as $account) {

        $options[$account->uid] = array(
            'uid' => $account->uid,
            'username' => $account->username,
            'societe' => $account->affiliation_societe,
            'biosample_contact' => $account->bscontact_nom,
            'client_code' => $account->client_code,
            'operations' => array('data' => array('#type' => 'link', '#title' => t('edit'), '#href' => "admin/BioSample/user-manager/utilisateur/$account->uid/edit", '#options' => array('query' => $destination))),
        );
    }

    $form['accounts'] = array(
        '#type' => 'tableselect',
        '#header' => $header,
        '#options' => $options,
        '#empty' => t('No people available.'),
    );

    return $form;
}

/**
 * Implement bsconnexion_admin_datas_user_form()
 *
 * @see bsconnexion_admin_userlist_form()
 * @see bsconnexion_admin_datas_user_submit()
 */
function bsconnexion_admin_datas_user_form($form, &$form_state){

    // Load a css file
    $form['#attached']['css'] = array(
        drupal_get_path('module', 'bsconnexion') . '/css/bs-cc-admin-user-manager.css',
    );

    // Load a js file
    $form['#attached']['js'] = array(
        drupal_get_path('module', 'bsconnexion') . '/js/bs-cc-admin-user-manager.js',
    );

    // Retrieve the URL
    $global_url = preg_split("/\//", $_SERVER['REQUEST_URI']);
    // Split the URL and retrieve the uid
    $url_uid = $global_url[5];

    // Retrieve datas from the user depending on the uid
    $query = db_select('users', 'u');
    $query->join('users_extra_fields', 'uef', 'uef.username = u.name');
    $query->condition('u.uid', $url_uid, '=');
    $result = $query
        ->fields('u', array('uid'))
//        ->fields('uef', array('username', 'mail', 'affiliation_societe', 'siren', 'adresse', 'code_postal', 'ville', 'civilite', 'nom_prenom', 'poste_service', 'mail_contact', 'telephone', 'fax', 'bscontact_civilite', 'bscontact_nom', 'bscontact_prenom', 'bscontact_mail', 'bscontact_phone', 'client_code', 'payment_method'))
        ->fields('uef', array('username', 'mail', 'affiliation_societe', 'siren', 'adresse', 'code_postal', 'ville', 'civilite', 'nom_prenom', 'poste_service', 'mail_contact', 'telephone', 'fax', 'bscontact_civilite', 'bscontact_nom', 'bscontact_prenom', 'bscontact_mail', 'bscontact_phone', 'payment_method', 'client_code'))
        ->execute();

    foreach ($result as $account_datas) {

        // Change the value of the $account_datas->civilite
        // to print either 0 or 1.
        if($account_datas->civilite == "Madame"){
            $account_datas->civilite = 0;
        }else{
            $account_datas->civilite = 1;
        }

        // Change the value of the $account_datas->bscontact_civilite
        // to print either 1 or 2 or 0.
        if($account_datas->bscontact_civilite == "Madame"){
            $account_datas->bscontact_civilite = 1;
        }elseif($account_datas->bscontact_civilite == "Monsieur"){
            $account_datas->bscontact_civilite = 2;
        }else{
            $account_datas->bscontact_civilite = 0;
        }

    // User's global datas

        $form['admin_update']['user_global_datas'] = array(
            '#type' => 'fieldset',
            '#title' => t('Données globales de l\'utilisateur'),
            '#description' => t(
                'Pour modifier les champs ci-dessous (username et mail), veuillez directement passer 
                par une modification en BDD. Attention : Ces champs doivent absolument être identiques !'
            ),
            '#weight' => 1,
            '#collapsible' => TRUE,
            '#collapsed' => FALSE,
        );

        $form['admin_update']['user_global_datas']['data_username'] = array(
            '#type' => 'textfield',
            '#default_value' => $account_datas->username,
            '#title' => t('Username'),
            '#attributes' => array('disabled' => 'disabled'),
            '#weight' => 1,
        );

        $form['admin_update']['user_global_datas']['data_mail'] = array(
            '#type' => 'textfield',
            '#default_value' => $account_datas->mail,
            '#title' => t('Mail'),
            '#attributes' => array('disabled' => 'disabled'),
            '#weight' => 2,
        );

    // User's company datas

        $form['admin_update']['user_company_datas'] = array(
            '#type' => 'fieldset',
            '#title' => t('Données de contact de l\'entreprise'),
            '#weight' => 1,
            '#collapsible' => TRUE,
            '#collapsed' => FALSE,
        );

        $form['admin_update']['user_company_datas']['data_affiliation_societe'] = array(
            '#type' => 'textfield',
            '#default_value' => $account_datas->affiliation_societe,
            '#title' => t('Name of the company'),
            '#description' => t('Change the company\'s name'),
            '#weight' => 1,
        );

        $form['admin_update']['user_company_datas']['data_siren'] = array(
            '#type' => 'textfield',
            '#default_value' => $account_datas->siren,
            '#title' => t('SIREN of the company'),
            '#description' => t('Change the company\'s SIREN'),
            '#weight' => 2,
        );

        $form['admin_update']['user_company_datas']['data_adresse'] = array(
            '#type' => 'textfield',
            '#default_value' => $account_datas->adresse,
            '#title' => t('Address of the company'),
            '#description' => t('Change the company\'s address'),
            '#weight' => 3,
        );

        $form['admin_update']['user_company_datas']['data_code_postal'] = array(
            '#type' => 'textfield',
            '#default_value' => $account_datas->code_postal,
            '#title' => t('Postal code of the company'),
            '#description' => t('Change the company\'s postal code'),
            '#weight' => 4,
        );

        $form['admin_update']['user_company_datas']['data_ville'] = array(
            '#type' => 'textfield',
            '#default_value' => $account_datas->ville,
            '#title' => t('City of the company'),
            '#description' => t('Change the company\'s city'),
            '#weight' => 5,
        );

    // User contact datas

        $form['admin_update']['user_contact_datas'] = array(
            '#type' => 'fieldset',
            '#title' => t('Données de contact de l\'utilisateur'),
            '#weight' => 2,
            '#collapsible' => TRUE,
            '#collapsed' => FALSE,
        );

        $form['admin_update']['user_contact_datas']['data_civilite'] = array(
            '#type' => 'select',
            '#default_value' => $account_datas->civilite,
            '#options' => array(
                0 => t('Madame'),
                1 => t('Monsieur'),
            ),
            '#title' => t('Civility of the user'),
            '#description' => t('Change the user\'s civility'),
            '#weight' => 1,
        );

        $form['admin_update']['user_contact_datas']['data_nom_prenom'] = array(
            '#type' => 'textfield',
            '#default_value' => $account_datas->nom_prenom,
            '#title' => t('Lastname and firstname of the user'),
            '#description' => t('Change the user\'s lastname and firstname'),
            '#weight' => 2,
        );

        $form['admin_update']['user_contact_datas']['data_poste_service'] = array(
            '#type' => 'textfield',
            '#default_value' => $account_datas->poste_service,
            '#title' => t('Workfield of the user'),
            '#description' => t('Change the user\'s workfield'),
            '#weight' => 3,
        );

        $form['admin_update']['user_contact_datas']['data_mail_contact'] = array(
            '#type' => 'textfield',
            '#default_value' => $account_datas->mail_contact,
            '#title' => t('Mail of the user'),
            '#description' => t('Change the user\'s mail'),
            '#weight' => 4,
        );

        $form['admin_update']['user_contact_datas']['data_telephone'] = array(
            '#type' => 'textfield',
            '#default_value' => $account_datas->telephone,
            '#title' => t('Phone number of the user'),
            '#description' => t('Change the user\'s phone number'),
            '#weight' => 5,
        );

        $form['admin_update']['user_contact_datas']['data_fax'] = array(
            '#type' => 'textfield',
            '#default_value' => $account_datas->fax,
            '#title' => t('Fax number of the user'),
            '#description' => t('Change the user\'s fax number'),
            '#weight' => 6,
        );

        $form['admin_update']['user_contact_datas']['data_payment_method'] = array(
            '#type' => 'textfield',
            '#default_value' => $account_datas->payment_method,
            '#title' => t('Payment method'),
            '#description' => t('Payment method defined by Biosample'),
            '#weight' => 7,
        );

    // User Biosample's contact datas

        $form['admin_update']['user_bscontact_datas'] = array(
            '#type' => 'fieldset',
            '#title' => t('Données du contact Biosample'),
            '#weight' => 3,
            '#collapsible' => TRUE,
            '#collapsed' => FALSE,
        );

        $form['admin_update']['user_bscontact_datas']['data_bscontact_civilite'] = array(
            '#type' => 'select',
            '#default_value' => $account_datas->bscontact_civilite,
            '#id' => 'bs-cc-update-account-civilite',
            '#options' => array(
                0 => t('N/A'),
                1 => t('Madame'),
                2 => t('Monsieur'),
            ),
            '#title' => t('Civility of the Biosample\' contact'),
            '#description' => t('Change the civility of the Biosample\'s contact'),
            '#weight' => 1,
        );

        $form['admin_update']['user_bscontact_datas']['data_bscontact_nom'] = array(
            '#type' => 'textfield',
            '#default_value' => $account_datas->bscontact_nom,
            '#title' => t('Lastname of the Biosample\'s contact'),
            '#description' => t('Change the lastname of the Biosample\'s contact'),
            '#weight' => 2,
        );

        $form['admin_update']['user_bscontact_datas']['data_bscontact_prenom'] = array(
            '#type' => 'textfield',
            '#default_value' => $account_datas->bscontact_prenom,
            '#title' => t('Firstname of the Biosample\'s contact'),
            '#description' => t('Change the firstname of the Biosample\'s contact'),
            '#weight' => 3,
        );

        $form['admin_update']['user_bscontact_datas']['data_bscontact_mail'] = array(
            '#type' => 'textfield',
            '#default_value' => $account_datas->bscontact_mail,
            '#title' => t('Mail address of the Biosample\'s contact'),
            '#description' => t('Change the mail address of the Biosample\'s contact'),
            '#weight' => 4,
        );

        $form['admin_update']['user_bscontact_datas']['data_bscontact_phone'] = array(
            '#type' => 'textfield',
            '#default_value' => $account_datas->bscontact_phone,
            '#title' => t('Phone number of the Biosample\'s contact'),
            '#description' => t('Change the phone number of the Biosample\'s contact'),
            '#weight' => 5,
        );

        // User Biosample's client code

        $form['admin_update']['user_client_code'] = array(
            '#type' => 'fieldset',
            '#title' => t('Code client du contact Biosample'),
            '#weight' => 4,
            '#collapsible' => TRUE,
            '#collapsed' => FALSE,
        );

        $form['admin_update']['user_client_code']['data_client_code'] = array(
            '#type' => 'textfield',
            '#default_value' => $account_datas->client_code,
            '#title' => t('Client code of the Biosample\'s contact'),
            '#description' => t('Change the client code of the Biosample\'s contact'),
            '#weight' => 1,
        );
    }

    $form['admin_update']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Valider'),
        '#weight' => 50,
    );

    $form['admin_update']['delete'] = array(
        '#type' => 'submit',
        '#value' => t('Delete account'),
        '#weight' => 51,
        '#id' => 'bs-cc-admin-update-delete-user',
    );

    $form['admin_update']['submit']['#validate'][] = 'bsconnexion_admin_datas_user_validate';
    $form['admin_update']['submit']['#submit'][] = 'bsconnexion_admin_datas_user_submit';
    $form['admin_update']['delete']['#submit'][] = 'bsconnexion_admin_datas_user_delete_submit';

    return $form;
}

/**
 * Implement bsconnexion_admin_datas_user_delete_submit()
 *
 * @see bsconnexion_admin_datas_user_form()
 */
function bsconnexion_admin_datas_user_delete_submit($form, &$form_state){
    $match_username = $form_state['values']['data_username'];
    $match_affiliation_societe = $form_state['values']['data_affiliation_societe'];

    db_delete('users_extra_fields')
        ->condition('username', $match_username, '=')
        ->execute();

    db_delete('users')
        ->condition('name', $match_username, '=')
        ->execute();

    drupal_set_message("Le compte ".$match_affiliation_societe." a été supprimé.");
}

/**
 * Implement bsconnexion_admin_datas_user_validate()
 *
 * @see bsconnexion_admin_datas_user_form()
 */
function bsconnexion_admin_datas_user_validate($form, $form_state){
    // Code client verification
    $client_code_value = $form_state['values']['data_client_code'];
    if ($error = (!preg_match("/^[A-Z]{3}[0-9]{2}[A-Z]{1}$/",$client_code_value))) {
        // Check if the client code value match with the Regular Expression above
        // Allow alphanumeric
        drupal_set_message(t("Le champ Code client ne respecte pas le format : XXX00X."));
        // Display an error in the affiliation societe field
        form_set_error('data_client_code', $error);
    }
}

/**
 * Implement bsconnexion_admin_datas_user_submit()
 *
 * @see bsconnexion_admin_datas_user_form()
 */
function bsconnexion_admin_datas_user_submit($form, &$form_state){
    // Change the value of the $form_state['values']['data_civilite']
    // to stock either Monsieur or Madame.
    if($form_state['values']['data_civilite'] == 0){
        $form_state['values']['data_civilite'] = "Madame";
    }else{
        $form_state['values']['data_civilite'] = "Monsieur";
    }

    // Change the value of the $form_state['values']['data_bscontact_civilite']
    // to stock either Monsieur or Madame or nothing.
    if($form_state['values']['data_bscontact_civilite'] == 1){
        $form_state['values']['data_bscontact_civilite'] = "Madame";
    }elseif($form_state['values']['data_bscontact_civilite'] == 2){
        $form_state['values']['data_bscontact_civilite'] = "Monsieur";
    }else{
        $form_state['values']['data_bscontact_civilite'] = "";
    }

    // Variable to match for the database update condition.
    $match_username = $form_state['values']['data_username'];

    // Update user's fields with the new values.
    db_update('users_extra_fields')
        ->condition('username', $match_username, '=')
        ->fields(array(
            'affiliation_societe' => $form_state['values']['data_affiliation_societe'],
            'siren' => $form_state['values']['data_siren'],
            'adresse' => $form_state['values']['data_adresse'],
            'code_postal' => $form_state['values']['data_code_postal'],
            'ville' => $form_state['values']['data_ville'],
            'civilite' => $form_state['values']['data_civilite'],
            'nom_prenom' => $form_state['values']['data_nom_prenom'],
            'poste_service' => $form_state['values']['data_poste_service'],
            'mail_contact' => $form_state['values']['data_mail_contact'],
            'telephone' => $form_state['values']['data_telephone'],
            'fax' => $form_state['values']['data_fax'],
            'bscontact_civilite' => $form_state['values']['data_bscontact_civilite'],
            'bscontact_nom' => $form_state['values']['data_bscontact_nom'],
            'bscontact_prenom' => $form_state['values']['data_bscontact_prenom'],
            'bscontact_mail' => $form_state['values']['data_bscontact_mail'],
            'bscontact_phone' => $form_state['values']['data_bscontact_phone'],
            'client_code' => $form_state['values']['data_client_code'],
            'payment_method' => $form_state['values']['data_payment_method'],
        ))
        ->execute();

    drupal_set_message("Les changements ont bien été pris en compte.");
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see user_login()
 * @see user_login_submit()
 */
function bsconnexion_form_user_login_alter(&$form, $form_state, $path) {
    $form['#prefix'] = '<div id="bs-cc-headband"><div id="bs-cc-headband-fields">';

    $form['name'] = array(
        '#type' => 'textfield',
        '#size' => 60,
        '#maxlength' => USERNAME_MAX_LENGTH,
        '#required' => TRUE,
        '#attributes' =>array('placeholder' => t('Adresse mail')),
        '#id' => 'bs-cc-headband-field-username',
        '#prefix' => '<div class="bs-cc-headband-field" id="bs-cc-headband-div-field-username">',
        '#suffix' => '</div>',
        '#weight' => 10,
    );

    $form['pass'] = array(
        '#type' => 'password',
        '#required' => TRUE,
        '#attributes' =>array('placeholder' => t('Password')),
        '#id' => 'bs-cc-headband-field-password',
        '#prefix' => '<div class="bs-cc-headband-field" id="bs-cc-headband-div-field-password">',
        '#suffix' => '</div>',
        '#weight' => 11,
    );

    $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Connexion'),
        '#id' => 'bs-cc-headband-buttons-login',
        '#weight' => 12,
    );

    $form['actions']['submit']['#submit'][] = 'bsconnexion_user_login_submit';

    $form['signup'] = array(
        '#type' => 'button',
        '#value' => t('S\'enregistrer'),
        '#id' => 'bs-cc-headband-buttons-signup',
        '#weight' => 200,
        '#prefix' => '<div id="bs-cc-headband-div-button-signup">',
        '#suffix' => '</div>',
        // IMPORTANT :
        // This button is modified in the js/script.js file.
        // Let's check it because drupal has an issue with the '#type' => 'button'.
        // It returns an input type=submit, and no type=button.
        // So the script.js file, change that.
    );

    $form['#suffix'] = '</div></div>';
}

/**
 * Submit handler for the login form. Load $user object and perform standard login
 * tasks. The user is then redirected to the My Account page. Setting the
 * destination in the query string overrides the redirect.
 */
function bsconnexion_user_login_submit($form, &$form_state) {
    global $user;
    $user = user_load($form_state['uid']);

    $form_state['redirect'] = 'utilisateur/profil';
//    $form_state['redirect'] = 'user/' . $user->uid;

    user_login_finalize($form_state);
}

/**
 * Function when the user is connected, display that.
 */
function bsconnexion_form_user_connected(){
    $result_affiliation_societe = db_query("SELECT affiliation_societe from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();

    $var = '<div id="bs-cc-headband">';
    $var .= '<div id="bs-cc-user-connected">';
    $var .= '<a href="/utilisateur/devis" id="bs-cc-devis"><i class="fa fa-shopping-cart"></i>DEMANDE DE DEVIS</a>';
    $var .= '<p id="bs-cc-user-connected-welcome">Bienvenue&nbsp'.$result_affiliation_societe.'</p>';
    $var .= '<a id="bs-cc-user-connected-profil" href="/utilisateur/profil"><i class="fa fa-user fa-1x" aria-hidden="true"></i></a>';
    $var .= '<a id="bs-cc-user-connected-logout" href="/user/logout"><i class="fa fa-sign-out fa-1x" aria-hidden="true"></i></a>';
    $var .= '</div>';
    $var .= '</div>';

    return $var;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see user_register_form()
 * @see user_account_form()
 * @see user_register_submit()
 * @see bsconnexion_user_register_submit()
 */
function bsconnexion_form_user_register_form_alter(&$form, &$form_state) {

    // Nom d'utilisateur field
    $form['account']['name']['#attributes'] = array('placeholder' => t('* Nom d\'utilisateur'));
    $form['account']['name']['#id'] = 'bs-cc-register-form-name';
    $form['account']['name']['#prefix'] = '<div id="bs-cc-register-form-name-div">';
    $form['account']['name']['#suffix'] = '</div>';
    unset($form['account']['name']['#title']);
    unset($form['account']['name']['#description']);

    // Mail field
    $form['account']['mail']['#attributes'] = array('placeholder' => t('* Adresse mail'));
    $form['account']['mail']['#id'] = 'bs-cc-register-form-mail';
    $form['account']['mail']['#prefix'] = '<div id="bs-cc-register-form-mail-div">';
    $form['account']['mail']['#suffix'] = '<p class="email-disclaimer">Attention : cette adresse sera utilisée pour la connexion.</p></div>';
    $form['account']['mail']['#weight'] = 1;
    unset($form['account']['mail']['#title']);
    unset($form['account']['mail']['#description']);

////////////////////////////////////////////COMPANY///////////////////////////////////////////////////

    $form['account']['label_company'] = array(
        '#type' => 'fieldset',
        '#title' => t('Entreprise'),
        '#weight' => 10,
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
        '#id' => 'bs-cc-register-form-fieldset-company',
    );

    // Affiliation / Société field
    $form['account']['affiliation_societe'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => t('* Affiliation / Société')),
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-affiliationsociete',
        '#prefix' => '<div id="bs-cc-register-form-affiliationsociete-div">',
        '#suffix' => '</div>',
        '#weight' => 11,
    );

    // N° SIREN field
    $form['account']['siren'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => t('* N° SIREN (9 chiffres)')),
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-siren',
        '#prefix' => '<div id="bs-cc-register-form-siren-div">',
        '#suffix' => '</div>',
        '#weight' => 12,
    );

    // Adresse field
    $form['account']['adresse'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => t('* Adresse')),
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-adresse',
        '#prefix' => '<div id="bs-cc-register-form-adresse-div">',
        '#suffix' => '</div>',
        '#weight' => 13,
    );

    // Code postal field
    $form['account']['code_postal'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => t('* Code postal')),
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-codepostal',
        '#prefix' => '<div id="bs-cc-register-form-codepostal-div">',
        '#suffix' => '</div>',
        '#weight' => 13,
    );

    // Ville field
    $form['account']['ville'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => t('* Ville')),
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-ville',
        '#prefix' => '<div id="bs-cc-register-form-ville-div">',
        '#suffix' => '</div>',
        '#weight' => 14,
    );

//////////////////////////////////////////COMPANY'S CONTACT///////////////////////////////////////////

    $form['account']['label_company_contact'] = array(
        '#type' => 'fieldset',
        '#title' => t('Contact dans votre entreprise'),
        '#weight' => 20,
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
        '#id' => 'bs-cc-register-form-fieldset-company-contact',
    );

    // Civilité select field
    $form['account']['civilite'] = array(
        '#type' => 'select',
//        '#default_value' => isset($node->active) ? $node->active : 0,
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-civilite',
        '#empty_option' => t('* Civilité'),
        '#options' => array(
//            0 => t('Civilité'),
            0 => t('Madame'),
            1 => t('Monsieur'),
        ),
        '#prefix' => '<div id="bs-cc-register-form-civilite-div">',
        '#suffix' => '</div>',
        '#weight' => 21,
    );

    // Nom / Prénom field
    $form['account']['nom_prenom'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => t('* Prénom / Nom')),
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-nomprenom',
        '#prefix' => '<div id="bs-cc-register-form-nomprenom-div">',
        '#suffix' => '</div>',
        '#weight' => 22,
    );

    // Poste / Service field
    $form['account']['poste_service'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => t('* Poste / Service')),
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-posteservice',
        '#prefix' => '<div id="bs-cc-register-form-posteservice-div">',
        '#suffix' => '</div>',
        '#weight' => 23,
    );

    // Contact's mail field
    $form['account']['mail_contact'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => t('* Adresse mail du contact')),
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-mail-contact',
        '#prefix' => '<div id="bs-cc-register-form-mail-contact-div">',
        '#suffix' => '</div>',
        '#weight' => 24,
    );

    // Téléphone field
    $form['account']['telephone'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => t('* Téléphone')),
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-telephone',
        '#prefix' => '<div id="bs-cc-register-form-telephone-div">',
        '#suffix' => '</div>',
        '#weight' => 25,
    );

    // Fax field
    $form['account']['fax'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => t('Fax')),
        '#id' => 'bs-cc-register-form-fax',
        '#prefix' => '<div id="bs-cc-register-form-fax-div">',
        '#suffix' => '</div>',
        '#weight' => 26,
    );

//////////////////////////////////////////CONTRATS GENERAUX///////////////////////////////////////////

    // 'J'accepte les Conditions Générales d'Utilisation' checkbox
    $form['account']['CGU'] = array(
        '#type' => 'checkbox',
        '#title' => t('J\'accepte les Conditions Générales d\'Utilisation'),
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-cgu',
        '#prefix' => '<div id="bs-cc-register-form-cgu-div">',
        '#suffix' => '<a href="/conditions-générales-dutilisation" target="_blank">(CGU)</a></div>',
        '#weight' => 27,
    );

    // 'J'accepte les Conditions Générales de Vente' checkbox
    $form['account']['CGV'] = array(
        '#type' => 'checkbox',
        '#title' => t('J\'accepte les Conditions Générales de Vente'),
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-cgv',
        '#prefix' => '<div id="bs-cc-register-form-cgv-div">',
        '#suffix' => '<a href="/condition-générale-de-vente" target="_blank">(CGV)</a></div>',
        '#weight' => 28,
    );

/////////////////////////////////////////////////////////////////////////////////////////////////////

//    // 'Je suis un fournisseur' checkbox
//    $form['account']['im_fournisseur'] = array(
//        '#type' => 'checkbox',
//        '#title' => t('Je suis un fournisseur'),
//        '#id' => 'bs-cc-register-form-imfournisseur',
//        '#prefix' => '<div id="bs-cc-register-form-imfournisseur-div">',
//        '#suffix' => '</div>',
//    );

//////////////////////////////////////////////BUTTONS/////////////////////////////////////////////////

    // Add an ID for the actions container
    $form['actions']['#id'] = 'bs-cc-signup-buttons-div';

    // Cancel button
    $form['actions']['cancel'] = array(
        '#type' => 'button',
        '#value' => t('Cancel'),
        '#id' => 'bs-cc-signup-button-cancel',
        '#weight' => 10,
        // IMPORTANT :
        // This button is modified in the js/script.js file.
        // Let's check it because drupal has an issue with the '#type' => 'button'.
        // It returns an input type=submit, and no type=button.
        // So the script.js file, change that.
    );

    // Submit button
    $form['actions']['submit']['#value'] = t('Valider');
    $form['actions']['submit']['#id'] = 'bs-cc-signup-button-signup';
    $form['actions']['submit']['#weight'] = 20;

    // Declare an other function where to submit datas.
    $form['#validate'][] = 'bsconnexion_user_register_validate';
    $form['#submit'][] = 'bsconnexion_user_register_submit';
}

function bsconnexion_user_register_validate($form, $form_state){
// To set a regex, put your regex inside : "/^ REGEX $/"

// Email verification
    // Retrieve the values of the mail field
    $mail_value = $form_state['values']['mail'];

    $mailIsUsed = db_query("SELECT mail from {users} WHERE mail = :mail", array(":mail" => $mail_value))->fetchField();
    $nameIsUsed = db_query("SELECT name from {users} WHERE name = :mail", array(":mail" => $mail_value))->fetchField();

    if($mail_value == $mailIsUsed && !empty($mail_value)){
        drupal_set_message("Cette adresse mail est déjà utilisée.");
    }else{
        if($error = (!preg_match("/^[A-z0-9_\-\.]+@[A-z-]+\.[A-z]*$/", $mail_value))){
            // Check if the mail value match with the Regular Expression above
//            drupal_set_message(t("L'adresse mail n'est pas valide car elle contient des symboles inappropriés !"));
            // Display an error in the mail field
            form_set_error('mail', $error);
        }else if($error = (preg_match("/^[A-z0-9_\-\.]+@yopmail+\.[A-z]*$/", $mail_value))) {
            // Check if the mail value match with the Regular Expression  above
            drupal_set_message(t("L'adresse mail n'est pas valide. Yopmail n'est pas autorisé."));
            // Display an error in the mail field
            form_set_error('mail', $error);
        }
    }

// Affiliation Societe verification
    $affiliation_societe_value = $form_state['values']['affiliation_societe'];
    if ($error = (!preg_match("/^[A-zÀ-ÿ0-9 ]*$/",$affiliation_societe_value))) {
        // Check if the affiliation societe value match with the Regular Expression above
        // Allow alphanumeric and spaces
//        drupal_set_message(t("Le champ affiliation société n'est pas valide."));
        // Display an error in the affiliation societe field
        form_set_error('affiliation_societe', $error);
    }

// SIREN verification
    $siren_value = $form_state['values']['siren'];
    if($error = (!preg_match("/^[0-9 \-\.]*$/", $siren_value))){
        // Check if the SIREN value match with the Regular Expression above
        // Allow digits, spaces, dashes and dots
//        drupal_set_message(t("Le numéro de SIREN n'est pas valide."));
        // Display an error in the siren field
        form_set_error('siren', $error);
    }

// Code postal verification
    $code_postal_value = $form_state['values']['code_postal'];
    if($error = (!preg_match("/^[0-9 \-\.]*$/", $code_postal_value))){
        // Check if the code postal value match with the Regular Expression above
        // Allow digits, spaces, dashes and dots
//        drupal_set_message(t("Le code postal n'est pas valide."));
        // Display an error in the code postal field
        form_set_error('code_postal', $error);
    }

// Nom Prenom verification
    $nom_prenom_value = $form_state['values']['nom_prenom'];
    if($error = (!preg_match("/^[A-zÀ-ÿ ]*$/", $nom_prenom_value))){
        // Check if the nom prenom value match with the Regular Expression above
        // Allow alphabetic, spaces
//        drupal_set_message(t("Le champ nom, prénom n'est pas valide."));
        // Display an error in the nom prenom field
        form_set_error('nom_prenom', $error);
    }

// Contact's mail verification
    // Retrieve the values of the contact's mail field
    $mail_contact_value = $form_state['values']['mail_contact'];

    if($error = (!preg_match("/^[A-z0-9_\-\.]+@[A-z-]+\.[A-z]*$/", $mail_contact_value))){
        // Check if the contact's mail value match with the Regular Expression above
//        drupal_set_message(t("L'adresse mail du contact n'est pas valide car elle contient des symboles inappropriés !"));
        // Display an error in the contact's mail field
        form_set_error('mail_contact', $error);
    }else if($error = (preg_match("/^[A-z0-9_\-\.]+@yopmail+\.[A-z]*$/", $mail_contact_value))) {
        // Check if the contact's mail value match with the Regular Expression  above
        drupal_set_message(t("L'adresse mail du contact n'est pas valide. Yopmail n'est pas autorisé."));
        // Display an error in the contact's mail field
        form_set_error('mail_contact', $error);
    }

// Phone number verification
    // Retrieve the values of the mail field
    $telephone_value = $form_state['values']['telephone'];
    if($error = (!preg_match("/^[0-9 \(\)\+\-\.]*$/", $telephone_value))){
        // Check if the phone value match with the Regular Expression above
        // Allow digits, space, parenthesis, plus symbol, hyphen, dot
//        drupal_set_message(t("Le numéro de téléphone n'est pas valide."));
        // Display an error in the phone field
        form_set_error('telephone', $error);
    }

// CGU verification
    $cgu_value = $form_state['values']['CGU'];
    if($cgu_value == 0){
        drupal_set_message("Les CGU doivent être approuvées.");
    }

// CGV verification
    $cgv_value = $form_state['values']['CGV'];
    if($cgv_value == 0){
        drupal_set_message("Les CGV doivent être approuvées.");
    }

    if(
        empty($form_state['values']['mail']) ||
        empty($form_state['values']['affiliation_societe']) ||
        empty($form_state['values']['siren']) ||
        empty($form_state['values']['adresse']) ||
        empty($form_state['values']['code_postal']) ||
        empty($form_state['values']['ville']) ||
        empty($form_state['values']['civilite']) ||
        empty($form_state['values']['nom_prenom']) ||
        empty($form_state['values']['poste_service']) ||
        empty($form_state['values']['mail_contact']) ||
        empty($form_state['values']['telephone']) ||
        empty($form_state['values']['CGU']) ||
        empty($form_state['values']['CGV'])
    ){
        drupal_set_message("Il manque des informations obligatoires. Merci de vérifier votre demande.");
    }

}

/**
 * Submit handler for the bsconnexion user registration form.
 *
 * This function is called in the altering registration form
 * as second submit function.
 *
 * @see user_register_form()
 * @see bsconnexion_form_user_register_form_alter()
 */
function bsconnexion_user_register_submit($form, $form_state){

    // Change the value of the $form_state['values']['civilite']
    // to stock either Monsieur or Madame.
    if($form_state['values']['civilite'] == 0){
        $form_state['values']['civilite'] = "Madame";
    }else{
        $form_state['values']['civilite'] = "Monsieur";
    }

    // Insert values of fields that users filled into table users_extra_fields
    // Values are contained in $form_state['values']
    db_insert('users_extra_fields')->fields(
        array(
            'username' => $form_state['values']['name'],
            'mail' => $form_state['values']['mail'],
            'affiliation_societe' => $form_state['values']['affiliation_societe'],
            'siren' => $form_state['values']['siren'],
            'adresse' => $form_state['values']['adresse'],
            'code_postal' => $form_state['values']['code_postal'],
            'ville' => $form_state['values']['ville'],
            'civilite' => $form_state['values']['civilite'],
            'nom_prenom' => $form_state['values']['nom_prenom'],
            'poste_service' => $form_state['values']['poste_service'],
            'mail_contact' => $form_state['values']['mail_contact'],
            'telephone' => $form_state['values']['telephone'],
            'fax' => $form_state['values']['fax'],
        )
    )
        ->execute();
}

/**
 * Implement hook_theme()
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function bsconnexion_theme($existing, $type, $theme, $path) {
    return array(
        'bsconnexion_client_account_menu' => array(
            'template' => 'template/bs-cc-menu',
            'path' => drupal_get_path('module', 'bsconnexion'),
            'variables' => array('infos' => NULL),
        ),

        'bsconnexion_profil' => array(
            'template' => 'template/bs-cc-profil-unchangeable-datas',
            'path' => drupal_get_path('module', 'bsconnexion'),
            'variables' => array('infos' => NULL),
        ),

        'bsconnexion_biosample_contact' => array(
            'template' => 'template/bs-cc-biosample-contact',
            'path' => drupal_get_path('module', 'bsconnexion'),
            'variables' => array('infos' => NULL),
        ),

        'bsconnexion_profil_reset_password' => array(
            'template' => 'template/bs-cc-profil-reset-password',
            'path' => drupal_get_path('module', 'bsconnexion'),
            'variables' => array('infos' => NULL),
        ),

        'bsconnexion_catalogueg' => array(
            'template' => 'template/bs-cc-cg',
            'path' => drupal_get_path('module', 'bsconnexion'),
            'variables' => array('infos' => NULL),
        ),

        'bsconnexion_devis' => array(
            'template' => 'template/bs-cc-devis',
            'path' => drupal_get_path('module', 'bsconnexion'),
            'variables' => array('infos' => NULL),
        ),

        'bsconnexion_cataloguep' => array(
            'template' => 'template/bs-cc-cp',
            'path' => drupal_get_path('module', 'bsconnexion'),
            'variables' => array('infos' => NULL),
        ),
    );
}

/**
 * Implement hook_block_info()
 */
function bsconnexion_block_info() {
    $blocks['user_client_account_menu'] = array(
        'info' => t('Menu compte client'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => "utilisateur/profil\r\nutilisateur/catalogueg\r\nutilisateur/catalogueg/*\r\nutilisateur/cataloguep\r\nutilisateur/historique\r\nutilisateur/devis\r\nutilisateur/abonnements",
        'weight' => 1,
    );
    // This example comes from node.module.
    $blocks['user_profil_unchangeable_datas'] = array(
        'info' => t('Données inchangeables'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => 'utilisateur/profil',
        'weight' => 2,
    );

    $blocks['user_profil_changeable_datas'] = array(
        'info' => t('Données changeables'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => 'utilisateur/profil',
        'weight' => 3,
    );

    $blocks['user_profil_biosample_contact'] = array(
        'info' => t('Biosample contact'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => 'utilisateur/profil',
        'weight' => 4,
    );

    $blocks['user_profil_reset_password'] = array(
        'info' => t('Reset password'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => 'utilisateur/profil',
        'weight' => 5,
    );

    $blocks['user_catalogueg'] = array(
        'info' => t('Catalogue general'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => "utilisateur/catalogueg\r\nutilisateur/catalogueg/*",
        'weight' => 2,
    );

    $blocks['user_devis'] = array(
        'info' => t('Devis'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => "utilisateur/devis",
        'weight' => 2,
    );

    $blocks['user_cataloguep'] = array(
        'info' => t('Catalogue personnalisé'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => "utilisateur/cataloguep\r\nutilisateur/cataloguep/*",
        'weight' => 2,
    );

    return $blocks;
}

/**
 * Implement hook_block_view()
 *
 * @see hook_block_info()
 */
function bsconnexion_block_view($delta = '') {
    $block = array();

    switch ($delta) {
// BLOCK - Client account menu
        case 'user_client_account_menu':
            // Link the template for the client account menu
            $block['content']['#markup'] = theme('bsconnexion_client_account_menu');

            // Link a css file for the client account menu
            $block['content']['#attached']['css'][] = array(
                'data' => drupal_get_path('module', 'bsconnexion').'/css/bs-cc-menu.css',
                'type' => 'file'
            );

            // Link a js file for the client account menu
            $block['content']['#attached']['js'][] = array(
                'data' => drupal_get_path('module', 'bsconnexion').'/js/bs-cc-menu.js',
                'type' => 'file'
            );

            break;

// BLOCK - Client account, profil page, unchangeable datas
        case 'user_profil_unchangeable_datas':

            // Retrieve user's datas from table users_extra_fields in the database
            $result_affiliation_societe = db_query("SELECT affiliation_societe from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();
            $result_siren = db_query("SELECT siren from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();
            $result_code_postal = db_query("SELECT code_postal from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();
            $result_adresse = db_query("SELECT adresse from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();
            $result_ville = db_query("SELECT ville from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();
            $payment_method = db_query("SELECT payment_method from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();
            $client_code = db_query("SELECT client_code from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();

            // Set the retrieved datas in drupal's variables
            $data['affiliation_societe'] = $result_affiliation_societe;
            $data['siren'] = $result_siren;
            $data['code_postal'] = $result_code_postal;
            $data['adresse'] = $result_adresse;
            $data['ville'] = $result_ville;
            $data['payment_method'] = $payment_method;
            $data['client_code'] = $client_code;

            $block['subject'] = t('Informations de la société');
            // Link the template to display datas
            $block['content']['#markup'] = theme('bsconnexion_profil', $data);

            // Link a css file for unchangeable datas in the profil page
            $block['content']['#attached']['css'][] = array(
                'data' => drupal_get_path('module', 'bsconnexion').'/css/bs-cc-profil-datas.css',
                'type' => 'file'
            );

            // Link a js file for unchangeable datas in the profil page
            $block['content']['#attached']['js'][] = array(
                'data' => drupal_get_path('module', 'bsconnexion').'/js/bs-cc-profil-datas.js',
                'type' => 'file'
            );

            break;

// BLOCK - Client account, profil page, changeable datas
        case 'user_profil_changeable_datas':

            $block['subject'] = t('Informations du contact');
            $block['content'] = drupal_get_form('bsconnexion_profil_changeable_datas_form');

            // Link a css file for changeable datas in the profil page
            $block['content']['#attached']['css'][] = array(
                'data' => drupal_get_path('module', 'bsconnexion').'/css/bs-cc-profil-datas.css',
                'type' => 'file'
            );

            // Link a js file for changeable datas in the profil page
            $block['content']['#attached']['js'][] = array(
                'data' => drupal_get_path('module', 'bsconnexion').'/js/bs-cc-profil-datas.js',
                'type' => 'file'
            );

            break;

// BLOCK - Client account, profil page, Your Biosample's contact
        case 'user_profil_biosample_contact':

            // Retrieve user's datas from table users_extra_fields in the database
            $result_bs_contact_civilite = db_query("SELECT bscontact_civilite from {users_extra_fields} WHERE username = :mail", array(":mail" => $GLOBALS['user']->mail))->fetchField();
            $result_bs_contact_nom = db_query("SELECT bscontact_nom from {users_extra_fields} WHERE username = :mail", array(":mail" => $GLOBALS['user']->mail))->fetchField();
            $result_bs_contact_prenom = db_query("SELECT bscontact_prenom from {users_extra_fields} WHERE username = :mail", array(":mail" => $GLOBALS['user']->mail))->fetchField();
            $result_bs_contact_mail = db_query("SELECT bscontact_mail from {users_extra_fields} WHERE username = :mail", array(":mail" => $GLOBALS['user']->mail))->fetchField();
            $result_bs_contact_telephone = db_query("SELECT bscontact_phone from {users_extra_fields} WHERE username = :mail", array(":mail" => $GLOBALS['user']->mail))->fetchField();

            // Set the retrieved datas in drupal's variables
            $data['bs_contact_civilite'] = $result_bs_contact_civilite;
            $data['bs_contact_nom'] = $result_bs_contact_nom;
            $data['bs_contact_prenom'] = $result_bs_contact_prenom;
            $data['bs_contact_mail'] = $result_bs_contact_mail;
            $data['bs_contact_telephone'] = $result_bs_contact_telephone;

            $block['subject'] = t('Votre contact chez Biosample');

            // Link the template to display datas
            $block['content']['#markup'] = theme('bsconnexion_biosample_contact', $data);

            // Link a js file for unchangeable datas in the profil page
            $block['content']['#attached']['css'][] = array(
                'data' => drupal_get_path('module', 'bsconnexion').'/css/bs-cc-biosample-contact.css',
                'type' => 'file'
            );

            break;

// BLOCK - Client account, profil page, Reset password
        case 'user_profil_reset_password':

            $data['url_reset_password'] = $GLOBALS['user']->uid;
            // Link the template to display datas
            $block['content']['#markup'] = theme('bsconnexion_profil_reset_password', $data);

            // Link a css file for reset password in the profil page
            $block['content']['#attached']['css'][] = array(
                'data' => drupal_get_path('module', 'bsconnexion').'/css/bs-cc-reset-password.css',
                'type' => 'file'
            );

            break;

// BLOCK - Client account, catalogueg page
        case 'user_catalogueg':

        /* Start - Retrieve in the table taxonomy_vocabulary the vid of the catalogue_general */

            $vidCatalogueG = db_query("SELECT vid from {taxonomy_vocabulary} WHERE machine_name = :machine_name", array(":machine_name" => "catalogue_general"))->fetchField();

        /* End - Retrieve in the table taxonomy_vocabulary the vid of the catalogue_general */

        /* Start - Retrieve the children element of the selected item */

            $retrieveURI = $_SERVER['REQUEST_URI'];

            $URISplit = preg_split("/\//", $retrieveURI);
            $leafId = $URISplit[sizeof($URISplit)-1];

            $query = db_select('taxonomy_term_data', 'd');
            $query->join('taxonomy_term_hierarchy', 'h', 'd.tid = h.tid');
            $query->fields('d', array('name', 'tid', 'description'));
            $query->condition('d.vid', $vidCatalogueG);
            if ($leafId == "catalogueg" || $leafId == null || empty($leafId)) {
                // Set parent to 0 to select the first level
//                drupal_set_message("leafId == null ou leafId est vide");
                $leafId = 0;
                $query->condition('h.parent', $leafId);
            } else {
//                drupal_set_message("leafId n'est pas null");
                $query->condition('h.parent', $leafId);
            }

            $data['results_cg_datas'] = $query->execute();

            /* End - Retrieve the children element of the selected item */

            /* Start - Retrieve the actual selected item */

            $query = db_select('taxonomy_term_data', 'd');
            $query->join('taxonomy_term_hierarchy', 'h', 'd.tid = h.tid');
            $query->fields('d', array('name', 'tid'));
            $query->fields('h', array('parent'));
            $query->condition('d.vid', $vidCatalogueG);
            $query->condition('d.tid', $leafId);
            $results = $query->execute();

            foreach ($results as $result) {
                $data['nameParent'] = $result->name;
                $data['tidParent'] = $result->tid;
                $tidParentSup = $result->parent;
            }

            /* End - Retrieve the actual selected item */

            /* Start - Retrieve the parent selected item */

            $query = db_select('taxonomy_term_data', 'd');
            $query->join('taxonomy_term_hierarchy', 'h', 'd.tid = h.tid');
            $query->fields('d', array('name', 'tid'));
            $query->fields('h', array('parent'));
            $query->condition('d.vid', $vidCatalogueG);
            $query->condition('d.tid', $tidParentSup);

            $results = $query->execute();

            foreach ($results as $result) {
                $data['name2Parent'] = $result->name;
                $data['tid2Parent'] = $result->tid;
                $tidParentSupSup = $result->parent;
            }

            /* End - Retrieve the parent selected item */

            /* Start - Retrieve the parent selected item */

            $query = db_select('taxonomy_term_data', 'd');
            $query->join('taxonomy_term_hierarchy', 'h', 'd.tid = h.tid');
            $query->fields('d', array('name', 'tid'));
            $query->fields('h', array('parent'));
            $query->condition('d.vid', $vidCatalogueG);
            $query->condition('d.tid', $tidParentSupSup);
            $results = $query->execute();

            foreach ($results as $result) {
                $data['name3Parent'] = $result->name;
                $data['tid3Parent'] = $result->tid;
                $tidParentSupSupSup = $result->parent;
            }

            /* End - Retrieve the parent selected item */

        /* Start - Check if the element is a leaf */

            /* Start - Test to check if the selected element is a leaf or not */

            $query = db_select('taxonomy_term_hierarchy', 'h');
            $query->join('taxonomy_term_data', 'd', 'h.tid = d.tid');
            $query->fields('h', array('tid', 'parent'));
            $query->condition('d.vid', $vidCatalogueG);
            $query->condition('h.parent', $leafId);
            $leafResults = $query->execute();

            foreach ($leafResults as $leafResult) {
                $leafTid = $leafResult->tid;
                $leafParent = $leafResult->tid;
            }

            if (empty($leafTid) && empty($leafParent)) {
//                 drupal_set_message(" ");
//                 drupal_set_message("C'est le dernier enfant !");
                $data['leaf'] = TRUE;
            } else {
//                 drupal_set_message(" ");
//                 drupal_set_message("Ce n'est pas le dernier enfant !");
                $data['leaf'] = FALSE;
            }

            /* End - Test to check if the selected element is a leaf or not */

            /* Start - Retrieve parents datas of the selected element */

            $query = db_select('taxonomy_term_data', 'd');
            $query->join('taxonomy_term_hierarchy', 'h', 'd.tid = h.tid');
            $query->fields('d', array('name', 'tid', 'description'));
            $query->condition('d.vid', $vidCatalogueG);
            if ($data['tid2Parent'] == null || empty($data['tid2Parent'])) {
                // Set tid2Parent to 0 to select the first level
                $data['tid2Parent'] = 0;
                $query->condition('h.parent', $data['tid2Parent']);
            } else {
                $query->condition('h.parent', $data['tid2Parent']);
            }

            $data['results_cg_datas_leaf'] = $query->execute();

            /* End - Retrieve parents datas of the selected element */

        /* End - Check if the element is a leaf */

            // Link the template to display datas
            $block['content']['#markup'] = theme('bsconnexion_catalogueg', $data);

            // Link a css file for catalogueg page
            $block['content']['#attached']['css'][] = array(
                'data' => drupal_get_path('module', 'bsconnexion').'/css/bs-cc-catalogueg.css',
                'type' => 'file'
            );

            // Link a js file for catalogueg page
            $block['content']['#attached']['js'][] = array(
                'data' => drupal_get_path('module', 'bsconnexion').'/js/bs-cc-catalogueg.js',
                'type' => 'file'
            );

            break;

// BLOCK - Client account, devis page
        case 'user_devis':

        /* Start - Query to retrieve submissions */
            $query = db_select('webform_submitted_data', 'wsd');
            $query->join('webform_component', 'wc', 'wc.nid = wsd.nid AND wc.cid = wsd.cid');
            $query->join('webform_submissions', 'ws', 'ws.nid = wsd.nid AND ws.sid = wsd.sid');
            $query->join('node', 'n', 'n.nid = wsd.nid');

            $query->condition('wc.form_key', 'denomination');
            $query->condition('ws.uid', $GLOBALS['user']->uid);
            $query->condition('n.type', 'catalogue_general_feuilles');
            $query->condition('ws.is_draft', '0');

            $query->fields('n', array('title'));
//            $query->fields('ws', array('uid'));
            $query->fields('wsd', array('nid'));
            $query->fields('wsd', array('sid'));
//            $query->fields('wc', array('form_key'));
//            $query->fields('wsd', array('cid'));
            $query->fields('wsd', array('data'));

            $data['results_submissions'] = $query->execute();
        /* End - Query to retrieve submissions */

        /* Start - Query to retrieve submitted submissions */
            $query = db_select('webform_submitted_data', 'wsd');
            $query->join('webform_component', 'wc', 'wc.nid = wsd.nid AND wc.cid = wsd.cid');
            $query->join('webform_submissions', 'ws', 'ws.nid = wsd.nid AND ws.sid = wsd.sid');
            $query->join('node', 'n', 'n.nid = wsd.nid');

            $query->condition('wc.form_key', 'denomination');
            $query->condition('ws.uid', $GLOBALS['user']->uid);
            $query->condition('n.type', 'catalogue_general_feuilles');
            $query->condition('ws.is_draft', '1');

            $query->fields('n', array('title'));
            $query->fields('wsd', array('nid'));
            $query->fields('wsd', array('sid'));
            $query->fields('wsd', array('data'));
            $query->fields('ws', array('submitted'));

            $data['results_submissions_submitted'] = $query->execute();
        /* End - Query to retrieve submitted submissions */

            // Link the template to display datas
            $block['content']['#markup'] = theme('bsconnexion_devis', $data);

            // Link a css file for unchangeable datas in the profil page
            $block['content']['#attached']['css'][] = array(
                'data' => drupal_get_path('module', 'bsconnexion').'/css/bs-cc-devis.css',
                'type' => 'file'
            );
            // Link a js file for unchangeable datas in the profil page
            $block['content']['#attached']['js'][] = array(
                'data' => drupal_get_path('module', 'bsconnexion').'/js/bs-cc-devis.js',
                'type' => 'file'
            );

            break;

// BLOCK - Client account, catalogueg page
        case 'user_cataloguep':

            $query = db_select('bs_cc_catalogue_perso', 'cp');
            $query->fields('cp', array('cp_reference', 'cp_name', 'cp_packaging', 'cp_price', 'cp_unit_price', 'cp_stock', 'cp_image'));
            $query->condition('cp.cp_uid', $GLOBALS['user']->uid);

            $data['results_cataloguep'] = $query->execute();

            // Link the template to display datas
            $block['content']['#markup'] = theme('bsconnexion_cataloguep', $data);

            // Link a css file for cataloguep page
            $block['content']['#attached']['css'][] = array(
                'data' => drupal_get_path('module', 'bsconnexion').'/css/bs-cc-cataloguep.css',
                'type' => 'file'
            );

            // Link a js file for cataloguep page
            $block['content']['#attached']['js'][] = array(
                'data' => drupal_get_path('module', 'bsconnexion').'/js/bs-cc-cataloguep.js',
                'type' => 'file'
            );

            break;

    }
    return $block;
}

function bsconnexion_form_webform_client_form_110_alter(&$form,$form_state,$form_id){
    $form['#validate'][] = 'bsconnexion_form_webform_client_form_110_alter_validate';
}

function bsconnexion_form_webform_client_form_110_alter_validate($form, &$form_state){

// ADRESSE_MAIL verification
    if(!empty($form_state['values']['submitted']['adresse_mail'])){
        if($error = (!preg_match("/^[A-z0-9_\-\.]+@[A-z-]+\.[A-z]*$/", $form_state['values']['submitted']['adresse_mail']))){
            // Check if the mail value match with the Regular Expression above
            drupal_set_message(t("L'adresse mail n'est pas valide !"));
            // Display an error in the mail field
            form_set_error('submitted][adresse_mail', $error);
        }else if($error = (preg_match("/^[A-z0-9_\-\.]+@yopmail+\.[A-z]*$/", $form_state['values']['submitted']['adresse_mail']))) {
            // Check if the mail value match with the Regular Expression  above
            drupal_set_message(t("L'adresse mail n'est pas valide. Yopmail n'est pas autorisé."));
            // Display an error in the mail field
            form_set_error('submitted][adresse_mail', $error);
        }
    }

// SIREN verification
    if($error = (!preg_match("/^[0-9 \-\.]*$/", $form_state['values']['submitted']['ndegsiren___siret']))){
        // Check if the SIREN value match with the Regular Expression above
        // Allow digits, spaces, dashes and dots
        drupal_set_message(t("Le numéro de SIREN n'est pas valide. Seuls les chiffres sont autorisés."));
        // Display an error in the siren field
        form_set_error('submitted][ndegsiren___siret', $error);
    }

// Code postal verification
    if($error = (!preg_match("/^[0-9 \-\.]*$/", $form_state['values']['submitted']['code_postal']))){
        // Check if the code postal value match with the Regular Expression above
        // Allow digits, spaces, dashes and dots
        drupal_set_message(t("Le code postal n'est pas valide. Seuls les chiffres sont autorisés."));
        // Display an error in the code postal field
        form_set_error('submitted][code_postal', $error);
    }

// Empty fields verification
    if(
        empty($form_state['values']['submitted']['civilite']) ||
        empty($form_state['values']['submitted']['nom']) ||
        empty($form_state['values']['submitted']['poste___service']) ||
        empty($form_state['values']['submitted']['adresse_mail']) ||
        empty($form_state['values']['submitted']['ndegsiren___siret']) ||
        empty($form_state['values']['submitted']['affiliation___societe']) ||
        empty($form_state['values']['submitted']['code_postal']) ||
        empty($form_state['values']['submitted']['message'])
    ){
        drupal_set_message("Il manque des informations obligatoires. Merci de vérifier votre demande de contact.");
    }
}

/**
 * Override the user_profile_form
 * Change the form if it's the init password page
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function bsconnexion_form_user_profile_form_alter(&$form,$form_state,$form_id){

    if(
        preg_match("/^\/user\/[0-9]{0,5}\/edit\?pass-reset-token.*$/", $_SERVER["REQUEST_URI"])
    ){
        $form['actions']['submit']['#value'] = t('Initialiser le mot de passe'); //change the submit button text

        $form['#validate'][] = 'bsconnexion_form_user_profile_form_alter_validate';

        $form['#submit'][] = 'bsconnexion_form_user_profile_form_alter_submit';
    }
}

/**
 * @see bsconnexion_form_user_profile_form_alter()
 *
 * @param $form
 * @param $form_state
 */
function bsconnexion_form_user_profile_form_alter_validate($form, &$form_state){

    if($error = (empty($form_state['values']['pass']) ) ) {
        // Check if the password is set
        drupal_set_message(t("Veuillez renseigner les champs."));
        // Display an error in the password field
        form_set_error('pass', $error);
    }

    if($error = (
        (!preg_match("/^(?=.*[a-zà-ÿ])(?=.*[A-ZÀ-Ÿ])(?=.*\d)[A-zà-ÿÀ-Ÿ\d]{6,}$/", $form_state['values']['pass']))
        && (!empty($form_state['values']['pass']))
    )) {
        // Check if the password field is set and match with the Regexp above
        // Minimum 6 char, at least 1 uppercase, 1 lowercase and 1 digit.
        drupal_set_message(t("Le mot de passe doit contenir au minimum 6 caractères, 1 majuscule, 1 minuscule et 1 chiffre."));
        // Display an error in the password field
        form_set_error('pass', $error);
    }
}

/**
 * Redirect to the utilisateur/profil page
 *
 * @see bsconnexion_form_user_profile_form_alter()
 * @see bsconnexion_form_user_profile_form_alter_validate()
 *
 * @param $form
 * @param $form_state
 */
function bsconnexion_form_user_profile_form_alter_submit($form, &$form_state){
    drupal_goto("/utilisateur/profil");
}

/**
 * Update status of the submission
 *
 * @param $primary_tab
 * @param $i
 */
function bsconnexion_update_submissions_values($primary_tab, $i){

    db_update('webform_submissions')
        ->condition('uid', $GLOBALS['user']->uid, '=')
        ->condition('nid', $primary_tab[$i][0], '=')
        ->condition('sid', $primary_tab[$i][1], '=')
        ->fields(array(
            'is_draft' => 1,
            'submitted' => time(),
        ))
        ->execute();
}

/**
 * Function to send quote(s) by email.
 * Check bs-cc-devis.tpl.php
 *
 * @see bsconnexion_mail()
 *
 * @param $url_consult_devis
 */
function bsconnexion_sending_mail($url_consult_devis){

    // Retrieve user's datas from table users_extra_fields in the database
    // To send informations in the mail
    $devis_client_code = db_query("SELECT client_code from {users_extra_fields} WHERE username = :mail", array(":mail" => $GLOBALS['user']->mail))->fetchField();
    $devis_affiliation_societe = db_query("SELECT affiliation_societe from {users_extra_fields} WHERE username = :mail", array(":mail" => $GLOBALS['user']->mail))->fetchField();
    $devis_nom_prenom = db_query("SELECT nom_prenom from {users_extra_fields} WHERE username = :mail", array(":mail" => $GLOBALS['user']->mail))->fetchField();
    $devis_mail_contact = db_query("SELECT mail_contact from {users_extra_fields} WHERE username = :mail", array(":mail" => $GLOBALS['user']->mail))->fetchField();
    $devis_mail = db_query("SELECT mail from {users_extra_fields} WHERE username = :mail", array(":mail" => $GLOBALS['user']->mail))->fetchField();
    $devis_code_postal = db_query("SELECT code_postal from {users_extra_fields} WHERE username = :mail", array(":mail" => $GLOBALS['user']->mail))->fetchField();

    if(empty($devis_client_code)){
        $devis_client_code = "Non attribué";
    }

    // Mail's parameters
    $to = $devis_mail_contact;
    $from = "contact@biosample.fr";

    $subject = $devis_affiliation_societe . " - Demande de devis";
    $body = "Demande de devis : \n\n" .
            "Code client : " . $devis_client_code . "\n" .
            "Société : " . $devis_affiliation_societe . "\n" .
            "Prénom / Nom : " . $devis_nom_prenom . "\n" .
            "Courriel du contact : " . $devis_mail_contact . "\n" .
            "Courriel : " . $devis_mail . "\n" .
            "Code postal : " . $devis_code_postal . "\n" .
            "UID : " . $GLOBALS['user']->uid . "\n\n" .
            "Cliquez sur les liens suivants pour consulter les devis : \n\n" .
            $url_consult_devis;

    // Call mail function
    $params = array(
        'subject' => $subject,
        'body' => $body,
    );

    if(drupal_mail('bsconnexion', '10', $to, "fr", $params, $from)){
        drupal_set_message("Votre demande de devis a bien été envoyée.");
        drupal_goto("/utilisateur/devis");
    } else {
        drupal_set_message("Erreur, votre demande de devis n'a pas abouti.");
        drupal_goto("/utilisateur/devis");
    }
}

/**
 * Implementation of hook_mail().
 *
 * A very simple hook_mail() implementation, for module "bsconnexion".
 * This implementation expects to receive a $body, $subject, and $headers
 * inside the $params sent from drupal_mail(), rather than construct
 * those here in the hook.
 * @see drupal_mail()
 */
function bsconnexion_mail($key, &$message, $params) {
    switch ($key) {
        case '10':
            $message['subject'] = $params['subject'];
            $message['body'][] = $params['body'];
            break;
    }
}

/**
 * Implement bsconnexion_profil_changeable_datas_form()
 *
 * @see hook_block_view()
 * @see bsconnexion_profil_changeable_datas_validate()
 * @see bsconnexion_profil_changeable_datas_submit()
 */
function bsconnexion_profil_changeable_datas_form($form, &$form_state){

    // Retrieve user's datas from table users_extra_fields in the database
    $result_civilite = db_query("SELECT civilite from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();
    $result_nom_prenom = db_query("SELECT nom_prenom from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();
    $result_poste_service = db_query("SELECT poste_service from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();
    $result_mail_contact = db_query("SELECT mail_contact from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();
    $result_telephone = db_query("SELECT telephone from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();
    $result_fax = db_query("SELECT fax from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();

    // Change the value of the $form_state['values']['civilite']
    // to stock either Monsieur or Madame.
    if($result_civilite == "Madame"){
        $result_civilite = 0;
    }else{
        $result_civilite = 1;
    }

    if($result_fax == ""){
        $result_fax = "Non renseigné";
    }

    $form['update_account']['#prefix'] = '<p id="update-account-disclaimer">Pour modifier ces données, cliquez sur le bouton correspondant au(x) champ(s) souhaité(s).</p>';

    // Update account : civilite field
    $form['update_account']['update_civilite'] = array(
        '#type' => 'select',
        '#default_value' => $result_civilite,
        '#id' => 'bs-cc-update-account-civilite',
        '#options' => array(
            0 => t('Madame'),
            1 => t('Monsieur'),
        ),
        '#weight' => 1,
        '#prefix' => '<div id="bs-cc-update-account-civilite-div"><p>Civilité : </p>',
        '#suffix' => '</div>',
    );

    // Update account : nom_prenom field
    $form['update_account']['update_nom_prenom'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => $result_nom_prenom),
        '#id' => 'bs-cc-update-account-nomprenom',
        '#weight' => 2,
        '#prefix' => '<div id="bs-cc-update-account-nomprenom-div"><p>Prénom, Nom : </p>',
        '#suffix' => '</div>',
    );

    // Update account : poste_service field
    $form['update_account']['update_poste_service'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => $result_poste_service),
        '#id' => 'bs-cc-update-account-posteservice',
        '#weight' => 3,
        '#prefix' => '<div id="bs-cc-update-account-posteservice-div"><p>Poste / Service : </p>',
        '#suffix' => '</div>',
    );

    // Update account : mail_contact field
    $form['update_account']['update_mail_contact'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => $result_mail_contact),
        '#id' => 'bs-cc-update-account-mailcontact',
        '#weight' => 4,
        '#prefix' => '<div id="bs-cc-update-account-mailcontact-div"><p>Mail du contact : </p>',
        '#suffix' => '</div>',
    );

    // Update account : telephone field
    $form['update_account']['update_telephone'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => $result_telephone),
        '#id' => 'bs-cc-update-account-telephone',
        '#weight' => 5,
        '#prefix' => '<div id="bs-cc-update-account-telephone-div"><p>Téléphone : </p>',
        '#suffix' => '</div>',
    );

    // Update account : fax field
    $form['update_account']['update_fax'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => $result_fax),
        '#id' => 'bs-cc-update-account-fax',
        '#weight' => 6,
        '#prefix' => '<div id="bs-cc-update-account-fax-div"><p>Fax : </p>',
        '#suffix' => '</div>',
    );

    $form['update_account']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Valider'),
        '#id' => 'bs-cc-update-account-submit',
        '#weight' => 7,
        '#prefix' => '<div id="bs-cc-update-account-submit-div">',
        '#suffix' => '</div>',
    );

    $form['update_account']['submit']['#validate'][] = 'bsconnexion_profil_changeable_datas_validate';
    $form['update_account']['submit']['#submit'][] = 'bsconnexion_profil_changeable_datas_submit';

    return $form;
}

/**
 * Implement bsconnexion_profil_changeable_datas_validate()
 *
 * @see bsconnexion_profil_changeable_datas_form()
 * @see bsconnexion_profil_changeable_datas_submit()
 */
function bsconnexion_profil_changeable_datas_validate($form, $form_state){
// To set a regex, put your regex inside : "/^ REGEX $/"

// Nom Prenom verification
    $update_nom_prenom_value = $form_state['values']['update_nom_prenom'];
    if($error = (!preg_match("/^[A-zÀ-ÿ ]*$/", $update_nom_prenom_value))) {
        // Check if the nom prenom value match with the Regular Expression above
        // Allow alphabetic, spaces
        drupal_set_message(t("Le champ nom, prénom n'est pas valide."));
        // Display an error in the nom prenom field
        form_set_error('update_nom_prenom', $error);
    }

// Contact's mail verification
    // Retrieve the values of the contact's mail field
    $update_mail_contact_value = $form_state['values']['update_mail_contact'];
    if(($error = (!preg_match("/^[A-z0-9_\-\.]+@[A-z-]+\.[A-z]*$/", $update_mail_contact_value))) && $update_mail_contact_value != ""){
        // Check if the contact's mail value match with the Regular Expression above
        drupal_set_message(t("L'adresse mail du contact n'est pas valide car elle contient des symboles inappropriés !"));
        // Display an error in the contact's mail field
        form_set_error('update_mail_contact', $error);
    }else if($error = (preg_match("/^[A-z0-9_\-\.]+@yopmail+\.[A-z]*$/", $update_mail_contact_value))) {
        // Check if the contact's mail value match with the Regular Expression  above
        drupal_set_message(t("L'adresse mail du contact n'est pas valide. Yopmail n'est pas autorisé."));
        // Display an error in the contact's mail field
        form_set_error('update_mail_contact', $error);
    }

// Phone number verification
    // Retrieve the values of the mail field
    $update_telephone_value = $form_state['values']['update_telephone'];
    if($error = (!preg_match("/^[0-9 \(\)\+\-\.]*$/", $update_telephone_value))){
        // Check if the phone value match with the Regular Expression above
        // Allow digits, space, parenthesis, plus symbol, hyphen, dot
        drupal_set_message(t("Le numéro de téléphone n'est pas valide."));
        // Display an error in the phone field
        form_set_error('update_telephone', $error);
    }

// Fax number verification
    // Retrieve the values of the mail field
    $update_fax_value = $form_state['values']['update_fax'];
    if($error = (!preg_match("/^[0-9 \(\)\+\-\.]*$/", $update_fax_value))){
        // Check if the phone value match with the Regular Expression above
        // Allow digits, space, parenthesis, plus symbol, hyphen, dot
        drupal_set_message(t("Le fax n'est pas valide."));
        // Display an error in the phone field
        form_set_error('update_fax', $error);
    }
}

/**
 * Implement bsconnexion_profil_changeable_datas_submit()
 *
 * @see bsconnexion_profil_changeable_datas_form()
 * @see bsconnexion_profil_changeable_datas_validate()
 */
function bsconnexion_profil_changeable_datas_submit($form, &$form_state){

    // Change the value of the $form_state['values']['update_civilite']
    // to stock either Monsieur or Madame.
    if($form_state['values']['update_civilite'] == 0){
        $form_state['values']['update_civilite'] = "Madame";
    }else{
        $form_state['values']['update_civilite'] = "Monsieur";
    }

    // Update civilite data
    db_update('users_extra_fields')
        ->condition('username', $GLOBALS['user']->mail, '=')
        ->fields(array(
            'civilite' => $form_state['values']['update_civilite'],
        ))
        ->execute();

    // Update nom_prenom data
    if($form_state['values']['nom_prenom'] != $form_state['values']['update_nom_prenom']){
        db_update('users_extra_fields')
            ->condition('username', $GLOBALS['user']->mail, '=')
            ->fields(array(
                'nom_prenom' => $form_state['values']['update_nom_prenom'],
            ))
            ->execute();
    }

    // Update poste_service data
    if($form_state['values']['poste_service'] != $form_state['values']['update_poste_service']){
        db_update('users_extra_fields')
            ->condition('username', $GLOBALS['user']->mail, '=')
            ->fields(array(
                'poste_service' => $form_state['values']['update_poste_service'],
            ))
            ->execute();
    }

    // Update mail_contact data
    if($form_state['values']['mail_contact'] != $form_state['values']['update_mail_contact']){
        db_update('users_extra_fields')
            ->condition('username', $GLOBALS['user']->mail, '=')
            ->fields(array(
                'mail_contact' => $form_state['values']['update_mail_contact'],
            ))
            ->execute();
    }

    // Update telephone data
    if($form_state['values']['telephone'] != $form_state['values']['update_telephone']){
        db_update('users_extra_fields')
            ->condition('username', $GLOBALS['user']->mail, '=')
            ->fields(array(
                'telephone' => $form_state['values']['update_telephone'],
            ))
        ->execute();
    }

    // Update fax data
    if($form_state['values']['fax'] != $form_state['values']['update_fax']){
        db_update('users_extra_fields')
            ->condition('username', $GLOBALS['user']->mail, '=')
            ->fields(array(
                'fax' => $form_state['values']['update_fax'],
            ))
            ->execute();
    }
}

/**
 * Implement bsconnexion_admin_cataloguep_form()
 *
 * To manage the catalogue perso
 */
function bsconnexion_admin_cataloguep_form($form, &$form_state){

    /* Import Parameters */
    $form['import'] = array(
        '#type' => 'fieldset',
        '#title' => t("Import et paramètrage de l'import"),
        '#weight' => 0,
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
    );

    $form['import']['file_upload'] = array(
        '#type' => 'file',
        '#title' => t('Importer votre fichier .csv'),
    );

    $form['import']['startline'] = array(
        '#type' => 'textfield',
        '#attributes' => array(
            ' type' => 'number',
        ),
        '#default_value' => '2',
        '#title' => t('Choisir la ligne de départ'),
    );

    /* Advanced Parameters */
    $form['other'] = array(
        '#type' => 'fieldset',
        '#title' => t("Paramètres avancées"),
        '#weight' => 1,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );

    $form['other']['empty'] = array(
        '#type' => 'checkbox',
        '#title' => t('Supprimer TOUTES les données'),
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Envoyer',
        '#weight' => 2,
    );

    $form['submit']['#validate'][] = 'bsconnexion_admin_cataloguep_form_validate';

    return $form;
}

/**
 * Implement bsconnexion_admin_cataloguep_form_validate()
 *
 * @see bsconnexion_admin_cataloguep_form()
 */
function bsconnexion_admin_cataloguep_form_validate($form, &$form_state){
    if ($error = (!preg_match("/^[0-9]*$/", $form_state['values']['startline']))) {
        // Check if the startline value match with the Regular Expression above
        // Allow alphanumeric
        drupal_set_message(t("Le champ doit renseigner un nombre."));
        // Display an error in the startline field
        form_set_error('startline', $error);
    }
}

/**
 * Implement bsconnexion_admin_cataloguep_form_submit()
 *
 * @see bsconnexion_admin_cataloguep_form()
 * @see bsconnexion_admin_cataloguep_form_validate()
 */
function bsconnexion_admin_cataloguep_form_submit($form, &$form_state){
    global $user;

    /*
     * If the checkbox is checked, truncate the table {bs_cc_catalogue_perso}
     */
    if($form_state['values']['empty'] == 1){
        db_truncate('bs_cc_catalogue_perso')->execute();
        drupal_set_message("La table a été vidée.");
    }

    /*
     * Allow .csv extension
     * Create a path as uploading csv file
     */
    $validators = [
        'file_validate_extensions' => ['csv'],
    ];
    if ($file = file_save_upload('file_upload', $validators, file_default_scheme() . '://')) {
        // The file was saved using file_save_upload() and was added to
        // the files table as a temporary file. We'll make a copy and let
        // the garbage collector delete the original upload.
        $path = 'public://csv_import';
        //we check if the we can create the directory
        if (file_prepare_directory($path, FILE_CREATE_DIRECTORY)) {
            $destination = $path . '/' . $file->filename;
            if ($file = file_copy($file, $destination, FILE_EXISTS_REPLACE)) {
                $file->status = FILE_STATUS_PERMANENT;
                file_save($file);
                $form_state['values']['file_upload'] = $destination;
            }
            else {
                form_set_error('file_upload', t('Unable to copy upload file to !dest', ['!dest' => $destination]));
            }
        }
    }
//    else {
//        form_set_error('file_upload', t('No file was uploaded'));
//    }

    /*
     * Retrieve the number of row in the table {bs_cc_catalogue_perso}
     * If there isn't datas set the rowCount to 1, that's to say the cp_id_product to 1
     * And set the $rowCount++ to increment the next cp_id_product
     */
    $rowCount = db_query("SELECT cp_id_product FROM {bs_cc_catalogue_perso}")->rowCount();
    $rowCount++;

    $row = 1;
    if (($handle = fopen($destination, "r")) !== FALSE) {
        while (($data = fgetcsv($handle, 1000, ";")) !== FALSE) {
            /*
             * Retrieve the starting line entered by user in the field 'startline'
             * While this startline isn't reached, increment the $row
             * To start at the right line of the .csv file
             */
            if($row < $form_state['values']['startline']){
                $row ++;
                continue;
            }

            $num = count($data);
            $row++;

            /*
             * Call the function below and pass 3 parameters :
             * $num : Refer to the number of column
             * $data : Refer to the datas contained in each column
             * $rowCount : Refer to the cp_id_product
             */
            _update_from_csv_line($num, $data, $rowCount);

            /* When a row is ended, increment $rowCount */
            $rowCount++;
        }
        fclose($handle);
        drupal_set_message("La données ont bien été importées.");
    }
    $form_state['redirect'] = FALSE;
}

/**
 * Implement _update_from_csv_line()
 *
 * Insert datas from the .csv file
 * to the table {bs_cc_catalogue_perso} in the database
 *
 * @see bsconnexion_admin_cataloguep_form_submit()
 */
function _update_from_csv_line($num, $data, $rowCount){

    for ($c=0; $c < $num; $c++) {

        switch ($c){
            case '0' :
                $val0 = $data[$c];
                break;
            case '1' :
                $val1 = $data[$c];
                break;
            case '2' :
                $val2 = $data[$c];
                break;
            case '3' :
                $val3 = utf8_encode($data[$c]);
                break;
            case '4' :
                $val4 = utf8_encode($data[$c]);
                break;
            case '5' :
                $val5 = $data[$c];
                break;
            case '6' :
                $val6 = $data[$c];
                break;
            case '7' :
                $val7 = $data[$c];
                break;
            case '8' :
                $val8 = $data[$c];
                break;
            default;
        }
    }

    db_insert('bs_cc_catalogue_perso')
        ->fields(array(
            'cp_id_product' => $rowCount,
            'cp_uid' => $val0,
            'cp_client_code' => $val1,
            'cp_reference' => $val2,
            'cp_name' => $val3,
            'cp_packaging' => $val4,
            'cp_price' => $val5,
            'cp_unit_price' => $val6,
            'cp_stock' => $val7,
            'cp_image' => $val8,
        ))
        ->execute();
}
