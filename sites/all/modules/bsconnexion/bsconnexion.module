<?php

/**
 * Implement hook_help()
 *
 * @param $path
 * @param $arg
 * @return string
 */
function bsconnexion_help($path, $arg) {
    switch ($path) {
        case 'admin/help#bsconnexion':
            return '<p>' . t('Module for BIOSAMPLE connexion.') . '</p>';
    }
}

/**
 * Implementation of hook_menu()
 *
 * @return array
 */
function bsconnexion_menu(){
    $items = array();

    // When user is connected in URL if you write :
    // user/registrationpassword/user_uid/user_uid/user_uid
    // you've a sentence : You are currently authenticated as user Gael. Change your password
    $items['user/registrationpassword/%/%/%'] = array(
        'title' => 'Confirm account',
        'page callback' => 'drupal_get_form',
        'page arguments' =>
            array('bsconnexion_confirm_account', 2, 3, 4),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'bsconnexion.pages.inc',
    );

    $items['admin/config/system/bsconnexion'] = array(
        'title' => t('BS Connexion Settings'),
        'description' => t('BS Connexion configuration page'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bsconnexion_admin_settings'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM,
    );

//  // Formulaire de connexion
//  $items['login'] = array(
//      'title' => 'SE CONNECTER',
//      'page callback' => 'drupal_get_form',
//      'page arguments' => array('user_register_form'),
//      'access callback' => TRUE
//  );

    // Formulaire d'enregistrement
    $items['signup'] = array(
        'title' => 'S\'ENREGISTRER',
//    'access callback' => 'user_is_anonymous',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('user_register_form'),
        'access callback' => TRUE
    );

//    $items['profil'] = array(
//        'title' => 'MON PROFIL',
//        'page callback' => 'drupal_get_form',
//        'page arguments' => array('bsconnexion_profil_form'),
//        'access callback' => TRUE
//    );

//    $items['utilisateur/%'] = array(
////        'title' => 'Page de bienvenue',
//        'page callback' => array('bsconnexion_user_connected_profil_menu'),
////        'access callback' => TRUE
//        'access callback' => 'user_is_logged_in',
//    );
//
//    $items['utilisateur/profil'] = array(
//        'title' => 'Page de bienvenue',
////        'page callback' => 'drupal_get_form',
////        'page arguments' => array('bsconnexion_user_connected_profil_form'),
//        'access callback' => 'user_is_logged_in',
//    );

//    $items['utilisateur/profil'] = array(
////        'title' => 'PROFILLLLL',
//        'page callback' => 'drupal_get_form',
//        'page arguments' => array('bsconnexion_user_connected_profil_form'),
//        'access callback' => TRUE
//    );
//
//    $items['utilisateur/catalogueg'] = array(
////        'title' => 'PROFILLLLL',
//        'page callback' => 'drupal_get_form',
//        'page arguments' => array('bsconnexion_user_connected_catalogueg_form'),
//        'access callback' => TRUE
//    );

    return $items;
}

/**
 * Implement hook_admin_settings()
 *
 * @return mixed
 */
function bsconnexion_admin_settings(){
    $form['bsconnexion_bc_text_left_connexion'] = array(
        '#type' => 'textfield',
        '#title' => t('Text in the left of the connexion contains'),
        '#description' => t('Change the text in the left of the connexion contains'),
        '#default_value' => variable_get('bsconnexion_bc_text_left_connexion','Lorem Ipsum'),
    );

    $form['bsconnexion_bc_text_left_connected'] = array(
        '#type' => 'textfield',
        '#title' => t('Text in the left of the connected contains'),
        '#description' => t('Change the text in the left of the connected contains'),
        '#default_value' => variable_get('bsconnexion_bc_text_left_connected','Lorem Ipsum'),
    );

    return system_settings_form($form);
}

// User redirection when the user log in
//function bsconnexion_user_login(&$edit, $account) {
//  $edit['redirect'] = '/contactez-nous';
//}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see user_login()
 * @see user_login_submit()
 */
function bsconnexion_form_user_login_alter(&$form, $form_state, $path) {
    $form['#prefix'] = '<div id="bs-cc-headband"><div id="bs-cc-headband-fields">';

    $form['name'] = array(
        '#type' => 'textfield',
        '#size' => 60,
        '#maxlength' => USERNAME_MAX_LENGTH,
        '#required' => TRUE,
        '#attributes' =>array('placeholder' => t('Adresse mail')),
        '#id' => 'bs-cc-headband-field-username',
        '#prefix' => '<div class="bs-cc-headband-field" id="bs-cc-headband-div-field-username">',
        '#suffix' => '</div>',
    );

    $form['pass'] = array(
        '#type' => 'password',
        '#required' => TRUE,
        '#attributes' =>array('placeholder' => t('Password')),
        '#id' => 'bs-cc-headband-field-password',
        '#prefix' => '<div class="bs-cc-headband-field" id="bs-cc-headband-div-field-password">',
        '#suffix' => '</div>',
    );

    $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Connexion'),
        '#id' => 'bs-cc-headband-buttons-login',
    );

    $form['actions']['submit']['#submit'][] = 'bsconnexion_user_login_submit';

    $form['signup'] = array(
        '#type' => 'button',
        '#value' => t('S\'enregistrer'),
        '#id' => 'bs-cc-headband-buttons-signup',
        '#weight' => 100,
        '#prefix' => '<div id="bs-cc-headband-div-button-signup">',
        '#suffix' => '</div>',
        // IMPORTANT :
        // This button is modified in the js/script.js file.
        // Let's check it because drupal has an issue with the '#type' => 'button'.
        // It returns an input type=submit, and no type=button.
        // So the script.js file, change that.
    );

    $form['#suffix'] = '</div></div>';
}

/**
 * Submit handler for the login form. Load $user object and perform standard login
 * tasks. The user is then redirected to the My Account page. Setting the
 * destination in the query string overrides the redirect.
 */
function bsconnexion_user_login_submit($form, &$form_state) {
    global $user;
    $user = user_load($form_state['uid']);

//    $result_affiliation_societe = db_query("SELECT affiliation_societe from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();

    $form_state['redirect'] = 'utilisateur/profil';
//    $form_state['redirect'] = 'utilisateur/' . $user->uid . '/profil';
//    $form_state['redirect'] = 'user/' . $user->uid;

//    $query = db_select('users', 'u');
//    $query->join('users_extra_fields', 'uef', 'uef.username = u.name');
//    $result = $query
//        ->fields('uef', array('ville'))
//        ->condition('u.uid', $user->uid, '=')
//        ->execute();
//
//    foreach ($result as $row) {
//        $form_state['redirect'] = 'user/' . $row;
//    }

    user_login_finalize($form_state);
}

/* Start - Gael | Function when the user is connected, display that */
function bsconnexion_form_user_connected(){
//    global $user;
//    $user = user_load($form_state['uid']);
//
//    $form_state['redirect'] = 'user/' . $user->uid;

    $result_affiliation_societe = db_query("SELECT affiliation_societe from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();


    $var = '<div id="bs-cc-headband">';
    $var .= '<div id="bs-cc-user-connected">';
    $var .= '<p id="bs-cc-user-connected-welcome">Bienvenue&nbsp'.$result_affiliation_societe.'</p>';
    $var .= '<a id="bs-cc-user-connected-profil" href="/utilisateur/profil"><i class="fa fa-user fa-1x" aria-hidden="true"></i></a>';
//    $var .= '<a id="bs-cc-user-connected-profil" href="/utilisateur/'.$GLOBALS['user']->uid.'/profil"><i class="fa fa-user fa-1x" aria-hidden="true"></i></a>';
    $var .= '<a id="bs-cc-user-connected-logout" href="/user/logout"><i class="fa fa-sign-out fa-1x" aria-hidden="true"></i></a>';
    $var .= '</div>';
    $var .= '</div>';

    return $var;
}

/* End - Gael | Function when the user is connected, display that */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see user_register_form()
 * @see user_account_form()
 * @see user_register_submit()
 * @see bsconnexion_user_register_submit()
 */
function bsconnexion_form_user_register_form_alter(&$form, &$form_state) {

    // Nom d'utilisateur field
    $form['account']['name']['#attributes'] = array('placeholder' => t('* Nom d\'utilisateur'));
    $form['account']['name']['#id'] = 'bs-cc-register-form-name';
    $form['account']['name']['#prefix'] = '<div id="bs-cc-register-form-name-div">';
    $form['account']['name']['#suffix'] = '</div>';
    unset($form['account']['name']['#title']);
    unset($form['account']['name']['#description']);

    // Mail field
    $form['account']['mail']['#attributes'] = array('placeholder' => t('* Adresse mail'));
    $form['account']['mail']['#id'] = 'bs-cc-register-form-mail';
    $form['account']['mail']['#prefix'] = '<div id="bs-cc-register-form-mail-div">';
    $form['account']['mail']['#suffix'] = '<p class="email-disclaimer">Attention : cette adresse sera utilisée pour la connexion.</p></div>';
    $form['account']['mail']['#weight'] = 1;
    unset($form['account']['mail']['#title']);
    unset($form['account']['mail']['#description']);

////////////////////////////////////////////COMPANY///////////////////////////////////////////////////

    $form['account']['label_company'] = array(
        '#type' => 'fieldset',
        '#title' => t('Entreprise'),
        '#weight' => 10,
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
        '#id' => 'bs-cc-register-form-fieldset-company',
    );

    // Affiliation / Société field
    $form['account']['affiliation_societe'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => t('* Affiliation / Société')),
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-affiliationsociete',
        '#prefix' => '<div id="bs-cc-register-form-affiliationsociete-div">',
        '#suffix' => '</div>',
        '#weight' => 11,
    );

    // N° SIREN field
    $form['account']['siren'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => t('* N° SIREN (9 chiffres)')),
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-siren',
        '#prefix' => '<div id="bs-cc-register-form-siren-div">',
        '#suffix' => '</div>',
        '#weight' => 12,
    );

    // Adresse field
    $form['account']['adresse'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => t('* Adresse')),
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-adresse',
        '#prefix' => '<div id="bs-cc-register-form-adresse-div">',
        '#suffix' => '</div>',
        '#weight' => 13,
    );

    // Code postal field
    $form['account']['code_postal'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => t('* Code postal')),
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-codepostal',
        '#prefix' => '<div id="bs-cc-register-form-codepostal-div">',
        '#suffix' => '</div>',
        '#weight' => 13,
    );

    // Ville field
    $form['account']['ville'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => t('* Ville')),
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-ville',
        '#prefix' => '<div id="bs-cc-register-form-ville-div">',
        '#suffix' => '</div>',
        '#weight' => 14,
    );

//////////////////////////////////////////COMPANY'S CONTACT///////////////////////////////////////////

    $form['account']['label_company_contact'] = array(
        '#type' => 'fieldset',
        '#title' => t('Contact dans votre entreprise'),
        '#weight' => 20,
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
        '#id' => 'bs-cc-register-form-fieldset-company-contact',
    );

    // Civilité select field
    $form['account']['civilite'] = array(
        '#type' => 'select',
//        '#default_value' => isset($node->active) ? $node->active : 0,
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-civilite',
        '#options' => array(
//            0 => t('Civilité'),
            0 => t('Madame'),
            1 => t('Monsieur'),
        ),
        '#prefix' => '<div id="bs-cc-register-form-civilite-div">',
        '#suffix' => '</div>',
        '#weight' => 21,
    );

    // Nom / Prénom field
    $form['account']['nom_prenom'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => t('* Nom / Prénom')),
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-nomprenom',
        '#prefix' => '<div id="bs-cc-register-form-nomprenom-div">',
        '#suffix' => '</div>',
        '#weight' => 22,
    );

    // Poste / Service field
    $form['account']['poste_service'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => t('* Poste / Service')),
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-posteservice',
        '#prefix' => '<div id="bs-cc-register-form-posteservice-div">',
        '#suffix' => '</div>',
        '#weight' => 23,
    );

    // Contact's mail field
    $form['account']['mail_contact'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => t('* Adresse mail du contact')),
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-mail-contact',
        '#prefix' => '<div id="bs-cc-register-form-mail-contact-div">',
        '#suffix' => '</div>',
        '#weight' => 24,
    );

    // Téléphone field
    $form['account']['telephone'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => t('* Téléphone')),
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-telephone',
        '#prefix' => '<div id="bs-cc-register-form-telephone-div">',
        '#suffix' => '</div>',
        '#weight' => 25,
    );

    // Fax field
    $form['account']['fax'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => t('Fax')),
        '#id' => 'bs-cc-register-form-fax',
        '#prefix' => '<div id="bs-cc-register-form-fax-div">',
        '#suffix' => '</div>',
        '#weight' => 26,
    );

//////////////////////////////////////////CONTRATS GENERAUX///////////////////////////////////////////

    // 'J'accepte les Conditions Générales d'Utilisation' checkbox
    $form['account']['CGU'] = array(
        '#type' => 'checkbox',
        '#title' => t('J\'accepte les Conditions Générales d\'Utilisation (CGU)'),
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-cgu',
        '#prefix' => '<div id="bs-cc-register-form-cgu-div">',
        '#suffix' => '</div>',
        '#weight' => 27,
    );

    // 'J'accepte les Conditions Générales de Vente' checkbox
    $form['account']['CGV'] = array(
        '#type' => 'checkbox',
        '#title' => t('J\'accepte les Conditions Générales de Vente (CGV)'),
        '#required' => TRUE,
        '#id' => 'bs-cc-register-form-cgv',
        '#prefix' => '<div id="bs-cc-register-form-cgv-div">',
        '#suffix' => '</div>',
        '#weight' => 28,
    );

/////////////////////////////////////////////////////////////////////////////////////////////////////

//    // 'Je suis un fournisseur' checkbox
//    $form['account']['im_fournisseur'] = array(
//        '#type' => 'checkbox',
//        '#title' => t('Je suis un fournisseur'),
//        '#id' => 'bs-cc-register-form-imfournisseur',
//        '#prefix' => '<div id="bs-cc-register-form-imfournisseur-div">',
//        '#suffix' => '</div>',
//    );

//////////////////////////////////////////////BUTTONS/////////////////////////////////////////////////

    // Add an ID for the actions container
    $form['actions']['#id'] = 'bs-cc-signup-buttons-div';

    // Cancel button
    $form['actions']['cancel'] = array(
        '#type' => 'button',
        '#value' => t('Cancel'),
        '#id' => 'bs-cc-signup-button-cancel',
        '#weight' => 10,
        // IMPORTANT :
        // This button is modified in the js/script.js file.
        // Let's check it because drupal has an issue with the '#type' => 'button'.
        // It returns an input type=submit, and no type=button.
        // So the script.js file, change that.
    );

    // Submit button
    $form['actions']['submit']['#value'] = t('Valider');
    $form['actions']['submit']['#id'] = 'bs-cc-signup-button-signup';
    $form['actions']['submit']['#weight'] = 20;

    // Declare an other function where to submit datas.
    $form['#validate'][] = 'bsconnexion_user_register_validate';
    $form['#submit'][] = 'bsconnexion_user_register_submit';
}

function bsconnexion_user_register_validate($form, $form_state){
// To set a regex, put your regex inside : "/^ REGEX $/"

//// Username verification
//    // Retrieve the values of the username field
//    $name_value = $form_state['values']['name'];
//    if ($error = (!preg_match("/^[a-zA-Z0-9 ]*$/",$name_value))) {
//        // Check if the username value match with the Regular Expression above
//        // Allow alphanumeric and spaces
//        drupal_set_message(t("Le nom d'utilisateur n'est pas valide."));
//        // Display an error in the username field
//        form_set_error('name', $error);
//    }

// Email verification
    // Retrieve the values of the mail field
    $mail_value = $form_state['values']['mail'];
    if($error = (!preg_match("/^[a-zA-Z0-9_\-\.]+@[a-zA-Z-]+\.[a-z]{2,3}$/", $mail_value))){
        // Check if the mail value match with the Regular Expression above
        drupal_set_message(t("L'adresse mail n'est pas valide car elle contient des symboles inappropriés !"));
        // Display an error in the mail field
        form_set_error('mail', $error);
    }else if($error = (preg_match("/^[a-zA-Z0-9_\-\.]+@yopmail+\.[a-z]{2,3}$/", $mail_value))) {
        // Check if the mail value match with the Regular Expression  above
        drupal_set_message(t("L'adresse mail n'est pas valide. Yopmail n'est pas autorisé."));
        // Display an error in the mail field
        form_set_error('mail', $error);
    }

// Affiliation Societe verification
    $affiliation_societe_value = $form_state['values']['affiliation_societe'];
    if ($error = (!preg_match("/^[a-zA-Z0-9 ]*$/",$affiliation_societe_value))) {
        // Check if the affiliation societe value match with the Regular Expression above
        // Allow alphanumeric and spaces
        drupal_set_message(t("Le champ affiliation société n'est pas valide."));
        // Display an error in the affiliation societe field
        form_set_error('affiliation_societe', $error);
    }

// SIREN verification
    $siren_value = $form_state['values']['siren'];
    if($error = (!preg_match("/^[0-9]*$/", $siren_value))){
        // Check if the SIREN value match with the Regular Expression above
        // Allow digits
        drupal_set_message(t("Le numéro de SIREN n'est pas valide."));
        // Display an error in the siren field
        form_set_error('siren', $error);
    }

// Code postal verification
    $code_postal_value = $form_state['values']['code_postal'];
    if($error = (!preg_match("/^[0-9 ]*$/", $code_postal_value))){
        // Check if the code postal value match with the Regular Expression above
        // Allow digits, spaces
        drupal_set_message(t("Le code postal n'est pas valide."));
        // Display an error in the code postal field
        form_set_error('code_postal', $error);
    }

// Nom Prenom verification
    $nom_prenom_value = $form_state['values']['nom_prenom'];
    if($error = (!preg_match("/^[a-zA-Z ]*$/", $nom_prenom_value))){
        // Check if the nom prenom value match with the Regular Expression above
        // Allow alphabetic, spaces
        drupal_set_message(t("Le champ nom, prénom n'est pas valide."));
        // Display an error in the nom prenom field
        form_set_error('nom_prenom', $error);
    }

// Contact's mail verification
    // Retrieve the values of the contact's mail field
    $mail_contact_value = $form_state['values']['mail_contact'];
    if($error = (!preg_match("/^[a-zA-Z0-9_\-\.]+@[a-zA-Z-]+\.[a-z]{2,3}$/", $mail_contact_value))){
        // Check if the contact's mail value match with the Regular Expression above
        drupal_set_message(t("L'adresse mail du contact n'est pas valide car elle contient des symboles inappropriés !"));
        // Display an error in the contact's mail field
        form_set_error('mail_contact', $error);
    }else if($error = (preg_match("/^[a-zA-Z0-9_\-\.]+@yopmail+\.[a-z]{2,3}$/", $mail_contact_value))) {
        // Check if the contact's mail value match with the Regular Expression  above
        drupal_set_message(t("L'adresse mail du contact n'est pas valide. Yopmail n'est pas autorisé."));
        // Display an error in the contact's mail field
        form_set_error('mail_contact', $error);
    }

// Phone number verification
    // Retrieve the values of the mail field
    $telephone_value = $form_state['values']['telephone'];
    if($error = (!preg_match("/^[0-9 \(\)\+\-\.]*$/", $telephone_value))){
        // Check if the phone value match with the Regular Expression above
        // Allow digits, space, parenthesis, plus symbol, hyphen, dot
        drupal_set_message(t("Le numéro de téléphone n'est pas valide."));
        // Display an error in the phone field
        form_set_error('telephone', $error);
    }

// CGU verification
    $cgu_value = $form_state['values']['CGU'];
    if($cgu_value == 0){
        drupal_set_message("Le CGU doit être approuvé.");
    }

// CGV verification
    $cgv_value = $form_state['values']['CGV'];
    if($cgv_value == 0){
        drupal_set_message("Le CGV doit être approuvé.");
    }
}

/**
 * Submit handler for the bsconnexion user registration form.
 *
 * This function is called in the altering registration form
 * as second submit function.
 *
 * @see user_register_form()
 * @see bsconnexion_form_user_register_form_alter()
 */
function bsconnexion_user_register_submit($form, $form_state){
    global $user;

    // Change the value of the $form_state['values']['civilite']
    // to stock either Monsieur or Madame.
    if($form_state['values']['civilite'] == 0){
        $form_state['values']['civilite'] = "Madame";
    }else{
        $form_state['values']['civilite'] = "Monsieur";
    }

    // Insert values of fields that users filled into table users_extra_fields
    // Values are contained in $form_state['values']
    db_insert('users_extra_fields')->fields(
        array(
            'username' => $form_state['values']['name'],
            'mail' => $form_state['values']['mail'],
            'affiliation_societe' => $form_state['values']['affiliation_societe'],
            'siren' => $form_state['values']['siren'],
            'adresse' => $form_state['values']['adresse'],
            'code_postal' => $form_state['values']['code_postal'],
            'ville' => $form_state['values']['ville'],
            'civilite' => $form_state['values']['civilite'],
            'nom_prenom' => $form_state['values']['nom_prenom'],
            'poste_service' => $form_state['values']['poste_service'],
            'mail_contact' => $form_state['values']['mail_contact'],
            'telephone' => $form_state['values']['telephone'],
            'fax' => $form_state['values']['fax'],
        )
    )
        ->execute();

    // Display a message saying that datas are set in database.
    drupal_set_message(t('Les données renseignées ont été enregistrées.'));
}

/////////////////////////////////////////////////////////////////////////////////////////////////////


/**
 * Implement hook_theme()
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function bsconnexion_theme($existing, $type, $theme, $path) {
    return array(
        'bsconnexion_profil' => array(
            'template' => 'template/bs-cc-profil-unchangeable-datas',
            'path' => drupal_get_path('module', 'bsconnexion'),
            'variables' => array('infos' => NULL),
        ),
        'bsconnexion_client_account_menu' => array(
            'template' => 'template/bs-cc-menu',
            'path' => drupal_get_path('module', 'bsconnexion'),
            'variables' => array('infos' => NULL),
        ),
    );
}

function bsconnexion_block_info() {
    $blocks['user_client_account_menu'] = array(
        'info' => t('Menu compte client'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => 'utilisateur/profil',
//        'cache' => DRUPAL_NO_CACHE,
        'weight' => 1,
    );
    // This example comes from node.module.
    $blocks['user_profil_unchangeable_datas'] = array(
        'info' => t('Données inchangeables société'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => 'utilisateur/profil',
//        'cache' => DRUPAL_NO_CACHE,
        'weight' => 2,
    );

    $blocks['user_profil_changeable_datas'] = array(
        'info' => t('Profil utilisateur'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => 'utilisateur/profil',
//        'cache' => DRUPAL_NO_CACHE,
        'weight' => 3,
    );

    return $blocks;
}


function bsconnexion_block_view($delta = '') {
    $block = array();

    switch ($delta) {
// BLOCK - Client account menu
        case 'user_client_account_menu':
            // Link the template for the client account menu
            $block['content']['#markup'] = theme('bsconnexion_client_account_menu');

            // Link a js file for the client account menu
            $block['content']['#attached']['css'][] = array(
                'data' => drupal_get_path('module', 'bsconnexion').'/css/bs-cc-menu.css',
                'type' => 'file'
            );

            // Link a js file for the client account menu
            $block['content']['#attached']['js'][] = array(
                'data' => drupal_get_path('module', 'bsconnexion').'/js/bs-cc-menu.js',
                'type' => 'file'
            );

            break;

// BLOCK - Client account, profil page, unchangeable datas
        case 'user_profil_unchangeable_datas':

            // Retrieve user's datas from table users_extra_fields in the database
            $result_affiliation_societe = db_query("SELECT affiliation_societe from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();
            $result_siren = db_query("SELECT siren from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();
            $result_code_postal = db_query("SELECT code_postal from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();
            $result_adresse = db_query("SELECT adresse from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();
            $result_ville = db_query("SELECT ville from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();

            // Set the retrieve's datas in drupal's variables
            $data['affiliation_societe'] = $result_affiliation_societe;
            $data['siren'] = $result_siren;
            $data['code_postal'] = $result_code_postal;
            $data['adresse'] = $result_adresse;
            $data['ville'] = $result_ville;

            $block['subject'] = t('Informations de la société');
            // Link the template to display datas
            $block['content']['#markup'] = theme('bsconnexion_profil', $data);

            // Link a js file for unchangeable datas in the profil page
            $block['content']['#attached']['css'][] = array(
                'data' => drupal_get_path('module', 'bsconnexion').'/css/bs-cc-profil-datas.css',
                'type' => 'file'
            );

            // Link a js file for unchangeable datas in the profil page
            $block['content']['#attached']['js'][] = array(
                'data' => drupal_get_path('module', 'bsconnexion').'/js/bs-cc-profil-datas.js',
                'type' => 'file'
            );

            break;

// BLOCK - Client account, profil page, changeable datas
        case 'user_profil_changeable_datas':
            $block['subject'] = t('Informations du contact');
            $block['content'] = drupal_get_form('bsconnexion_profil_changeable_datas_form');

            // Link a js file for changeable datas in the profil page
            $block['content']['#attached']['css'][] = array(
                'data' => drupal_get_path('module', 'bsconnexion').'/css/bs-cc-profil-datas.css',
                'type' => 'file'
            );

            // Link a js file for changeable datas in the profil page
            $block['content']['#attached']['js'][] = array(
                'data' => drupal_get_path('module', 'bsconnexion').'/js/bs-cc-profil-datas.js',
                'type' => 'file'
            );

            break;

//        case 'recent':
//            if (user_access('access content')) {
//                $block['subject'] = t('Recent content');
//                if ($nodes = node_get_recent(variable_get('node_recent_block_count', 10))) {
//                    $block['content'] = array(
//                        '#theme' => 'node_recent_block',
//                        '#nodes' => $nodes,
//                    );
//                }
//                else {
//                    $block['content'] = t('No content available.');
//                }
//            }
//            break;
    }
    return $block;
}


function bsconnexion_profil_changeable_datas_form($form, &$form_state){

    // Retrieve user's datas from table users_extra_fields in the database
    $result_civilite = db_query("SELECT civilite from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();
    $result_nom_prenom = db_query("SELECT nom_prenom from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();
    $result_poste_service = db_query("SELECT poste_service from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();
    $result_mail_contact = db_query("SELECT mail_contact from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();
    $result_telephone = db_query("SELECT telephone from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();
    $result_fax = db_query("SELECT fax from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();

    // Change the value of the $form_state['values']['civilite']
    // to stock either Monsieur or Madame.
    if($result_civilite == "Madame"){
        $result_civilite = 0;
    }else{
        $result_civilite = 1;
    }

    if(isset($result_fax)){
        $result_fax = "Non renseigné";
    }

    $form['update_account']['#prefix'] = '<p id="update-account-disclaimer">Pour modifier ces données, cliquez sur le bouton correspondant au(x) champ(s) souhaité(s).</p>';

    // Update account : civilite field
    $form['update_account']['update_civilite'] = array(
        '#type' => 'select',
        '#default_value' => $result_civilite,
//        '#required' => TRUE,
        '#id' => 'bs-cc-update-account-civilite',
        '#options' => array(
            0 => t('Madame'),
            1 => t('Monsieur'),
        ),
        '#weight' => 1,
        '#prefix' => '<div id="bs-cc-update-account-civilite-div"><p>Civilité : </p>',
        '#suffix' => '</div>',
    );

    // Update account : nom_prenom field
    $form['update_account']['update_nom_prenom'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => $result_nom_prenom),
//        '#value' => $result_nom_prenom,
        '#id' => 'bs-cc-update-account-nomprenom',
        '#weight' => 2,
//        '#required' => TRUE,
        '#prefix' => '<div id="bs-cc-update-account-nomprenom-div"><p>Nom prénom : </p>',
        '#suffix' => '</div>',
    );

    // Update account : poste_service field
    $form['update_account']['update_poste_service'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => $result_poste_service),
//        '#value' => $result_poste_service,
        '#id' => 'bs-cc-update-account-posteservice',
        '#weight' => 3,
//        '#required' => TRUE,
        '#prefix' => '<div id="bs-cc-update-account-posteservice-div"><p>Poste / Service : </p>',
        '#suffix' => '</div>',
    );

    // Update account : mail_contact field
    $form['update_account']['update_mail_contact'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => $result_mail_contact),
//        '#value' => $result_mail_contact,
        '#id' => 'bs-cc-update-account-mailcontact',
        '#weight' => 4,
//        '#required' => TRUE,
        '#prefix' => '<div id="bs-cc-update-account-mailcontact-div"><p>Mail du contact : </p>',
        '#suffix' => '</div>',
    );

    // Update account : telephone field
    $form['update_account']['update_telephone'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => $result_telephone),
//        '#value' => $result_telephone,
        '#id' => 'bs-cc-update-account-telephone',
        '#weight' => 5,
//        '#required' => TRUE,
        '#prefix' => '<div id="bs-cc-update-account-telephone-div"><p>Téléphone : </p>',
        '#suffix' => '</div>',
    );

    // Update account : fax field
    $form['update_account']['update_fax'] = array(
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => $result_fax),
//        '#value' => $result_fax,
        '#id' => 'bs-cc-update-account-fax',
        '#weight' => 6,
        '#prefix' => '<div id="bs-cc-update-account-fax-div"><p>Fax : </p>',
        '#suffix' => '</div>',
    );

    $form['update_account']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Valider'),
        '#id' => 'bs-cc-update-account-submit',
        '#weight' => 7,
        '#prefix' => '<div id="bs-cc-update-account-submit-div">',
        '#suffix' => '</div>',
    );

    $form['update_account']['submit']['#submit'][] = 'bsconnexion_profil_changeable_datas_submit';

    return $form;
}

function bsconnexion_profil_changeable_datas_submit($form, &$form_state){

    // Change the value of the $form_state['values']['update_civilite']
    // to stock either Monsieur or Madame.
    if($form_state['values']['update_civilite'] == 0){
        $form_state['values']['update_civilite'] = "Madame";
    }else{
        $form_state['values']['update_civilite'] = "Monsieur";
    }

    // Update civilite data
    db_update('users_extra_fields')
        ->fields(array(
            'civilite' => $form_state['values']['update_civilite'],
        ))
        ->execute();


    // Update nom_prenom data
    if($form_state['values']['nom_prenom'] != $form_state['values']['update_nom_prenom']){
        db_update('users_extra_fields')
            ->fields(array(
                'nom_prenom' => $form_state['values']['update_nom_prenom'],
            ))
            ->execute();
    }else{
        drupal_set_message('nom prenom : non');
    }

    // Update poste_service data
    if($form_state['values']['poste_service'] != $form_state['values']['update_poste_service']){
        db_update('users_extra_fields')
            ->fields(array(
                'poste_service' => $form_state['values']['update_poste_service'],
            ))
            ->execute();
    }else{
        drupal_set_message('poste service : non');
    }

    // Update mail_contact data
    if($form_state['values']['mail_contact'] != $form_state['values']['update_mail_contact']){
        db_update('users_extra_fields')
            ->fields(array(
                'mail_contact' => $form_state['values']['update_mail_contact'],
            ))
            ->execute();
    }else{
        drupal_set_message('mail contact : non');
    }

    // Update telephone data
    if($form_state['values']['telephone'] != $form_state['values']['update_telephone']){
        db_update('users_extra_fields')
        ->fields(array(
            'telephone' => $form_state['values']['update_telephone'],
        ))
        ->execute();
    }else{
        drupal_set_message('tel : non');
    }

    // Update fax data
    if($form_state['values']['fax'] != $form_state['values']['update_fax']){
        db_update('users_extra_fields')
        ->fields(array(
            'fax' => $form_state['values']['update_fax'],
        ))
            ->execute();
    }else{
        drupal_set_message('fax : non');
    }



    //    $result_affiliation_societe = db_query("SELECT affiliation_societe from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();

//    $result_affiliation_societe = db_query("UPDATE nom_prenom from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();

//    $result = db_query("UPDATE {node} SET uid = %d, status = %d WHERE created >= %d", 5, 1, time() - 3600);


}


//////////////////////////////////////////////////////////////////////////////////////////////////////
//
///**
// * Implements bsconnexion_user_connected_profil_menu().
// *
// * Display a menu and load function depending tab selected
// *
// * @see bsconnexion_user_connected_profil_tab_choice()
// */
//function bsconnexion_user_connected_profil_menu(){
//
//    $var =  '<div id="bs-cc-user-connected-menu">';
//    $var .=     '<ul>';
////    $var .=         '<li id="bs-cc-profil-li"><a class="active" href="'. $GLOBALS["user"]->uid .'/profil?profil=true">PROFIL</a></li>';
//    $var .=         '<li id="bs-cc-profil-li"><a class="active" href="/utilisateur/'.$GLOBALS['user']->uid.'/profil">PROFIL</a></li>';
//    $var .=         '<li id="bs-cc-catalogueG-li"><a href="/utilisateur/'.$GLOBALS['user']->uid.'/catalogueg">CATALOGUE GENERAL</a></li>';
//    $var .=         '<li id="bs-cc-catalogueP-li"><a href="/utilisateur/'.$GLOBALS['user']->uid.'/cataloguep">CATALOGUE PERSONNALISÉ</a></li>';
//    $var .=         '<li id="bs-cc-historique-li"><a>HISTORIQUE</a>';
//    $var .=             '<ul id="bs-cc-dropdown-historique">';
//    $var .=                 '<li id="bs-cc-factures-li"><a href="/utilisateur/'.$GLOBALS['user']->uid.'/factures">Factures</a></li>';
//    $var .=                 '<li id="bs-cc-commandes-li"><a href="/utilisateur/'.$GLOBALS['user']->uid.'/commandes">Commandes en cours</a></li>';
//    $var .=             '</ul>';
//    $var .=         '</li>';
//    $var .=         '<li id="bs-cc-abonnements-li"><a href="/utilisateur/'.$GLOBALS['user']->uid.'/abonnements">ABONNEMENTS</a></li>';
//    $var .=     '</ul>';
//    $var .= '</div>';
//
//    return $var;
//}
//
///**
// * Implements bsconnexion_user_connected_profil_tab_choice().
// *
// * Call a function depending the tab selected
// *
// * @see bsconnexion_user_connected_profil_menu()
// * @see bsconnexion_user_connected_profil_profil()
// * @see bsconnexion_user_connected_profil_catalogueg()
// * @see bsconnexion_user_connected_profil_cataloguep()
// * @see bsconnexion_user_connected_profil_factures()
// * @see bsconnexion_user_connected_profil_commandes()
// * @see bsconnexion_user_connected_profil_abonnements()
// */
////function bsconnexion_user_connected_profil_tab_choice(){
////    if (isset($_GET['profil'])) {
//////        echo "<script>alert('huso');</script>";
////        return bsconnexion_user_connected_profil_form();
////    }elseif (isset($_GET['catalogueg'])) {
////        return bsconnexion_user_connected_profil_catalogueg();
////    }elseif (isset($_GET['cataloguep'])) {
////        return bsconnexion_user_connected_profil_cataloguep();
////    }elseif (isset($_GET['factures'])) {
////        return bsconnexion_user_connected_profil_factures();
////    }elseif (isset($_GET['commandes'])) {
////        return bsconnexion_user_connected_profil_commandes();
////    }elseif (isset($_GET['abonnements'])) {
////        return bsconnexion_user_connected_profil_abonnements();
////    }
////
////}
//
///**
// * Implements bsconnexion_user_connected_profil_profil().
// *
// * Display content if profil tab is selected
// *
// * @see bsconnexion_user_connected_profil_menu()
// * @see bsconnexion_user_connected_profil_tab_choice()
// */
////function bsconnexion_user_connected_profil_profil(){
////    // Method 1 : db_query
////    // $result_affiliation_societe = db_query("SELECT affiliation_societe from {users_extra_fields} WHERE username = :username", array(":username" => $GLOBALS['user']->name))->fetchField();
////
////    // Method 2 : db_select
////    $query = db_select('users_extra_fields', 'uef')
////        ->fields('uef', array('affiliation_societe'))
////        ->condition('uef.username', $GLOBALS['user']->name)
////        ->execute();
////    $result_affiliation_societe = $query->fetchField();
////
////    $var =  '<div id="">';
////    $var .= '<p>Bienvenue sur l\'onglet profil '.$GLOBALS['user']->name.'</p>';
////    $var .= '<p>Votre username '.$result_affiliation_societe.'</p>';
////    $var .= '</div>';
////
////    return $var;
////}
//
//function bsconnexion_user_connected_profil_form($form, &$form_state){
//
//    $form["#prefix"] = bsconnexion_user_connected_profil_menu();
//
//    $form["test"] = array(
//        '#type' => 'container',
//    );
//
//    $form['update_account']['hay'] = array(
//        '#type' => 'textfield',
//        '#attributes' => array('placeholder' => t('Exemple de champ ')),
//    );
//
//    $form['update_account']['hay2'] = array(
//        '#type' => 'textfield',
//
//        '#attributes' => array('value' => t('Jean GAIN')),
//    );
//
//
//    return $form;
//}
//
//function bsconnexion_test_form($form, &$form_state){
//
//
//    $form['test']['test'] = array(
//        '#type' => 'textfield',
//
//        '#attributes' => array('placeholder' => t('TEST')),
//    );
//
//    return $form;
//}
//
//
///**
// * Implements bsconnexion_user_connected_profil_catalogueg().
// *
// * Display content if catalogueg tab is selected
// *
// * @see bsconnexion_user_connected_profil_menu()
// * @see bsconnexion_user_connected_profil_tab_choice()
// */
//function bsconnexion_user_connected_profil_catalogueg(){
//    $var =  '<div id="">';
//    $var .= '<p>Bienvenue sur l\'onglet Catalogue général</p>';
//    $var .= '</div>';
//
//    return $var;
//}
//
///**
// * Implements bsconnexion_user_connected_profil_cataloguep().
// *
// * Display content if cataloguep tab is selected
// *
// * @see bsconnexion_user_connected_profil_menu()
// * @see bsconnexion_user_connected_profil_tab_choice()
// */
//function bsconnexion_user_connected_profil_cataloguep(){
//    $var =  '<div id="">';
//    $var .= '<p>Bienvenue sur l\'onglet Catalogue personnalisé</p>';
//    $var .= '</div>';
//
//    return $var;
//}
//
///**
// * Implements bsconnexion_user_connected_profil_factures().
// *
// * Display content if factures tab is selected
// *
// * @see bsconnexion_user_connected_profil_menu()
// * @see bsconnexion_user_connected_profil_tab_choice()
// */
//function bsconnexion_user_connected_profil_factures(){
//    $var =  '<div id="">';
//    $var .= '<p>Bienvenue sur l\'onglet Factures</p>';
//    $var .= '</div>';
//
//    return $var;
//}
//
///**
// * Implements bsconnexion_user_connected_profil_commandes().
// *
// * Display content if commandes tab is selected
// *
// * @see bsconnexion_user_connected_profil_menu()
// * @see bsconnexion_user_connected_profil_tab_choice()
// */
//function bsconnexion_user_connected_profil_commandes(){
//    $var =  '<div id="">';
//    $var .= '<p>Bienvenue sur l\'onglet Commandes</p>';
//    $var .= '</div>';
//
//    return $var;
//}
//
///**
// * Implements bsconnexion_user_connected_profil_abonnements().
// *
// * Display content if abonnements tab is selected
// *
// * @see bsconnexion_user_connected_profil_menu()
// * @see bsconnexion_user_connected_profil_tab_choice()
// */
//function bsconnexion_user_connected_profil_abonnements(){
//    $var =  '<div id="">';
//    $var .= '<p>Bienvenue sur l\'onglet Abonnements</p>';
//    $var .= '</div>';
//
//    return $var;
//}


//function bsconnexion_functions_validate($form, &$form_state){
//  if ($form_state['values']['civilite'] == 0){
//    form_set_error('civilite', 'Veuillez choisir une civilité !');
//  }
//
//  if (!ctype_digit($form_state['values']['siren']) || strlen($form_state['values']['siren']) != 9){
//    form_set_error('siren', 'Le numéro de siren doit être une suite de 9 chiffres !');
//  }
//
//  if ($form_state['values']['cg_vente'] == 0) {
//    form_set_error('cg_vente', 'Veuillez accepter les conditions générales de vente pour vous inscrire');
//  }
//
//  if ($form_state['values']['cg_utilisation'] == 0) {
//    form_set_error('cg_utilisation', 'Veuillez accepter les conditions générales d\'utilisation pour vous inscrire');
//  }
//
//  if (!VerifOnlyLetters($form_state['values']['ville'])) {
//    form_set_error('ville', 'Le nom de la ville n\'est pas correcte');
//  }
//
//  if(!ctype_digit($form_state['values']['code_postal']) || strlen($form_state['values']['code_postal']) != 5){
//    form_set_error('code_postal', 'Le code postal n\'est pas correct !');
//  }
//
//  if (!VerifOnlyLetters($form_state['values']['nom_prenom'])) {
//    form_set_error('nom_prenom', 'Le nom/prénom n\'est pas correct !');
//  }
//
//  if (!VerifOnlyLetters($form_state['values']['poste_service'])) {
//    form_set_error('poste_service', 'Le poste/service n\'est pas correct !');
//  }
//
//  if (!ctype_digit($form_state['values']['tel'])){
//    form_set_error('tel', 'Le numéro de téléphone n\'est pas correct !');
//  }
//
//  if (!ctype_digit($form_state['values']['fax'])){
//    form_set_error('fax', 'Le numéro de fax n\'est pas correct !');
//  }
//}
//
//function bsconnexion_functions_submit($form, &$form_state){
//$message = t('Thank you for applying for an account. Your account is currently pending approval by the site administrator.<br />In the meantime, a welcome message with further instructions has been sent to your e-mail address.');
//
//  // Unset all messages that contain the $message.
//  foreach ($_SESSION['messages']['status'] as $status => $statusmessage) {
//    // Test for core message (we need to replace).
//    if ($message == $statusmessage) {
//      // And unset it if we find it.
//      unset($_SESSION['messages']['status'][$status]);
//    }
//  }
//  $_SESSION['messages']['status'] = array_values($_SESSION['messages']['status']);
//
//  // Notify the user.
//  $account = $form_state['user'];
//  $params['account'] = $account;
//  $mail = drupal_mail('bsconnexion', 'register', $account->mail, user_preferred_language($account), $params);
//
//  // Set succes message and redirect to the front page.
//  drupal_set_message(t('A welcome message with further instructions has been sent to your e-mail address.'));
//
//  if ($form_state['values']['civilite'] == 1) {
//    $civilite = "Monsieur";
//  }
//  else{
//    $civilite = "Madame";
//  }
//
//  if ($form_state['values']['distr_fabri'] == 0) {
//    $distr_fabri = "FALSE";
//  }
//  else{
//    $distr_fabri = "TRUE";
//  }
//
//  $insert_uef = db_insert('users_extra_fields')
//  ->fields(array(
//  	'name' => $form_state['values']['name'],
//    'civilite' => $civilite,
//    'nom_prenom' => $form_state['values']['nom_prenom'],
//    'siren' => $form_state['values']['siren'],
//    'poste_service' => $form_state['values']['poste_service'],
//    'code_postal' => $form_state['values']['code_postal'],
//    'telephone' => $form_state['values']['tel'],
//    'affiliation_societe' => $form_state['values']['affiliation_société'],
//    'fax' => $form_state['values']['fax'],
//    'ville' => $form_state['values']['ville'],
//    'adresse' => $form_state['values']['adresse'],
//    'distributeur_fabricant' => $form_state['values']['distr_fabri'],
//  ))
//  ->execute();
//}
//
//function bsconnexion_form($form, &$form_state) {
//
//	$query = db_select('users', 'u');
//    $query->join('users_extra_fields', 'uef', 'uef.name = u.name');
//    $query->fields('uef');
//    $query->condition('uef.name', $GLOBALS['user']->name);
//    $result = $query->execute()->fetchAssoc();
//
//  if ($result['civilite'] == "Monsieur") {
//    $civilite = 1;
//  }
//  else{
//    $civilite = 2;
//  }
//
//  $form['civilite'] = array(
//     '#type' => 'select',
//     '#options' => array(
//        0 => t('Civilité'),
//        1 => t('Monsieur'),
//        2 => t('Madame'),
//     ),
//     '#default_value' => $civilite,
// );
//
//  $form['nom_prenom'] = array(
//    '#type' => 'textfield',
//    '#default_value' => $result['nom_prenom'],
//    '#required' => TRUE,
//  );
//
//  $form['siren'] = array(
//    '#type' => 'textfield',
//    '#default_value' => $result['siren'],
//    '#required' => TRUE,
//  );
//
//  $form['poste_service'] = array(
//    '#type' => 'textfield',
//    '#default_value' => $result['poste_service'],
//    '#required' => TRUE,
//  );
//
//  $form['code_postal'] = array(
//    '#type' => 'textfield',
//    '#default_value' => $result['code_postal'],
//    '#required' => TRUE,
//  );
//
//  $form['tel'] = array(
//    '#type' => 'textfield',
//    '#default_value' => $result['telephone'],
//    '#required' => TRUE,
//  );
//
//  $form['affiliation_société'] = array(
//    '#type' => 'textfield',
//    '#default_value' => $result['affiliation_societe'],
//    '#required' => TRUE,
//  );
//
//  $form['fax'] = array(
//    '#type' => 'textfield',
//    '#default_value' => $result['fax'],
//    '#required' => TRUE,
//  );
//
//  $form['ville'] = array(
//    '#type' => 'textfield',
//    '#default_value' => $result['ville'],
//    '#required' => TRUE,
//  );
//
//  $form['adresse'] = array(
//    '#type' => 'textfield',
//    '#default_value' => $result['adresse'],
//    '#required' => TRUE,
//  );
//
//  $form['distr_fabri'] = array(
//    '#type' => 'checkbox',
//    '#default_value' => $result['distributeur_fabricant'],
//    '#title' => t('Je représente un distributeur/fabricant'),
//  );
//
//  $form['submit'] = array(
//    '#type' => 'submit',
//    '#value' => t('Enregistrer'),
//  );
//
//  return $form;
//}
//
//function bsconnexion_form_validate($form, &$form_state) {
//  if ($form_state['values']['civilite'] == 0){
//    form_set_error('civilite', 'Veuillez choisir une civilité !');
//  }
//
//  if (!ctype_digit($form_state['values']['siren']) || strlen($form_state['values']['siren']) != 9){
//    form_set_error('siren', 'Le numéro de siren doit être une suite de 9 chiffres !');
//  }
//
//  if (!VerifOnlyLetters($form_state['values']['ville'])) {
//    form_set_error('ville', 'Le nom de la ville n\'est pas correcte');
//  }
//
//  if(!ctype_digit($form_state['values']['code_postal']) || strlen($form_state['values']['code_postal']) != 5){
//    form_set_error('code_postal', 'Le code postal n\'est pas correct !');
//  }
//
//  if (!VerifOnlyLetters($form_state['values']['nom_prenom'])) {
//    form_set_error('nom_prenom', 'Le nom/prénom n\'est pas correct !');
//  }
//
//  if (!VerifOnlyLetters($form_state['values']['poste_service'])) {
//    form_set_error('poste_service', 'Le poste/service n\'est pas correct !');
//  }
//
//  if (!ctype_digit($form_state['values']['tel'])){
//    form_set_error('tel', 'Le numéro de téléphone n\'est pas correct !');
//  }
//
//  if (!ctype_digit($form_state['values']['fax'])){
//    form_set_error('fax', 'Le numéro de fax n\'est pas correct !');
//  }
//}
//
//function bsconnexion_form_submit($form, &$form_state) {
//  if ($form_state['values']['civilite'] == 1) {
//    $civilite = "Monsieur";
//  }
//  else{
//    $civilite = "Madame";
//  }
//
//  $insert_civilite = db_update('users_extra_fields')
//  ->fields(array(
//    'civilite' => $civilite,
//  ))
//  ->execute();
//
//  $insert_nom_prenom = db_update('users_extra_fields')
//  ->fields(array(
//    'nom_prenom' => $form_state['values']['nom_prenom'],
//  ))
//  ->execute();
//
//  $insert_siren = db_update('users_extra_fields')
//  ->fields(array(
//    'siren' => $form_state['values']['siren'],
//  ))
//  ->execute();
//
//  $insert_poste_service = db_update('users_extra_fields')
//  ->fields(array(
//    'poste_service' => $form_state['values']['poste_service'],
//  ))
//  ->execute();
//
//  $insert_code_postal = db_update('users_extra_fields')
//  ->fields(array(
//    'code_postal' => $form_state['values']['code_postal'],
//  ))
//  ->execute();
//
//  $insert_telephone = db_update('users_extra_fields')
//  ->fields(array(
//    'telephone' => $form_state['values']['tel'],
//  ))
//  ->execute();
//
//  $insert_affiliation_societe = db_update('users_extra_fields')
//  ->fields(array(
//    'affiliation_societe' => $form_state['values']['affiliation_société'],
//  ))
//  ->execute();
//
//  $insert_fax = db_update('users_extra_fields')
//  ->fields(array(
//    'fax' => $form_state['values']['fax'],
//  ))
//  ->execute();
//
//  $insert_ville = db_update('users_extra_fields')
//  ->fields(array(
//    'ville' => $form_state['values']['ville'],
//  ))
//  ->execute();
//
//  $insert_adresse = db_update('users_extra_fields')
//  ->fields(array(
//    'adresse' => $form_state['values']['adresse'],
//  ))
//  ->execute();
//
//  if ($form_state['values']['distr_fabri'] == 0) {
//    $distr_fabri = "FALSE";
//  }
//  else{
//    $distr_fabri = "TRUE";
//  }
//
//  $insert_distr_fabr = db_update('users_extra_fields')
//  ->fields(array(
//    'distributeur_fabricant' => $distr_fabri,
//  ))
//  ->execute();
//
//  drupal_set_message("Vos informations ont bien été modifés.");
//}
//
///**
// * @file
// * Enables password creation on registration form.
// */
//
///**
// * No verification email is sent.
// */
//define('USER_REGISTRATIONPASS_NO_VERIFICATION', 'none');
//
///**
// * Verification email is sent before password is set.
// */
//define('USER_REGISTRATIONPASS_VERIFICATION_DEFAULT', 'default');
//
///**
// * Verification email is sent after password is set.
// */
//define('USER_REGISTRATIONPASS_VERIFICATION_PASS', 'with-pass');
//
///**
// * Implements hook_rules_event_info().
// */
//function bsconnexion_rules_event_info() {
//  return array(
//    'bsconnexion_activated' => array(
//      'label' => t("When the user account is activated."),
//      'group' => 'User Registration Password',
//      'variables' => array(
//        'account' => array(
//          'type' => 'user',
//          'label' => t("The activated user's account"),
//        ),
//      ),
//      'group' => t('User'),
//    ),
//  );
//}
//
///**
// * Implements hook_form_FORM_ID_alter().
// */
//function bsconnexion_form_user_admin_settings_alter(&$form, &$form_state) {
//  // Render our configuration options.
//  $form['registration_cancellation']['bsconnexion_registration'] = array(
//    '#type' => 'radios',
//    '#title' => t('Require e-mail verification when a visitor creates an account'),
//    '#description' => t('Choose whether new users can set their password directly on the registration form and login during registration (without e-mail confirmation), or if they will be required to validate their e-mail address prior to logging into the site, and will be assigned a system-generated password, or they can set a password during registration, but first have to confirm their account via the activation e-mail sent after registration is complete, before they can log in to the site.'),
//    '#options' => array(
//      USER_REGISTRATIONPASS_NO_VERIFICATION => t('Do not require a verification e-mail, and let users set their password on the registration form.'),
//      USER_REGISTRATIONPASS_VERIFICATION_DEFAULT => t('Require a verification e-mail, but wait for the approval e-mail to let users set their password.'),
//      USER_REGISTRATIONPASS_VERIFICATION_PASS => t('Require a verification e-mail, but let users set their password directly on the registration form.'),
//    ),
//    '#default_value' => variable_get('bsconnexion_registration', USER_REGISTRATIONPASS_VERIFICATION_PASS),
//  );
//
//  // Render an option to change first time login link behaviour.
//  $form['registration_cancellation']['bsconnexion_registration_ftll_expire'] = array(
//    '#type' => 'checkbox',
//    '#title' => t('Enable Account activation link experation'),
//    '#description' => t('This option enables site admins to expire activation links after the experation time has passed. People are still able to request a new activation e-mail via the password reset form after this time expires to activate their account via a new activation e-mail.'),
//    '#default_value' => variable_get('bsconnexion_registration_ftll_expire', FALSE),
//    '#weight' => 7,
//  );
//  // Hide this setting by default.
//  $form['registration_cancellation']['ftll_timeout'] = array(
//    '#type' => 'container',
//    '#weight' => 8,
//    '#states' => array(
//      'invisible' => array(
//        'input[name="bsconnexion_registration_ftll_expire"]' => array('checked' => FALSE),
//      ),
//    ),
//  );
//  $form['registration_cancellation']['ftll_timeout']['bsconnexion_registration_ftll_timeout'] = array(
//    '#type' => 'textfield',
//    '#title' => t('Account activation link experation'),
//    '#description' => t('Enter the experation time for the activation link (aka first time login link) sent in the activation e-mail. The default is set to 86400 seconds (= 24 hours).'),
//    '#default_value' => variable_get('bsconnexion_registration_ftll_timeout', ''),
//    '#maxlength' => 10,
//    '#weight' => 8,
//  );
//
//  // Hide the default option.
//  $form['registration_cancellation']['user_email_verification']['#access'] = FALSE;
//
//  // Set up available tokens.
//  if (module_exists('rpt')) {
//    // Hide the option to generate passwords, because we
//    // only use the token option the rtp module provides.
//    $form['registration_cancellation']['rpt_password_generate']['#access'] = FALSE;
//
//    // We support the Registration Password Tokens module.
//    // Add a password to a template with [user:password].
//    // See http://drupal.org/project/rpt for more information.
//    $email_token_help = t('Available variables are: [site:name], [site:url], [user:name], [user:mail], [user:password], [site:login-url], [site:url-brief], [user:edit-url], [user:one-time-login-url], [user:cancel-url], [user:registrationpassword-url].');
//  }
//  else {
//    $email_token_help = t('Available variables are: [site:name], [site:url], [user:name], [user:mail], [site:login-url], [site:url-brief], [user:edit-url], [user:one-time-login-url], [user:cancel-url], [user:registrationpassword-url].');
//  }
//
//  // Render e-mail template settings.
//  $form['email_bsconnexion'] = array(
//    '#type' => 'fieldset',
//    '#title' => t('Welcome (no approval required, password is set)'),
//    '#collapsible' => TRUE,
//    '#collapsed' => TRUE,
//    '#description' => t('Edit the welcome e-mail messages sent to new members upon registering, when no administrator approval is required and password has already been set.') . ' ' . $email_token_help,
//    '#group' => 'email',
//  );
//  $form['email_bsconnexion']['bsconnexion_register_subject'] = array(
//    '#type' => 'textfield',
//    '#title' => t('Subject'),
//    '#default_value' => _bsconnexion_mail_text('register_subject', NULL, array(), FALSE),
//    '#maxlength' => 180,
//  );
//  $form['email_bsconnexion']['bsconnexion_register_body'] = array(
//    '#type' => 'textarea',
//    '#title' => t('Body'),
//    '#default_value' => _bsconnexion_mail_text('register_body', NULL, array(), FALSE),
//    '#rows' => 15,
//  );
//  // Override the default activation e-mail template with our own.
//  $form['email_activated']['settings']['user_mail_status_activated_subject'] = array(
//    '#type' => 'textfield',
//    '#title' => t('Subject'),
//    '#default_value' => variable_get('user_mail_status_activated_subject', _bsconnexion_mail_text('status_activated_subject', NULL, array(), FALSE)),
//    '#maxlength' => 180,
//  );
//  $form['email_activated']['settings']['user_mail_status_activated_body'] = array(
//    '#type' => 'textarea',
//    '#title' => t('Body'),
//    '#default_value' => variable_get('user_mail_status_activated_body', _bsconnexion_mail_text('status_activated_body', NULL, array(), FALSE)),
//    '#rows' => 15,
//  );
//
//  // Reorder the form items back to their original order.
//  $form['anonymous_settings']['#weight'] = -2;
//  $form['admin_role']['#weight'] = -1;
//  $form['registration_cancellation']['#weight'] = 0;
//  $form['registration_cancellation']['user_cancel_method']['#weight'] = 3;
//  $form['registration_cancellation']['bsconnexion_registration']['#weight'] = 2;
//  $form['personalization']['#weight'] = 4;
//  $form['email_title']['#weight'] = 5;
//  $form['email']['#weight'] = 6;
//  $form['email_admin_created']['#weight'] = 6;
//
//  // Register our extra submit function.
//  $form['#submit'][] = 'bsconnexion_admin_settings_submit';
//}
//
///**
// * Submit handler for the user admin form.
// */
//function bsconnexion_admin_settings_submit(&$form, &$form_state) {
//  $value = $form_state['values']['bsconnexion_registration'];
//  if ($value == USER_REGISTRATIONPASS_VERIFICATION_PASS) {
//    variable_set('user_email_verification', FALSE);
//    // Prevent standard notification email to administrators and to user.
//    variable_set('user_mail_register_pending_approval_notify', FALSE);
//    variable_set('user_mail_register_no_approval_required_notify', FALSE);
//  }
//  else {
//    // Enable or disable core verification.
//    if ($value == USER_REGISTRATIONPASS_NO_VERIFICATION) {
//      variable_set('user_email_verification', FALSE);
//    }
//    else {
//      variable_set('user_email_verification', TRUE);
//    }
//
//    // Let default value.
//    // @see _user_mail_notify()
//    variable_del('user_mail_register_pending_approval_notify');
//    variable_del('user_mail_register_no_approval_required_notify');
//  }
//
//  // Save or revert experation limits variables.
//  if ($form_state['values']['bsconnexion_registration_ftll_expire']) {
//    variable_set('bsconnexion_registration_ftll_expire', $form_state['values']['bsconnexion_registration_ftll_expire']);
//  }
//  else {
//    variable_del('bsconnexion_registration_ftll_expire');
//  }
//  if ($form_state['values']['bsconnexion_registration_ftll_timeout'] && $form_state['values']['bsconnexion_registration_ftll_timeout'] != 86400) {
//    variable_set('bsconnexion_registration_ftll_timeout', $form_state['values']['bsconnexion_registration_ftll_timeout']);
//  }
//  else {
//    variable_del('bsconnexion_registration_ftll_timeout');
//  }
//}
//
///**
// * Implements hook_mail().
// *
// * @see drupal_mail()
// * @see _bsconnexion_mail_text()
// * @see bsconnexion_mailkeys()
// * @see bsconnexion_mail_edit_text()
// * @see bsconnexion_mail_edit_token_types()
// */
//function bsconnexion_mail($key, &$message, $params) {
//  $language = $message['language'];
//  $variables = array('user' => $params['account']);
//  $message['subject'] .= _bsconnexion_mail_text($key . '_subject', $language, $variables);
//  $message['body'][] = _bsconnexion_mail_text($key . '_body', $language, $variables);
//}
//
///**
// * Returns a mail string for a variable name.
// *
// * @see bsconnexion_mail()
// * @see bsconnexion_mail_tokens()
// * @see bsconnexion_mailkeys()
// * @see bsconnexion_mail_edit_text()
// * @see bsconnexion_mail_edit_token_types()
// */
//function _bsconnexion_mail_text($key, $language = NULL, $variables = array(), $replace = TRUE) {
//  $langcode = isset($language) ? $language->language : NULL;
//
//  if ($admin_setting = variable_get('bsconnexion_' . $key, FALSE)) {
//    // An admin setting overrides the default string.
//    $text = $admin_setting;
//  }
//  else {
//    // No override, return default string.
//    switch ($key) {
//      case 'register_subject':
//        $text = t('Account details for [user:name] at [site:name]', array(), array('langcode' => $langcode));
//        break;
//
//      case 'register_body':
//        $text = t("[user:name],
//
//Thank you for registering at [site:name]. You may now log in and verify your account by clicking this link or copying and pasting it to your browser:
//
//[user:registrationpassword-url]
//
//This link can only be used once. You will be able to log in at [site:login-url] in the future using:
//
//username: [user:name]
//password: Your password
//
//--  [site:name] team", array(), array('langcode' => $langcode));
//        break;
//
//      case 'status_activated_subject':
//        $text = t('Welcome message for [user:name] at [site:name]', array(), array('langcode' => $langcode));
//        break;
//
//      case 'status_activated_body':
//        $text = t("[user:name],
//
//Your account at [site:name] has been activated.
//
//You will be able to log in to [site:login-url] in the future using:
//
//username: [user:name]
//password: your password.
//
//--  [site:name] team", array(), array('langcode' => $langcode));
//        break;
//
//    }
//  }
//
//  if ($replace) {
//    // We do not sanitize the token replacement, since the output of this
//    // replacement is intended for an e-mail message, not a web browser.
//    return token_replace($text, $variables,
//      array(
//        'language' => $language,
//        'callback' => 'bsconnexion_mail_tokens',
//        'sanitize' => FALSE)
//      );
//  }
//
//  return $text;
//}
//
///**
// * Token callback to add unsafe tokens for user mails.
// *
// * @see user_mail_tokens()
// * @see bsconnexion_mail()
// * @see bsconnexion_confirmation_url()
// */
//function bsconnexion_mail_tokens(&$replacements, $data, $options) {
//  user_mail_tokens($replacements, $data, $options);
//  if (isset($data['user'])) {
//    $replacements['[user:registrationpassword-url]'] = bsconnexion_confirmation_url($data['user']);
//  }
//  // For D7 we use the rpt module to enable emails to contain
//  // the user's password, so no need to add the password
//  // token here, people just need to install rpt.
//}
//
///**
// * Generates a unique URL for a user to login with their password already set.
// *
// * @param object $account
// *   An object containing the user account.
// *
// * @return string
// *   A unique URL that provides a one-time log in for the user, from which
// *   they can change their password.
// *
// * @see bsconnexion_mail_tokens()
// * @see user_pass_rehash()
// */
//function bsconnexion_confirmation_url($account) {
//  $timestamp = REQUEST_TIME;
//  return url("user/registrationpassword/$account->uid/$timestamp/" . user_pass_rehash($account->pass, $timestamp, $account->name, $account->uid), array('absolute' => TRUE));
//}
//
///**
// * Implements hook_mailkeys().
// *
// * @return array
// *   A simple string to identify the mailkey.
// *
// * @see bsconnexion_mail()
// * @see _bsconnexion_mail_text()
// * @see bsconnexion_mail_tokens()
// * @see bsconnexion_mail_edit_text()
// * @see bsconnexion_mail_edit_token_types()
// */
//function bsconnexion_mailkeys() {
//  return array(
//    'register' => t('Welcome message when user self-registers and sets password during registration'),
//  );
//}
//
///**
// * Implements hook_mail_edit_text().
// *
// * @param string $mailkey
// *   The mailkey string.
// *
// * @param object $language
// *   The language.
// *
// * @return array
// *   Subject and body, ready for processing.
// *
// * @see bsconnexion_mail()
// * @see _bsconnexion_mail_text()
// * @see bsconnexion_mail_tokens()
// * @see bsconnexion_mailkeys()
// * @see bsconnexion_mail_edit_text()
// * @see bsconnexion_mail_edit_token_types()
// */
//function bsconnexion_mail_edit_text($mailkey, $language) {
//  $return = array();
//  $return['subject'] = _bsconnexion_mail_text($mailkey . '_subject', $language, array(), FALSE);
//  $return['body'] = _bsconnexion_mail_text($mailkey . '_body', $language, array(), FALSE);
//  return $return;
//}
//
///**
// * Implements hook_mail_edit_token_types().
// *
// * @param string $mailkey
// *   The mailkey.
// *
// * @return array
// *   A simple array for constructing the mail / tokens.
// *
// * @see bsconnexion_mail()
// * @see _bsconnexion_mail_text()
// * @see bsconnexion_mail_tokens()
// * @see bsconnexion_mailkeys()
// * @see bsconnexion_mail_edit_text()
// */
//function bsconnexion_mail_edit_token_types($mailkey) {
//  return array('user');
//}
//
///**
// * Implements hook_variable_info().
// *
// * @see variable.module.
// */
//function bsconnexion_variable_info($options) {
//  $variables['bsconnexion_register_[mail_part]'] = array(
//    'type' => 'user_mail',
//    'title' => t('Welcome, no approval, password is already set', array(), $options),
//    'description' => t('Customize welcome e-mail messages sent to new members when password is already set.', array(), $options),
//    'group' => 'user_mails',
//  );
//
//  return $variables;
//}
//
///**
// * Simple message and redirect.
// */
//function bsconnexion_set_message($type = 'welcome', $redirect = '') {
//  // Select what message to display.
//  switch ($type) {
//    case 'linkerror':
//      drupal_set_message(t('You have tried to use a one-time login link that has either been used or is no longer valid. Please request a new one using the form below.'));
//
//      // Redirect to user/pass.
//      if (!empty($redirect)) {
//        drupal_goto('user/password');
//      }
//      break;
//
//    case 'welcome':
//      drupal_set_message(t('Further instructions have been sent to your e-mail address.'));
//      // Redirect to front.
//      if (!empty($redirect)) {
//        drupal_goto();
//      }
//      break;
//
//  }
//}
//
///**
//* Implements hook_form_FORM_ID_alter().
//*/
//function bsconnexion_form_user_pass_alter(&$form, &$form_state, $form_id) {
//  $form['#validate'][0] = '_bsconnexion_user_pass_validate';
//  $form['#submit'][0] = '_bsconnexion_user_pass_submit';
//}
//
///**
//* Form validation function.
//*/
//function _bsconnexion_user_pass_validate(&$form, &$form_state) {
//  // We try and load a blocked user that never ever logged in.
//  // This should only return 'brand new' user accounts.
//  $name = trim($form_state['values']['name']);
//  // Try to load by email.
//  $users = user_load_multiple(array(),
//    array(
//      'mail' => $name,
//      'status' => '0',
//      'access' => '0',
//      'login' => '0',
//    )
//  );
//  $account = reset($users);
//
//  if (!$account) {
//    // No success, try to load by name.
//    $users = user_load_multiple(array(),
//      array(
//        'name' => $name,
//        'status' => '0',
//        'access' => '0',
//        'login' => '0',
//      )
//    );
//    $account = reset($users);
//  }
//
//  // If the account has never ever been used, load
//  // the $account into the form for processing.
//  if (!empty($account->uid)) {
//    form_set_value(array('#parents' => array('account')), $account, $form_state);
//  }
//  else {
//    user_pass_validate($form, $form_state);
//  }
//}
//
///**
//* Implements submit function.
//*/
//function _bsconnexion_user_pass_submit(&$form, &$form_state) {
//  $account = $form_state['values']['account'];
//
//  // Then, if we have a user account
//  // and it has never ever been used.
//  if (!empty($account->uid) && !$account->login && !$account->access && !$account->status) {
//
//    // Try to load the account in disabled state.
//    $users = user_load_multiple(array($account->uid), array('login' => '0', 'access' => '0', 'status' => '0'));
//    $user = reset($users);
//
//    // If the user never ever logged in, resend the activation mail.
//    if (!empty($user)) {
//      // Mail one time login URL and instructions using current language.
//      $params['account'] = $user;
//
//      // And on success, throw a message.
//      if (drupal_mail('bsconnexion', 'register', $user->mail, user_preferred_language($user), $params)) {
//        watchdog('user', 'Password reset instructions mailed to %name at %email.', array('%name' => $user->name, '%email' => $user->mail));
//        bsconnexion_set_message();
//      }
//    }
//  }
//  else {
//    // If we found no errors execute core submission handler.
//    // Obviously cache is disabled on this pages, so this should work.
//    if (empty($_SESSION['messages']['error'])) {
//      user_pass_submit($form, $form_state);
//    }
//  }
//}
//
//function VerifOnlyLetters($chaine){
//  $check = TRUE;
//  for ($i=0; $i < 10; $i++) {
//    $res = substr_count($chaine, $i);
//    if ($res > 0) {
//      $check = FALSE;
//    }
//  }
//  return $check;
//}
