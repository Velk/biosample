<?php 

function bsconnexion_help($path, $arg) {
  switch ($path) {
    case 'admin/help#bsconnexion':
      return '<p>' . t('Module for BIOSAMPLE connexion.') . '</p>';
  }
}

function bsconnexion_menu(){
  $items = array();

  $items['user/registrationpassword/%/%/%'] = array(
    'title' => 'Confirm account',
    'page callback' => 'drupal_get_form',
    'page arguments' =>
    array('bsconnexion_confirm_account', 2, 3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'bsconnexion.pages.inc',
  );

  $items['admin/config/system/bsconnexion'] = array(
    'title' => t('BS Connexion Settings'),
    'description' => t('BS Connexion configuration page'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bsconnexion_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['signup'] = array( 
    'title' => 'S\'ENREGISTRER', 
    'page callback' => 'drupal_get_form', 
    'page arguments' => array('user_register_form'), 
    'access callback' => TRUE
  );

  $items['profil'] = array( 
    'title' => 'MON PROFIL', 
    'page callback' => 'drupal_get_form', 
    'page arguments' => array('bsconnexion_form'), 
    'access callback' => TRUE
  );
 
  return $items; 
}

function bsconnexion_admin_settings(){
  $form['bsconnexion_bc_text_left_connexion'] = array(
    '#type' => 'textfield',
    '#title' => t('Text in the left of the connexion contains'),
    '#description' => t('Change the text in the left of the connexion contains'),
    '#default_value' => variable_get('bsconnexion_bc_text_left_connexion','Lorem Ipsum'),
  );

  $form['bsconnexion_bc_text_left_connected'] = array(
    '#type' => 'textfield',
    '#title' => t('Text in the left of the connected contains'),
    '#description' => t('Change the text in the left of the connected contains'),
    '#default_value' => variable_get('bsconnexion_bc_text_left_connected','Lorem Ipsum'),
  );

  return system_settings_form($form);
}

function bsconnexion_user_login(&$edit, $account) {
  $edit['redirect'] = '';
}

function bsconnexion_form_user_login_alter(&$form, $form_state) {
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Connexion'));
}

function bsconnexion_Form_Connected(){
  $var = '<div id="Bandeau_connexion">';
  $var .= '<p class="BC_Text_Left2">';
  $var .= variable_get('bsconnexion_bc_text_left_connected');
  $var .= '</p>';
  $var .= '<div id="BC_Profil">';
  $var .= '<p class="BC_Text_connected">Bienvenue&nbsp'.$GLOBALS['user']->name.'&nbsp|&nbsp<a href="/biosample/profil">Profil</a>&nbsp|&nbsp<a href="/biosample/user/logout">Déconnexion</a></p>';
  $var .= '</div>';
  $var .= '</div>';

  return $var;
}

function bsconnexion_functions_validate($form, &$form_state){
  if ($form_state['values']['civilite'] == 0){
    form_set_error('civilite', 'Veuillez choisir une civilité !');
  }

  if (!ctype_digit($form_state['values']['siren']) || strlen($form_state['values']['siren']) != 9){ 
    form_set_error('siren', 'Le numéro de siren doit être une suite de 9 chiffres !');
  }

  if ($form_state['values']['cg_vente'] == 0) {
    form_set_error('cg_vente', 'Veuillez accepter les conditions générales de vente pour vous inscrire');
  }

  if ($form_state['values']['cg_utilisation'] == 0) {
    form_set_error('cg_utilisation', 'Veuillez accepter les conditions générales d\'utilisation pour vous inscrire');
  }

  if (!VerifOnlyLetters($form_state['values']['ville'])) {
    form_set_error('ville', 'Le nom de la ville n\'est pas correcte');
  }

  if(!ctype_digit($form_state['values']['code_postal']) || strlen($form_state['values']['code_postal']) != 5){
    form_set_error('code_postal', 'Le code postal n\'est pas correct !');
  }

  if (!VerifOnlyLetters($form_state['values']['nom_prenom'])) {
    form_set_error('nom_prenom', 'Le nom/prénom n\'est pas correct !');
  }

  if (!VerifOnlyLetters($form_state['values']['poste_service'])) {
    form_set_error('poste_service', 'Le poste/service n\'est pas correct !');
  }

  if (!ctype_digit($form_state['values']['tel'])){ 
    form_set_error('tel', 'Le numéro de téléphone n\'est pas correct !');
  }

  if (!ctype_digit($form_state['values']['fax'])){ 
    form_set_error('fax', 'Le numéro de fax n\'est pas correct !');
  }
}

function bsconnexion_functions_submit($form, &$form_state){
$message = t('Thank you for applying for an account. Your account is currently pending approval by the site administrator.<br />In the meantime, a welcome message with further instructions has been sent to your e-mail address.');

  // Unset all messages that contain the $message.
  foreach ($_SESSION['messages']['status'] as $status => $statusmessage) {
    // Test for core message (we need to replace).
    if ($message == $statusmessage) {
      // And unset it if we find it.
      unset($_SESSION['messages']['status'][$status]);
    }
  }
  $_SESSION['messages']['status'] = array_values($_SESSION['messages']['status']);

  // Notify the user.
  $account = $form_state['user'];
  $params['account'] = $account;
  $mail = drupal_mail('bsconnexion', 'register', $account->mail, user_preferred_language($account), $params);

  // Set succes message and redirect to the front page.
  drupal_set_message(t('A welcome message with further instructions has been sent to your e-mail address.'));

  if ($form_state['values']['civilite'] == 1) {
    $civilite = "Monsieur";
  }
  else{
    $civilite = "Madame";
  }

  if ($form_state['values']['distr_fabri'] == 0) {
    $distr_fabri = "FALSE";
  }
  else{
    $distr_fabri = "TRUE";
  }

  $insert_uef = db_insert('users_extra_fields')
  ->fields(array(
  	'name' => $form_state['values']['name'],
    'civilite' => $civilite,
    'nom_prenom' => $form_state['values']['nom_prenom'],
    'siren' => $form_state['values']['siren'],
    'poste_service' => $form_state['values']['poste_service'],
    'code_postal' => $form_state['values']['code_postal'],
    'telephone' => $form_state['values']['tel'],
    'affiliation_societe' => $form_state['values']['affiliation_société'],
    'fax' => $form_state['values']['fax'],
    'ville' => $form_state['values']['ville'],
    'adresse' => $form_state['values']['adresse'],
    'distributeur_fabricant' => $form_state['values']['distr_fabri'],
  ))
  ->execute();
}

function bsconnexion_form($form, &$form_state) {

	$query = db_select('users', 'u');
    $query->join('users_extra_fields', 'uef', 'uef.name = u.name');
    $query->fields('uef');
    $query->condition('uef.name', $GLOBALS['user']->name);
    $result = $query->execute()->fetchAssoc();

  if ($result['civilite'] == "Monsieur") {
    $civilite = 1;
  }
  else{
    $civilite = 2;
  }

  $form['civilite'] = array(
     '#type' => 'select',
     '#options' => array(
        0 => t('Civilité'),
        1 => t('Monsieur'),
        2 => t('Madame'),
     ),
     '#default_value' => $civilite,
 );

  $form['nom_prenom'] = array(
    '#type' => 'textfield', 
    '#default_value' => $result['nom_prenom'], 
    '#required' => TRUE,
  );

  $form['siren'] = array(
    '#type' => 'textfield', 
    '#default_value' => $result['siren'], 
    '#required' => TRUE,
  );

  $form['poste_service'] = array(
    '#type' => 'textfield',  
    '#default_value' => $result['poste_service'], 
    '#required' => TRUE,
  );

  $form['code_postal'] = array(
    '#type' => 'textfield', 
    '#default_value' => $result['code_postal'], 
    '#required' => TRUE,
  );

  $form['tel'] = array(
    '#type' => 'textfield', 
    '#default_value' => $result['telephone'], 
    '#required' => TRUE,
  );

  $form['affiliation_société'] = array(
    '#type' => 'textfield', 
    '#default_value' => $result['affiliation_societe'], 
    '#required' => TRUE,
  );

  $form['fax'] = array(
    '#type' => 'textfield', 
    '#default_value' => $result['fax'], 
    '#required' => TRUE,
  );

  $form['ville'] = array(
    '#type' => 'textfield', 
    '#default_value' => $result['ville'], 
    '#required' => TRUE,
  );

  $form['adresse'] = array(
    '#type' => 'textfield', 
    '#default_value' => $result['adresse'], 
    '#required' => TRUE,
  );

  $form['distr_fabri'] = array(
    '#type' => 'checkbox', 
    '#default_value' => $result['distributeur_fabricant'],
    '#title' => t('Je représente un distributeur/fabricant'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Enregistrer'),
  );

  return $form;
}

function bsconnexion_form_validate($form, &$form_state) {
  if ($form_state['values']['civilite'] == 0){
    form_set_error('civilite', 'Veuillez choisir une civilité !');
  }

  if (!ctype_digit($form_state['values']['siren']) || strlen($form_state['values']['siren']) != 9){ 
    form_set_error('siren', 'Le numéro de siren doit être une suite de 9 chiffres !');
  }

  if (!VerifOnlyLetters($form_state['values']['ville'])) {
    form_set_error('ville', 'Le nom de la ville n\'est pas correcte');
  }

  if(!ctype_digit($form_state['values']['code_postal']) || strlen($form_state['values']['code_postal']) != 5){
    form_set_error('code_postal', 'Le code postal n\'est pas correct !');
  }

  if (!VerifOnlyLetters($form_state['values']['nom_prenom'])) {
    form_set_error('nom_prenom', 'Le nom/prénom n\'est pas correct !');
  }

  if (!VerifOnlyLetters($form_state['values']['poste_service'])) {
    form_set_error('poste_service', 'Le poste/service n\'est pas correct !');
  }

  if (!ctype_digit($form_state['values']['tel'])){ 
    form_set_error('tel', 'Le numéro de téléphone n\'est pas correct !');
  }

  if (!ctype_digit($form_state['values']['fax'])){ 
    form_set_error('fax', 'Le numéro de fax n\'est pas correct !');
  }
}

function bsconnexion_form_submit($form, &$form_state) {
  if ($form_state['values']['civilite'] == 1) {
    $civilite = "Monsieur";
  }
  else{
    $civilite = "Madame";
  }

  $insert_civilite = db_update('users_extra_fields')
  ->fields(array(
    'civilite' => $civilite,
  ))
  ->execute();

  $insert_nom_prenom = db_update('users_extra_fields')
  ->fields(array(
    'nom_prenom' => $form_state['values']['nom_prenom'],
  ))
  ->execute();

  $insert_siren = db_update('users_extra_fields')
  ->fields(array(
    'siren' => $form_state['values']['siren'],
  ))
  ->execute();

  $insert_poste_service = db_update('users_extra_fields')
  ->fields(array(
    'poste_service' => $form_state['values']['poste_service'],
  ))
  ->execute();

  $insert_code_postal = db_update('users_extra_fields')
  ->fields(array(
    'code_postal' => $form_state['values']['code_postal'],
  ))
  ->execute();

  $insert_telephone = db_update('users_extra_fields')
  ->fields(array(
    'telephone' => $form_state['values']['tel'],
  ))
  ->execute();

  $insert_affiliation_societe = db_update('users_extra_fields')
  ->fields(array(
    'affiliation_societe' => $form_state['values']['affiliation_société'],
  )) 
  ->execute();

  $insert_fax = db_update('users_extra_fields')
  ->fields(array(
    'fax' => $form_state['values']['fax'],
  ))
  ->execute();

  $insert_ville = db_update('users_extra_fields')
  ->fields(array(
    'ville' => $form_state['values']['ville'],
  )) 
  ->execute();

  $insert_adresse = db_update('users_extra_fields')
  ->fields(array(
    'adresse' => $form_state['values']['adresse'],
  ))
  ->execute();

  if ($form_state['values']['distr_fabri'] == 0) {
    $distr_fabri = "FALSE";
  }
  else{
    $distr_fabri = "TRUE";
  }

  $insert_distr_fabr = db_update('users_extra_fields')
  ->fields(array(
    'distributeur_fabricant' => $distr_fabri,
  ))
  ->execute();

  drupal_set_message("Vos informations ont bien été modifés.");
}

/**
 * @file
 * Enables password creation on registration form.
 */

/**
 * No verification email is sent.
 */
define('USER_REGISTRATIONPASS_NO_VERIFICATION', 'none');

/**
 * Verification email is sent before password is set.
 */
define('USER_REGISTRATIONPASS_VERIFICATION_DEFAULT', 'default');

/**
 * Verification email is sent after password is set.
 */
define('USER_REGISTRATIONPASS_VERIFICATION_PASS', 'with-pass');

/**
 * Implements hook_rules_event_info().
 */
function bsconnexion_rules_event_info() {
  return array(
    'bsconnexion_activated' => array(
      'label' => t("When the user account is activated."),
      'group' => 'User Registration Password',
      'variables' => array(
        'account' => array(
          'type' => 'user',
          'label' => t("The activated user's account"),
        ),
      ),
      'group' => t('User'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bsconnexion_form_user_admin_settings_alter(&$form, &$form_state) {
  // Render our configuration options.
  $form['registration_cancellation']['bsconnexion_registration'] = array(
    '#type' => 'radios',
    '#title' => t('Require e-mail verification when a visitor creates an account'),
    '#description' => t('Choose whether new users can set their password directly on the registration form and login during registration (without e-mail confirmation), or if they will be required to validate their e-mail address prior to logging into the site, and will be assigned a system-generated password, or they can set a password during registration, but first have to confirm their account via the activation e-mail sent after registration is complete, before they can log in to the site.'),
    '#options' => array(
      USER_REGISTRATIONPASS_NO_VERIFICATION => t('Do not require a verification e-mail, and let users set their password on the registration form.'),
      USER_REGISTRATIONPASS_VERIFICATION_DEFAULT => t('Require a verification e-mail, but wait for the approval e-mail to let users set their password.'),
      USER_REGISTRATIONPASS_VERIFICATION_PASS => t('Require a verification e-mail, but let users set their password directly on the registration form.'),
    ),
    '#default_value' => variable_get('bsconnexion_registration', USER_REGISTRATIONPASS_VERIFICATION_PASS),
  );

  // Render an option to change first time login link behaviour.
  $form['registration_cancellation']['bsconnexion_registration_ftll_expire'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Account activation link experation'),
    '#description' => t('This option enables site admins to expire activation links after the experation time has passed. People are still able to request a new activation e-mail via the password reset form after this time expires to activate their account via a new activation e-mail.'),
    '#default_value' => variable_get('bsconnexion_registration_ftll_expire', FALSE),
    '#weight' => 7,
  );
  // Hide this setting by default.
  $form['registration_cancellation']['ftll_timeout'] = array(
    '#type' => 'container',
    '#weight' => 8,
    '#states' => array(
      'invisible' => array(
        'input[name="bsconnexion_registration_ftll_expire"]' => array('checked' => FALSE),
      ),
    ),
  );
  $form['registration_cancellation']['ftll_timeout']['bsconnexion_registration_ftll_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Account activation link experation'),
    '#description' => t('Enter the experation time for the activation link (aka first time login link) sent in the activation e-mail. The default is set to 86400 seconds (= 24 hours).'),
    '#default_value' => variable_get('bsconnexion_registration_ftll_timeout', ''),
    '#maxlength' => 10,
    '#weight' => 8,
  );

  // Hide the default option.
  $form['registration_cancellation']['user_email_verification']['#access'] = FALSE;

  // Set up available tokens.
  if (module_exists('rpt')) {
    // Hide the option to generate passwords, because we
    // only use the token option the rtp module provides.
    $form['registration_cancellation']['rpt_password_generate']['#access'] = FALSE;

    // We support the Registration Password Tokens module.
    // Add a password to a template with [user:password].
    // See http://drupal.org/project/rpt for more information.
    $email_token_help = t('Available variables are: [site:name], [site:url], [user:name], [user:mail], [user:password], [site:login-url], [site:url-brief], [user:edit-url], [user:one-time-login-url], [user:cancel-url], [user:registrationpassword-url].');
  }
  else {
    $email_token_help = t('Available variables are: [site:name], [site:url], [user:name], [user:mail], [site:login-url], [site:url-brief], [user:edit-url], [user:one-time-login-url], [user:cancel-url], [user:registrationpassword-url].');
  }

  // Render e-mail template settings.
  $form['email_bsconnexion'] = array(
    '#type' => 'fieldset',
    '#title' => t('Welcome (no approval required, password is set)'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('Edit the welcome e-mail messages sent to new members upon registering, when no administrator approval is required and password has already been set.') . ' ' . $email_token_help,
    '#group' => 'email',
  );
  $form['email_bsconnexion']['bsconnexion_register_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => _bsconnexion_mail_text('register_subject', NULL, array(), FALSE),
    '#maxlength' => 180,
  );
  $form['email_bsconnexion']['bsconnexion_register_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => _bsconnexion_mail_text('register_body', NULL, array(), FALSE),
    '#rows' => 15,
  );
  // Override the default activation e-mail template with our own.
  $form['email_activated']['settings']['user_mail_status_activated_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => variable_get('user_mail_status_activated_subject', _bsconnexion_mail_text('status_activated_subject', NULL, array(), FALSE)),
    '#maxlength' => 180,
  );
  $form['email_activated']['settings']['user_mail_status_activated_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => variable_get('user_mail_status_activated_body', _bsconnexion_mail_text('status_activated_body', NULL, array(), FALSE)),
    '#rows' => 15,
  );

  // Reorder the form items back to their original order.
  $form['anonymous_settings']['#weight'] = -2;
  $form['admin_role']['#weight'] = -1;
  $form['registration_cancellation']['#weight'] = 0;
  $form['registration_cancellation']['user_cancel_method']['#weight'] = 3;
  $form['registration_cancellation']['bsconnexion_registration']['#weight'] = 2;
  $form['personalization']['#weight'] = 4;
  $form['email_title']['#weight'] = 5;
  $form['email']['#weight'] = 6;
  $form['email_admin_created']['#weight'] = 6;

  // Register our extra submit function.
  $form['#submit'][] = 'bsconnexion_admin_settings_submit';
}

/**
 * Submit handler for the user admin form.
 */
function bsconnexion_admin_settings_submit(&$form, &$form_state) {
  $value = $form_state['values']['bsconnexion_registration'];
  if ($value == USER_REGISTRATIONPASS_VERIFICATION_PASS) {
    variable_set('user_email_verification', FALSE);
    // Prevent standard notification email to administrators and to user.
    variable_set('user_mail_register_pending_approval_notify', FALSE);
    variable_set('user_mail_register_no_approval_required_notify', FALSE);
  }
  else {
    // Enable or disable core verification.
    if ($value == USER_REGISTRATIONPASS_NO_VERIFICATION) {
      variable_set('user_email_verification', FALSE);
    }
    else {
      variable_set('user_email_verification', TRUE);
    }

    // Let default value.
    // @see _user_mail_notify()
    variable_del('user_mail_register_pending_approval_notify');
    variable_del('user_mail_register_no_approval_required_notify');
  }

  // Save or revert experation limits variables.
  if ($form_state['values']['bsconnexion_registration_ftll_expire']) {
    variable_set('bsconnexion_registration_ftll_expire', $form_state['values']['bsconnexion_registration_ftll_expire']);
  }
  else {
    variable_del('bsconnexion_registration_ftll_expire');
  }
  if ($form_state['values']['bsconnexion_registration_ftll_timeout'] && $form_state['values']['bsconnexion_registration_ftll_timeout'] != 86400) {
    variable_set('bsconnexion_registration_ftll_timeout', $form_state['values']['bsconnexion_registration_ftll_timeout']);
  }
  else {
    variable_del('bsconnexion_registration_ftll_timeout');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see user_register_form()
 * @see bsconnexion_form_user_register_submit()
 */
function bsconnexion_form_user_register_form_alter(&$form, &$form_state) {
  // Prevent this from being run if approval with password on registration
  // form is set and the user is an anonymous user registering to the site.
  // When admin users create a user, this does not need to be executed.
  // And when this also does not need to be executed 'user_register' is not set
  // as 'Visitors can create accounts and no administrator approval is
  // required.' User registers, recieves user_registrationpass email, would
  // not make sense. Cause that will unblock the user Without
  // the admin 'approving'.
  global $user;
  if (variable_get('user_register', USER_REGISTER_VISITORS) == USER_REGISTER_VISITORS
      && variable_get('user_registrationpassword_registration', USER_REGISTRATIONPASS_VERIFICATION_DEFAULT) == USER_REGISTRATIONPASS_VERIFICATION_PASS
      && !$user->uid) {
    // Set the user account to blocked.
    $form['account']['status']['#default_value'] = FALSE;
    // Supress any notification.
    $form['account']['notify']['#default_value'] = FALSE;

    $form['account']['name']['#default_value'] = 'Identifiant';
    $form['account']['mail']['#default_value'] = 'Adresse mail';

    $form['civilite'] = array(
       '#type' => 'select',
       '#options' => array(
          0 => t('Civilité'),
          1 => t('Monsieur'),
          2 => t('Madame'),
       ),
    );

    $form['nom_prenom'] = array(
      '#type' => 'textfield', 
      '#default_value' => 'Nom / Prénom', 
      '#required' => TRUE,
    );

    $form['siren'] = array(
      '#type' => 'textfield', 
      '#default_value' => 'n° Siren', 
      '#required' => TRUE,
    );

    $form['poste_service'] = array(
      '#type' => 'textfield',  
      '#default_value' => 'Poste / Service', 
      '#required' => TRUE,
    );

    $form['code_postal'] = array(
      '#type' => 'textfield', 
      '#default_value' => 'Code Postal', 
      '#required' => TRUE,
    );

    $form['tel'] = array(
      '#type' => 'textfield', 
      '#default_value' => 'Téléphone', 
      '#required' => TRUE,
    );

    $form['affiliation_société'] = array(
      '#type' => 'textfield', 
      '#default_value' => 'Affiliation / Société', 
      '#required' => TRUE,
    );

    $form['fax'] = array(
      '#type' => 'textfield', 
      '#default_value' => 'Fax', 
      '#required' => TRUE,
    );

    $form['ville'] = array(
      '#type' => 'textfield', 
      '#default_value' => 'Ville', 
      '#required' => TRUE,
    );

    $form['adresse'] = array(
      '#type' => 'textfield', 
      '#default_value' => 'Adresse', 
      '#required' => TRUE,
    );

    $form['distr_fabri'] = array(
      '#type' => 'checkbox', 
      '#title' => t('Je représente un distributeur/fabricant'),
    );

    $form['cg_utilisation'] = array(
      '#type' => 'checkbox', 
      '#title' => t('J\'accepte les conditions générales d\'utilisation'),
    );

    $form['cg_vente'] = array(
      '#type' => 'checkbox', 
      '#title' => t('J\'accepte les conditions générales de vente'),
    );

    $form['#validate'][] = 'bsconnexion_functions_validate';
    $form['#submit'][] = 'bsconnexion_functions_submit';
  }
}

/**
 * Implements hook_mail().
 *
 * @see drupal_mail()
 * @see _bsconnexion_mail_text()
 * @see bsconnexion_mailkeys()
 * @see bsconnexion_mail_edit_text()
 * @see bsconnexion_mail_edit_token_types()
 */
function bsconnexion_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = array('user' => $params['account']);
  $message['subject'] .= _bsconnexion_mail_text($key . '_subject', $language, $variables);
  $message['body'][] = _bsconnexion_mail_text($key . '_body', $language, $variables);
}

/**
 * Returns a mail string for a variable name.
 *
 * @see bsconnexion_mail()
 * @see bsconnexion_mail_tokens()
 * @see bsconnexion_mailkeys()
 * @see bsconnexion_mail_edit_text()
 * @see bsconnexion_mail_edit_token_types()
 */
function _bsconnexion_mail_text($key, $language = NULL, $variables = array(), $replace = TRUE) {
  $langcode = isset($language) ? $language->language : NULL;

  if ($admin_setting = variable_get('bsconnexion_' . $key, FALSE)) {
    // An admin setting overrides the default string.
    $text = $admin_setting;
  }
  else {
    // No override, return default string.
    switch ($key) {
      case 'register_subject':
        $text = t('Account details for [user:name] at [site:name]', array(), array('langcode' => $langcode));
        break;

      case 'register_body':
        $text = t("[user:name],

Thank you for registering at [site:name]. You may now log in and verify your account by clicking this link or copying and pasting it to your browser:

[user:registrationpassword-url]

This link can only be used once. You will be able to log in at [site:login-url] in the future using:

username: [user:name]
password: Your password

--  [site:name] team", array(), array('langcode' => $langcode));
        break;

      case 'status_activated_subject':
        $text = t('Welcome message for [user:name] at [site:name]', array(), array('langcode' => $langcode));
        break;

      case 'status_activated_body':
        $text = t("[user:name],

Your account at [site:name] has been activated.

You will be able to log in to [site:login-url] in the future using:

username: [user:name]
password: your password.

--  [site:name] team", array(), array('langcode' => $langcode));
        break;

    }
  }

  if ($replace) {
    // We do not sanitize the token replacement, since the output of this
    // replacement is intended for an e-mail message, not a web browser.
    return token_replace($text, $variables,
      array(
        'language' => $language,
        'callback' => 'bsconnexion_mail_tokens',
        'sanitize' => FALSE)
      );
  }

  return $text;
}

/**
 * Token callback to add unsafe tokens for user mails.
 *
 * @see user_mail_tokens()
 * @see bsconnexion_mail()
 * @see bsconnexion_confirmation_url()
 */
function bsconnexion_mail_tokens(&$replacements, $data, $options) {
  user_mail_tokens($replacements, $data, $options);
  if (isset($data['user'])) {
    $replacements['[user:registrationpassword-url]'] = bsconnexion_confirmation_url($data['user']);
  }
  // For D7 we use the rpt module to enable emails to contain
  // the user's password, so no need to add the password
  // token here, people just need to install rpt.
}

/**
 * Generates a unique URL for a user to login with their password already set.
 *
 * @param object $account
 *   An object containing the user account.
 *
 * @return string
 *   A unique URL that provides a one-time log in for the user, from which
 *   they can change their password.
 *
 * @see bsconnexion_mail_tokens()
 * @see user_pass_rehash()
 */
function bsconnexion_confirmation_url($account) {
  $timestamp = REQUEST_TIME;
  return url("user/registrationpassword/$account->uid/$timestamp/" . user_pass_rehash($account->pass, $timestamp, $account->name, $account->uid), array('absolute' => TRUE));
}

/**
 * Implements hook_mailkeys().
 *
 * @return array
 *   A simple string to identify the mailkey.
 *
 * @see bsconnexion_mail()
 * @see _bsconnexion_mail_text()
 * @see bsconnexion_mail_tokens()
 * @see bsconnexion_mail_edit_text()
 * @see bsconnexion_mail_edit_token_types()
 */
function bsconnexion_mailkeys() {
  return array(
    'register' => t('Welcome message when user self-registers and sets password during registration'),
  );
}

/**
 * Implements hook_mail_edit_text().
 *
 * @param string $mailkey
 *   The mailkey string.
 *
 * @param object $language
 *   The language.
 *
 * @return array
 *   Subject and body, ready for processing.
 *
 * @see bsconnexion_mail()
 * @see _bsconnexion_mail_text()
 * @see bsconnexion_mail_tokens()
 * @see bsconnexion_mailkeys()
 * @see bsconnexion_mail_edit_text()
 * @see bsconnexion_mail_edit_token_types()
 */
function bsconnexion_mail_edit_text($mailkey, $language) {
  $return = array();
  $return['subject'] = _bsconnexion_mail_text($mailkey . '_subject', $language, array(), FALSE);
  $return['body'] = _bsconnexion_mail_text($mailkey . '_body', $language, array(), FALSE);
  return $return;
}

/**
 * Implements hook_mail_edit_token_types().
 *
 * @param string $mailkey
 *   The mailkey.
 *
 * @return array
 *   A simple array for constructing the mail / tokens.
 *
 * @see bsconnexion_mail()
 * @see _bsconnexion_mail_text()
 * @see bsconnexion_mail_tokens()
 * @see bsconnexion_mailkeys()
 * @see bsconnexion_mail_edit_text()
 */
function bsconnexion_mail_edit_token_types($mailkey) {
  return array('user');
}

/**
 * Implements hook_variable_info().
 *
 * @see variable.module.
 */
function bsconnexion_variable_info($options) {
  $variables['bsconnexion_register_[mail_part]'] = array(
    'type' => 'user_mail',
    'title' => t('Welcome, no approval, password is already set', array(), $options),
    'description' => t('Customize welcome e-mail messages sent to new members when password is already set.', array(), $options),
    'group' => 'user_mails',
  );

  return $variables;
}

/**
 * Simple message and redirect.
 */
function bsconnexion_set_message($type = 'welcome', $redirect = '') {
  // Select what message to display.
  switch ($type) {
    case 'linkerror':
      drupal_set_message(t('You have tried to use a one-time login link that has either been used or is no longer valid. Please request a new one using the form below.'));

      // Redirect to user/pass.
      if (!empty($redirect)) {
        drupal_goto('user/password');
      }
      break;

    case 'welcome':
      drupal_set_message(t('Further instructions have been sent to your e-mail address.'));
      // Redirect to front.
      if (!empty($redirect)) {
        drupal_goto();
      }
      break;

  }
}

/**
* Implements hook_form_FORM_ID_alter().
*/
function bsconnexion_form_user_pass_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][0] = '_bsconnexion_user_pass_validate';
  $form['#submit'][0] = '_bsconnexion_user_pass_submit';
}

/**
* Form validation function.
*/
function _bsconnexion_user_pass_validate(&$form, &$form_state) {
  // We try and load a blocked user that never ever logged in.
  // This should only return 'brand new' user accounts.
  $name = trim($form_state['values']['name']);
  // Try to load by email.
  $users = user_load_multiple(array(),
    array(
      'mail' => $name,
      'status' => '0',
      'access' => '0',
      'login' => '0',
    )
  );
  $account = reset($users);

  if (!$account) {
    // No success, try to load by name.
    $users = user_load_multiple(array(),
      array(
        'name' => $name,
        'status' => '0',
        'access' => '0',
        'login' => '0',
      )
    );
    $account = reset($users);
  }

  // If the account has never ever been used, load
  // the $account into the form for processing.
  if (!empty($account->uid)) {
    form_set_value(array('#parents' => array('account')), $account, $form_state);
  }
  else {
    user_pass_validate($form, $form_state);
  }
}

/**
* Implements submit function.
*/
function _bsconnexion_user_pass_submit(&$form, &$form_state) {
  $account = $form_state['values']['account'];

  // Then, if we have a user account
  // and it has never ever been used.
  if (!empty($account->uid) && !$account->login && !$account->access && !$account->status) {

    // Try to load the account in disabled state.
    $users = user_load_multiple(array($account->uid), array('login' => '0', 'access' => '0', 'status' => '0'));
    $user = reset($users);

    // If the user never ever logged in, resend the activation mail.
    if (!empty($user)) {
      // Mail one time login URL and instructions using current language.
      $params['account'] = $user;

      // And on success, throw a message.
      if (drupal_mail('bsconnexion', 'register', $user->mail, user_preferred_language($user), $params)) {
        watchdog('user', 'Password reset instructions mailed to %name at %email.', array('%name' => $user->name, '%email' => $user->mail));
        bsconnexion_set_message();
      }
    }
  }
  else {
    // If we found no errors execute core submission handler.
    // Obviously cache is disabled on this pages, so this should work.
    if (empty($_SESSION['messages']['error'])) {
      user_pass_submit($form, $form_state);
    }
  }
}

function VerifOnlyLetters($chaine){
  $check = TRUE;
  for ($i=0; $i < 10; $i++) {
    $res = substr_count($chaine, $i);
    if ($res > 0) {
      $check = FALSE;
    }
  }
  return $check;
}

?>
